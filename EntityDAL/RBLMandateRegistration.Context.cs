//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EntityDAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class QuickCheck_AngularEntities : DbContext
    {
        public QuickCheck_AngularEntities()
            : base("name=QuickCheck_AngularEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Mirror_tblUserLogin> Mirror_tblUserLogin { get; set; }
        public virtual DbSet<tbl_AllDatabaseName> tbl_AllDatabaseName { get; set; }
        public virtual DbSet<Tbl_Icon> Tbl_Icon { get; set; }
        public virtual DbSet<Tbl_Links> Tbl_Links { get; set; }
        public virtual DbSet<tbl_SubmittedDataDetails> tbl_SubmittedDataDetails { get; set; }
        public virtual DbSet<tbl_SumbittedDataHeader> tbl_SumbittedDataHeader { get; set; }
        public virtual DbSet<TblAccessRight> TblAccessRights { get; set; }
        public virtual DbSet<tblAddressMaster> tblAddressMasters { get; set; }
        public virtual DbSet<TblAlertNotification> TblAlertNotifications { get; set; }
        public virtual DbSet<tblAllBulkMandate> tblAllBulkMandates { get; set; }
        public virtual DbSet<tblbankData> tblbankDatas { get; set; }
        public virtual DbSet<tblBankEntityOnBoarding> tblBankEntityOnBoardings { get; set; }
        public virtual DbSet<tblBankIFSCMICR> tblBankIFSCMICRs { get; set; }
        public virtual DbSet<tblBankIMP> tblBankIMPS { get; set; }
        public virtual DbSet<tblBankMaster> tblBankMasters { get; set; }
        public virtual DbSet<tblBankOnBoardingAttachment> tblBankOnBoardingAttachments { get; set; }
        public virtual DbSet<tblBankOnBoardingContactPersonDetail> tblBankOnBoardingContactPersonDetails { get; set; }
        public virtual DbSet<tblBankOnBoardingCountry> tblBankOnBoardingCountries { get; set; }
        public virtual DbSet<tblBankTransAmount> tblBankTransAmounts { get; set; }
        public virtual DbSet<tblBranch> tblBranches { get; set; }
        public virtual DbSet<TblBranchMaster> TblBranchMasters { get; set; }
        public virtual DbSet<tblBranchUser> tblBranchUsers { get; set; }
        public virtual DbSet<tblCity> tblCities { get; set; }
        public virtual DbSet<TblClientCodeMaster> TblClientCodeMasters { get; set; }
        public virtual DbSet<tblclientData> tblclientDatas { get; set; }
        public virtual DbSet<tblConsent> tblConsents { get; set; }
        public virtual DbSet<tblCorpOnBoardingBillingDetail> tblCorpOnBoardingBillingDetails { get; set; }
        public virtual DbSet<tblCorpOnBoardingContactPerson> tblCorpOnBoardingContactPersons { get; set; }
        public virtual DbSet<tblCorporateBusinessCode> tblCorporateBusinessCodes { get; set; }
        public virtual DbSet<TblCorporateDetail> TblCorporateDetails { get; set; }
        public virtual DbSet<tblCorporateEntityDetail> tblCorporateEntityDetails { get; set; }
        public virtual DbSet<tblCorporateFinancialDetail> tblCorporateFinancialDetails { get; set; }
        public virtual DbSet<TblCorporateHeader> TblCorporateHeaders { get; set; }
        public virtual DbSet<tblCorporateOnBoardingServicesCharge> tblCorporateOnBoardingServicesCharges { get; set; }
        public virtual DbSet<tblCountry> tblCountries { get; set; }
        public virtual DbSet<tblCreateMandate> tblCreateMandates { get; set; }
        public virtual DbSet<tblCustomer> tblCustomers { get; set; }
        public virtual DbSet<tblCustomerCardDetail> tblCustomerCardDetails { get; set; }
        public virtual DbSet<tblDateFormat> tblDateFormats { get; set; }
        public virtual DbSet<tblDesignation> tblDesignations { get; set; }
        public virtual DbSet<tblDocumentMaster> tblDocumentMasters { get; set; }
        public virtual DbSet<tblEmandateLink> tblEmandateLinks { get; set; }
        public virtual DbSet<tblEntity> tblEntities { get; set; }
        public virtual DbSet<tblEntity_MandateCancelParameter> tblEntity_MandateCancelParameter { get; set; }
        public virtual DbSet<tblEntity_mirror> tblEntity_mirror { get; set; }
        public virtual DbSet<tblEntityAccountvalParameter> tblEntityAccountvalParameters { get; set; }
        public virtual DbSet<tblEntityApiParameter> tblEntityApiParameters { get; set; }
        public virtual DbSet<tblEntityBankSetup> tblEntityBankSetups { get; set; }
        public virtual DbSet<tblEntityBankSetupDate> tblEntityBankSetupDates { get; set; }
        public virtual DbSet<tblEntityBusinessCode> tblEntityBusinessCodes { get; set; }
        public virtual DbSet<tblEntityCategoryCode> tblEntityCategoryCodes { get; set; }
        public virtual DbSet<tblEntityDebitType> tblEntityDebitTypes { get; set; }
        public virtual DbSet<tblEntityFrequency> tblEntityFrequencies { get; set; }
        public virtual DbSet<tblEntityMailCredential> tblEntityMailCredentials { get; set; }
        public virtual DbSet<tblEntityPaymentMode> tblEntityPaymentModes { get; set; }
        public virtual DbSet<tblEntityPeriondEnableOn> tblEntityPeriondEnableOns { get; set; }
        public virtual DbSet<tblEntityPrimaryEmandateDetail> tblEntityPrimaryEmandateDetails { get; set; }
        public virtual DbSet<tblEntityResponseURL> tblEntityResponseURLs { get; set; }
        public virtual DbSet<tblEntitySponsorcodeFileName> tblEntitySponsorcodeFileNames { get; set; }
        public virtual DbSet<tblEntityTodebit> tblEntityTodebits { get; set; }
        public virtual DbSet<tblEsignErrorMandateLog> tblEsignErrorMandateLogs { get; set; }
        public virtual DbSet<tblEsignLogMessageId> tblEsignLogMessageIds { get; set; }
        public virtual DbSet<tblExlUploadedData> tblExlUploadedDatas { get; set; }
        public virtual DbSet<tblExlUploadedDataHeader> tblExlUploadedDataHeaders { get; set; }
        public virtual DbSet<tblFileFormat> tblFileFormats { get; set; }
        public virtual DbSet<tblFileNumberSequence> tblFileNumberSequences { get; set; }
        public virtual DbSet<tblfrequencyName> tblfrequencyNames { get; set; }
        public virtual DbSet<tblFromDateParamsMaster> tblFromDateParamsMasters { get; set; }
        public virtual DbSet<TblHeadBankMaster> TblHeadBankMasters { get; set; }
        public virtual DbSet<tblHolidayMaster> tblHolidayMasters { get; set; }
        public virtual DbSet<tblIDFC_SeqCount> tblIDFC_SeqCount { get; set; }
        public virtual DbSet<tblIDFCResponseCode> tblIDFCResponseCodes { get; set; }
        public virtual DbSet<tblIFSCBank> tblIFSCBanks { get; set; }
        public virtual DbSet<tblIFSCBanksNew> tblIFSCBanksNews { get; set; }
        public virtual DbSet<tblImageActivity> tblImageActivities { get; set; }
        public virtual DbSet<tblImageActivityDetail> tblImageActivityDetails { get; set; }
        public virtual DbSet<tblInCompleteMandate> tblInCompleteMandates { get; set; }
        public virtual DbSet<tblIssuceDetail> tblIssuceDetails { get; set; }
        public virtual DbSet<tblIssue_ImageAttachement> tblIssue_ImageAttachement { get; set; }
        public virtual DbSet<tblIssueHeader> tblIssueHeaders { get; set; }
        public virtual DbSet<tblLegacyDetail> tblLegacyDetails { get; set; }
        public virtual DbSet<tblLegacyHeader> tblLegacyHeaders { get; set; }
        public virtual DbSet<TblLoginSessionTrxn> TblLoginSessionTrxns { get; set; }
        public virtual DbSet<tbllogMandate> tbllogMandates { get; set; }
        public virtual DbSet<tbllogMandateDirectDebit> tbllogMandateDirectDebits { get; set; }
        public virtual DbSet<tblLogoImage> tblLogoImages { get; set; }
        public virtual DbSet<tblLogTransaction> tblLogTransactions { get; set; }
        public virtual DbSet<TblMailMsgTransaction> TblMailMsgTransactions { get; set; }
        public virtual DbSet<tblMandate> tblMandates { get; set; }
        public virtual DbSet<tblMandate_Canceled> tblMandate_Canceled { get; set; }
        public virtual DbSet<tblMandate_Emandate> tblMandate_Emandate { get; set; }
        public virtual DbSet<tblMandate_ERegistered> tblMandate_ERegistered { get; set; }
        public virtual DbSet<tblMandate_ERejected> tblMandate_ERejected { get; set; }
        public virtual DbSet<tblMandate_Physical> tblMandate_Physical { get; set; }
        public virtual DbSet<tblMandate_PRegistered> tblMandate_PRegistered { get; set; }
        public virtual DbSet<tblMandate_PRejected> tblMandate_PRejected { get; set; }
        public virtual DbSet<tblMandate_Reverse> tblMandate_Reverse { get; set; }
        public virtual DbSet<tblMandate_Temp> tblMandate_Temp { get; set; }
        public virtual DbSet<tblMandateActivity> tblMandateActivities { get; set; }
        public virtual DbSet<tblMandateActivityDate> tblMandateActivityDates { get; set; }
        public virtual DbSet<tblMandateActivityLog> tblMandateActivityLogs { get; set; }
        public virtual DbSet<tblMandateAdhar> tblMandateAdhars { get; set; }
        public virtual DbSet<tblMandateDirectDebit> tblMandateDirectDebits { get; set; }
        public virtual DbSet<tblMandateDirectdebitUniqueId> tblMandateDirectdebitUniqueIds { get; set; }
        public virtual DbSet<tblMandateFile> tblMandateFiles { get; set; }
        public virtual DbSet<tblMandateMobile> tblMandateMobiles { get; set; }
        public virtual DbSet<tblMandateStatu> tblMandateStatus { get; set; }
        public virtual DbSet<tblMandateStatusMaster> tblMandateStatusMasters { get; set; }
        public virtual DbSet<tblMandateTransaction> tblMandateTransactions { get; set; }
        public virtual DbSet<tblMandateUniqueId> tblMandateUniqueIds { get; set; }
        public virtual DbSet<tblMergedData> tblMergedDatas { get; set; }
        public virtual DbSet<tblMobileUserLogin> tblMobileUserLogins { get; set; }
        public virtual DbSet<TblModuleMaster> TblModuleMasters { get; set; }
        public virtual DbSet<tblMsgMaster> tblMsgMasters { get; set; }
        public virtual DbSet<tblMsgTransaction> tblMsgTransactions { get; set; }
        public virtual DbSet<tblNPCIResponse> tblNPCIResponses { get; set; }
        public virtual DbSet<tblNPCIResponseFromService> tblNPCIResponseFromServices { get; set; }
        public virtual DbSet<tblNPCIResponseHDFC> tblNPCIResponseHDFCs { get; set; }
        public virtual DbSet<TblParentMenu> TblParentMenus { get; set; }
        public virtual DbSet<tblPaymentMode> tblPaymentModes { get; set; }
        public virtual DbSet<tblPaymentRequest> tblPaymentRequests { get; set; }
        public virtual DbSet<tblPaymentResponse> tblPaymentResponses { get; set; }
        public virtual DbSet<tblPennyDropAPIdetail> tblPennyDropAPIdetails { get; set; }
        public virtual DbSet<tblPhysicalRequestHeader> tblPhysicalRequestHeaders { get; set; }
        public virtual DbSet<tblPresentment_ExlUploadDataDetail> tblPresentment_ExlUploadDataDetail { get; set; }
        public virtual DbSet<tblPresentment_ExlUploadDataHeader> tblPresentment_ExlUploadDataHeader { get; set; }
        public virtual DbSet<tblPresentmentDetailSeqCount> tblPresentmentDetailSeqCounts { get; set; }
        public virtual DbSet<tblPresentmentMaker> tblPresentmentMakers { get; set; }
        public virtual DbSet<tblPresentmentResponseDetail> tblPresentmentResponseDetails { get; set; }
        public virtual DbSet<tblPresentmentResponseHeader> tblPresentmentResponseHeaders { get; set; }
        public virtual DbSet<tblPresentmentSeqcount> tblPresentmentSeqcounts { get; set; }
        public virtual DbSet<tblPriority> tblPriorities { get; set; }
        public virtual DbSet<TblProductMaster> TblProductMasters { get; set; }
        public virtual DbSet<tblPSMMaster> tblPSMMasters { get; set; }
        public virtual DbSet<tblQbackActivity> tblQbackActivities { get; set; }
        public virtual DbSet<tblQbackLogPaymentResponse> tblQbackLogPaymentResponses { get; set; }
        public virtual DbSet<tblQbackPaymentRequest> tblQbackPaymentRequests { get; set; }
        public virtual DbSet<tblQbackPaymentResponse> tblQbackPaymentResponses { get; set; }
        public virtual DbSet<tblReasonCode> tblReasonCodes { get; set; }
        public virtual DbSet<tblRecipientMailId> tblRecipientMailIds { get; set; }
        public virtual DbSet<tblRedirectURL> tblRedirectURLs { get; set; }
        public virtual DbSet<tblRegionalManagerMaster> tblRegionalManagerMasters { get; set; }
        public virtual DbSet<tblRegionMaster> tblRegionMasters { get; set; }
        public virtual DbSet<tblReportMapDB> tblReportMapDBs { get; set; }
        public virtual DbSet<TblRMMaster> TblRMMasters { get; set; }
        public virtual DbSet<TblRoleLinkBinding> TblRoleLinkBindings { get; set; }
        public virtual DbSet<TblRoleMaster> TblRoleMasters { get; set; }
        public virtual DbSet<tblSegmentMaster> tblSegmentMasters { get; set; }
        public virtual DbSet<tblServiceLog> tblServiceLogs { get; set; }
        public virtual DbSet<tblServiceMaster> tblServiceMasters { get; set; }
        public virtual DbSet<tblSponsorBankCode> tblSponsorBankCodes { get; set; }
        public virtual DbSet<tblSponsorBankCodeDetail> tblSponsorBankCodeDetails { get; set; }
        public virtual DbSet<tblState> tblStates { get; set; }
        public virtual DbSet<tblStateMaster> tblStateMasters { get; set; }
        public virtual DbSet<tblStatu> tblStatus { get; set; }
        public virtual DbSet<tblStatusMaster> tblStatusMasters { get; set; }
        public virtual DbSet<TblSubModuleMaster> TblSubModuleMasters { get; set; }
        public virtual DbSet<tblTransPresentmentHeader> tblTransPresentmentHeaders { get; set; }
        public virtual DbSet<tblUploadPhysicalResponseFileDetail> tblUploadPhysicalResponseFileDetails { get; set; }
        public virtual DbSet<tblUploadPhysicalResponseFileHeader> tblUploadPhysicalResponseFileHeaders { get; set; }
        public virtual DbSet<tblUserBranch> tblUserBranches { get; set; }
        public virtual DbSet<TblUserCategoryCode> TblUserCategoryCodes { get; set; }
        public virtual DbSet<tblUserClientCode> tblUserClientCodes { get; set; }
        public virtual DbSet<tblUserLogin> tblUserLogins { get; set; }
        public virtual DbSet<tblUserPaymentMode> tblUserPaymentModes { get; set; }
        public virtual DbSet<tblUserSponsorBankCode> tblUserSponsorBankCodes { get; set; }
        public virtual DbSet<tblUserUtilityCode> tblUserUtilityCodes { get; set; }
        public virtual DbSet<TblUserWiseProduct> TblUserWiseProducts { get; set; }
        public virtual DbSet<tblUtlityCode> tblUtlityCodes { get; set; }
        public virtual DbSet<C_Mirror_TblRoleAccessRights> C_Mirror_TblRoleAccessRights { get; set; }
        public virtual DbSet<mirror_Tbl_Links> mirror_Tbl_Links { get; set; }
        public virtual DbSet<Mirror_TblRoleAccessRights> Mirror_TblRoleAccessRights { get; set; }
        public virtual DbSet<tbl_MSG91_DeliveryReport> tbl_MSG91_DeliveryReport { get; set; }
        public virtual DbSet<tbl_MSG91_DeliveryReport_Master> tbl_MSG91_DeliveryReport_Master { get; set; }
        public virtual DbSet<TblBankBulkUploadData> TblBankBulkUploadDatas { get; set; }
        public virtual DbSet<tblBankDetail> tblBankDetails { get; set; }
        public virtual DbSet<tblBankHeader> tblBankHeaders { get; set; }
        public virtual DbSet<TblBulkSMS_MandateWise_Helper> TblBulkSMS_MandateWise_Helper { get; set; }
        public virtual DbSet<tblCorporateOtherDetail> tblCorporateOtherDetails { get; set; }
        public virtual DbSet<tblCorporateProductRequest> tblCorporateProductRequests { get; set; }
        public virtual DbSet<tblCorporateRequest> tblCorporateRequests { get; set; }
        public virtual DbSet<TblEntityMandateMode> TblEntityMandateModes { get; set; }
        public virtual DbSet<tblErrorCode> tblErrorCodes { get; set; }
        public virtual DbSet<tblEsignRequest> tblEsignRequests { get; set; }
        public virtual DbSet<tblEsignResponse> tblEsignResponses { get; set; }
        public virtual DbSet<TBLFILESEQUENCE> TBLFILESEQUENCEs { get; set; }
        public virtual DbSet<TblLegacyUnSuccess_Detail> TblLegacyUnSuccess_Detail { get; set; }
        public virtual DbSet<tblLegacyUploaded> tblLegacyUploadeds { get; set; }
        public virtual DbSet<tblLogoImage1> tblLogoImages1 { get; set; }
        public virtual DbSet<tblMandateBankBulkUploadHistory> tblMandateBankBulkUploadHistories { get; set; }
        public virtual DbSet<tblmandatebankbulkuploadhistory_15sept2020> tblmandatebankbulkuploadhistory_15sept2020 { get; set; }
        public virtual DbSet<tblPresentmentRejectedUMRN> tblPresentmentRejectedUMRNs { get; set; }
        public virtual DbSet<TblRoleAccessRight> TblRoleAccessRights { get; set; }
        public virtual DbSet<TblSubParentMenu> TblSubParentMenus { get; set; }
        public virtual DbSet<tblTempIFSCBank> tblTempIFSCBanks { get; set; }
        public virtual DbSet<TblToBePresentUMRN_Detail> TblToBePresentUMRN_Detail { get; set; }
        public virtual DbSet<tblTransactionPresentment> tblTransactionPresentments { get; set; }
        public virtual DbSet<tblTransactionPresentmentHistory> tblTransactionPresentmentHistories { get; set; }
        public virtual DbSet<tblUserWiseEntity> tblUserWiseEntities { get; set; }
        public virtual DbSet<tblYoekiResponse> tblYoekiResponses { get; set; }
        public virtual DbSet<vwKotakBillingReport> vwKotakBillingReports { get; set; }
        public virtual DbSet<vwMandateLastTransaction> vwMandateLastTransactions { get; set; }
    
        [DbFunction("QuickCheck_AngularEntities", "fn_split_string")]
        public virtual IQueryable<fn_split_string_Result> fn_split_string(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("string", @string) :
                new ObjectParameter("string", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_split_string_Result>("[QuickCheck_AngularEntities].[fn_split_string](@string, @delimiter)", stringParameter, delimiterParameter);
        }
    
        [DbFunction("QuickCheck_AngularEntities", "GetEntityID")]
        public virtual IQueryable<GetEntityID_Result> GetEntityID(Nullable<int> entityID, Nullable<int> userID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEntityID_Result>("[QuickCheck_AngularEntities].[GetEntityID](@EntityID, @UserID)", entityIDParameter, userIDParameter);
        }
    
        [DbFunction("QuickCheck_AngularEntities", "GetMandateStatus")]
        public virtual IQueryable<GetMandateStatus_Result> GetMandateStatus(Nullable<long> mandateId)
        {
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetMandateStatus_Result>("[QuickCheck_AngularEntities].[GetMandateStatus](@MandateId)", mandateIdParameter);
        }
    
        [DbFunction("QuickCheck_AngularEntities", "GetYears")]
        public virtual IQueryable<GetYears_Result> GetYears()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetYears_Result>("[QuickCheck_AngularEntities].[GetYears]()");
        }
    
        [DbFunction("QuickCheck_AngularEntities", "parseJSON")]
        public virtual IQueryable<parseJSON_Result> parseJSON(string jSON)
        {
            var jSONParameter = jSON != null ?
                new ObjectParameter("JSON", jSON) :
                new ObjectParameter("JSON", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<parseJSON_Result>("[QuickCheck_AngularEntities].[parseJSON](@JSON)", jSONParameter);
        }
    
        [DbFunction("QuickCheck_AngularEntities", "Split")]
        public virtual IQueryable<Split_Result> Split(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[QuickCheck_AngularEntities].[Split](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<Proc_BankEntityOnBoarding_Result> Proc_BankEntityOnBoarding(string queryType, Nullable<long> bankMasterId, string bankCode, string bankName, string frequency, string guidlines, Nullable<bool> nPCIStatus, string netBanking, string debitCard, string accountValidation, Nullable<int> userId, string iFSC, string mICR, string branch, Nullable<long> bankIFSCMicrId, Nullable<bool> isActive, Nullable<long> countryId, Nullable<long> stateId, Nullable<bool> isSubsidaryBank, string isSubsidaryParentBankName, Nullable<bool> status, string hOAddress, string hOCountry, string hOState, string hOCity, string hOPincode, string hORegionCode, string pHOAddress, string pHOCountry, string pHOState, string pHOCity, string pHOPincode, string pHORegionCode, string structureContries, string domesticBranchTimeBoarding, string overSeasBranchTimeBoarding, string homeSupervisoryAuthority, string detailsOfSupervisoryArrangements, Nullable<bool> nachPhysicalMandate, Nullable<bool> nachPhysicalFrontRequired, Nullable<bool> nachEmandate, Nullable<bool> nachEmandateFrontRequired, Nullable<bool> nachDirectDebit, Nullable<bool> nachDirectDebitFrontRequired, Nullable<bool> nachAdharBasMandate, Nullable<bool> nachAdharBasFrontRequired, Nullable<bool> collectionNachTranPresentation, Nullable<bool> collectionNachTranPresentationFrontRequired, Nullable<bool> uPICollection, Nullable<bool> uPICollectionFrontRequired, Nullable<bool> bBPSCollection, Nullable<bool> bBPSCollectionFrontRequired, Nullable<bool> aPBSCollection, Nullable<bool> aPBSFrontRequired, Nullable<long> bankEntityOnboardingId, string contactPersonName, string designation, string emailId, string phoneNumber, string contactPersons, string countries, string attachments)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var bankMasterIdParameter = bankMasterId.HasValue ?
                new ObjectParameter("BankMasterId", bankMasterId) :
                new ObjectParameter("BankMasterId", typeof(long));
    
            var bankCodeParameter = bankCode != null ?
                new ObjectParameter("BankCode", bankCode) :
                new ObjectParameter("BankCode", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var guidlinesParameter = guidlines != null ?
                new ObjectParameter("Guidlines", guidlines) :
                new ObjectParameter("Guidlines", typeof(string));
    
            var nPCIStatusParameter = nPCIStatus.HasValue ?
                new ObjectParameter("NPCIStatus", nPCIStatus) :
                new ObjectParameter("NPCIStatus", typeof(bool));
    
            var netBankingParameter = netBanking != null ?
                new ObjectParameter("NetBanking", netBanking) :
                new ObjectParameter("NetBanking", typeof(string));
    
            var debitCardParameter = debitCard != null ?
                new ObjectParameter("DebitCard", debitCard) :
                new ObjectParameter("DebitCard", typeof(string));
    
            var accountValidationParameter = accountValidation != null ?
                new ObjectParameter("AccountValidation", accountValidation) :
                new ObjectParameter("AccountValidation", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var mICRParameter = mICR != null ?
                new ObjectParameter("MICR", mICR) :
                new ObjectParameter("MICR", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var bankIFSCMicrIdParameter = bankIFSCMicrId.HasValue ?
                new ObjectParameter("BankIFSCMicrId", bankIFSCMicrId) :
                new ObjectParameter("BankIFSCMicrId", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(long));
    
            var isSubsidaryBankParameter = isSubsidaryBank.HasValue ?
                new ObjectParameter("IsSubsidaryBank", isSubsidaryBank) :
                new ObjectParameter("IsSubsidaryBank", typeof(bool));
    
            var isSubsidaryParentBankNameParameter = isSubsidaryParentBankName != null ?
                new ObjectParameter("IsSubsidaryParentBankName", isSubsidaryParentBankName) :
                new ObjectParameter("IsSubsidaryParentBankName", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var hOAddressParameter = hOAddress != null ?
                new ObjectParameter("HOAddress", hOAddress) :
                new ObjectParameter("HOAddress", typeof(string));
    
            var hOCountryParameter = hOCountry != null ?
                new ObjectParameter("HOCountry", hOCountry) :
                new ObjectParameter("HOCountry", typeof(string));
    
            var hOStateParameter = hOState != null ?
                new ObjectParameter("HOState", hOState) :
                new ObjectParameter("HOState", typeof(string));
    
            var hOCityParameter = hOCity != null ?
                new ObjectParameter("HOCity", hOCity) :
                new ObjectParameter("HOCity", typeof(string));
    
            var hOPincodeParameter = hOPincode != null ?
                new ObjectParameter("HOPincode", hOPincode) :
                new ObjectParameter("HOPincode", typeof(string));
    
            var hORegionCodeParameter = hORegionCode != null ?
                new ObjectParameter("HORegionCode", hORegionCode) :
                new ObjectParameter("HORegionCode", typeof(string));
    
            var pHOAddressParameter = pHOAddress != null ?
                new ObjectParameter("PHOAddress", pHOAddress) :
                new ObjectParameter("PHOAddress", typeof(string));
    
            var pHOCountryParameter = pHOCountry != null ?
                new ObjectParameter("PHOCountry", pHOCountry) :
                new ObjectParameter("PHOCountry", typeof(string));
    
            var pHOStateParameter = pHOState != null ?
                new ObjectParameter("PHOState", pHOState) :
                new ObjectParameter("PHOState", typeof(string));
    
            var pHOCityParameter = pHOCity != null ?
                new ObjectParameter("PHOCity", pHOCity) :
                new ObjectParameter("PHOCity", typeof(string));
    
            var pHOPincodeParameter = pHOPincode != null ?
                new ObjectParameter("PHOPincode", pHOPincode) :
                new ObjectParameter("PHOPincode", typeof(string));
    
            var pHORegionCodeParameter = pHORegionCode != null ?
                new ObjectParameter("PHORegionCode", pHORegionCode) :
                new ObjectParameter("PHORegionCode", typeof(string));
    
            var structureContriesParameter = structureContries != null ?
                new ObjectParameter("StructureContries", structureContries) :
                new ObjectParameter("StructureContries", typeof(string));
    
            var domesticBranchTimeBoardingParameter = domesticBranchTimeBoarding != null ?
                new ObjectParameter("DomesticBranchTimeBoarding", domesticBranchTimeBoarding) :
                new ObjectParameter("DomesticBranchTimeBoarding", typeof(string));
    
            var overSeasBranchTimeBoardingParameter = overSeasBranchTimeBoarding != null ?
                new ObjectParameter("OverSeasBranchTimeBoarding", overSeasBranchTimeBoarding) :
                new ObjectParameter("OverSeasBranchTimeBoarding", typeof(string));
    
            var homeSupervisoryAuthorityParameter = homeSupervisoryAuthority != null ?
                new ObjectParameter("HomeSupervisoryAuthority", homeSupervisoryAuthority) :
                new ObjectParameter("HomeSupervisoryAuthority", typeof(string));
    
            var detailsOfSupervisoryArrangementsParameter = detailsOfSupervisoryArrangements != null ?
                new ObjectParameter("DetailsOfSupervisoryArrangements", detailsOfSupervisoryArrangements) :
                new ObjectParameter("DetailsOfSupervisoryArrangements", typeof(string));
    
            var nachPhysicalMandateParameter = nachPhysicalMandate.HasValue ?
                new ObjectParameter("NachPhysicalMandate", nachPhysicalMandate) :
                new ObjectParameter("NachPhysicalMandate", typeof(bool));
    
            var nachPhysicalFrontRequiredParameter = nachPhysicalFrontRequired.HasValue ?
                new ObjectParameter("NachPhysicalFrontRequired", nachPhysicalFrontRequired) :
                new ObjectParameter("NachPhysicalFrontRequired", typeof(bool));
    
            var nachEmandateParameter = nachEmandate.HasValue ?
                new ObjectParameter("NachEmandate", nachEmandate) :
                new ObjectParameter("NachEmandate", typeof(bool));
    
            var nachEmandateFrontRequiredParameter = nachEmandateFrontRequired.HasValue ?
                new ObjectParameter("NachEmandateFrontRequired", nachEmandateFrontRequired) :
                new ObjectParameter("NachEmandateFrontRequired", typeof(bool));
    
            var nachDirectDebitParameter = nachDirectDebit.HasValue ?
                new ObjectParameter("NachDirectDebit", nachDirectDebit) :
                new ObjectParameter("NachDirectDebit", typeof(bool));
    
            var nachDirectDebitFrontRequiredParameter = nachDirectDebitFrontRequired.HasValue ?
                new ObjectParameter("NachDirectDebitFrontRequired", nachDirectDebitFrontRequired) :
                new ObjectParameter("NachDirectDebitFrontRequired", typeof(bool));
    
            var nachAdharBasMandateParameter = nachAdharBasMandate.HasValue ?
                new ObjectParameter("NachAdharBasMandate", nachAdharBasMandate) :
                new ObjectParameter("NachAdharBasMandate", typeof(bool));
    
            var nachAdharBasFrontRequiredParameter = nachAdharBasFrontRequired.HasValue ?
                new ObjectParameter("NachAdharBasFrontRequired", nachAdharBasFrontRequired) :
                new ObjectParameter("NachAdharBasFrontRequired", typeof(bool));
    
            var collectionNachTranPresentationParameter = collectionNachTranPresentation.HasValue ?
                new ObjectParameter("CollectionNachTranPresentation", collectionNachTranPresentation) :
                new ObjectParameter("CollectionNachTranPresentation", typeof(bool));
    
            var collectionNachTranPresentationFrontRequiredParameter = collectionNachTranPresentationFrontRequired.HasValue ?
                new ObjectParameter("CollectionNachTranPresentationFrontRequired", collectionNachTranPresentationFrontRequired) :
                new ObjectParameter("CollectionNachTranPresentationFrontRequired", typeof(bool));
    
            var uPICollectionParameter = uPICollection.HasValue ?
                new ObjectParameter("UPICollection", uPICollection) :
                new ObjectParameter("UPICollection", typeof(bool));
    
            var uPICollectionFrontRequiredParameter = uPICollectionFrontRequired.HasValue ?
                new ObjectParameter("UPICollectionFrontRequired", uPICollectionFrontRequired) :
                new ObjectParameter("UPICollectionFrontRequired", typeof(bool));
    
            var bBPSCollectionParameter = bBPSCollection.HasValue ?
                new ObjectParameter("BBPSCollection", bBPSCollection) :
                new ObjectParameter("BBPSCollection", typeof(bool));
    
            var bBPSCollectionFrontRequiredParameter = bBPSCollectionFrontRequired.HasValue ?
                new ObjectParameter("BBPSCollectionFrontRequired", bBPSCollectionFrontRequired) :
                new ObjectParameter("BBPSCollectionFrontRequired", typeof(bool));
    
            var aPBSCollectionParameter = aPBSCollection.HasValue ?
                new ObjectParameter("APBSCollection", aPBSCollection) :
                new ObjectParameter("APBSCollection", typeof(bool));
    
            var aPBSFrontRequiredParameter = aPBSFrontRequired.HasValue ?
                new ObjectParameter("APBSFrontRequired", aPBSFrontRequired) :
                new ObjectParameter("APBSFrontRequired", typeof(bool));
    
            var bankEntityOnboardingIdParameter = bankEntityOnboardingId.HasValue ?
                new ObjectParameter("BankEntityOnboardingId", bankEntityOnboardingId) :
                new ObjectParameter("BankEntityOnboardingId", typeof(long));
    
            var contactPersonNameParameter = contactPersonName != null ?
                new ObjectParameter("ContactPersonName", contactPersonName) :
                new ObjectParameter("ContactPersonName", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var contactPersonsParameter = contactPersons != null ?
                new ObjectParameter("ContactPersons", contactPersons) :
                new ObjectParameter("ContactPersons", typeof(string));
    
            var countriesParameter = countries != null ?
                new ObjectParameter("Countries", countries) :
                new ObjectParameter("Countries", typeof(string));
    
            var attachmentsParameter = attachments != null ?
                new ObjectParameter("Attachments", attachments) :
                new ObjectParameter("Attachments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_BankEntityOnBoarding_Result>("Proc_BankEntityOnBoarding", queryTypeParameter, bankMasterIdParameter, bankCodeParameter, bankNameParameter, frequencyParameter, guidlinesParameter, nPCIStatusParameter, netBankingParameter, debitCardParameter, accountValidationParameter, userIdParameter, iFSCParameter, mICRParameter, branchParameter, bankIFSCMicrIdParameter, isActiveParameter, countryIdParameter, stateIdParameter, isSubsidaryBankParameter, isSubsidaryParentBankNameParameter, statusParameter, hOAddressParameter, hOCountryParameter, hOStateParameter, hOCityParameter, hOPincodeParameter, hORegionCodeParameter, pHOAddressParameter, pHOCountryParameter, pHOStateParameter, pHOCityParameter, pHOPincodeParameter, pHORegionCodeParameter, structureContriesParameter, domesticBranchTimeBoardingParameter, overSeasBranchTimeBoardingParameter, homeSupervisoryAuthorityParameter, detailsOfSupervisoryArrangementsParameter, nachPhysicalMandateParameter, nachPhysicalFrontRequiredParameter, nachEmandateParameter, nachEmandateFrontRequiredParameter, nachDirectDebitParameter, nachDirectDebitFrontRequiredParameter, nachAdharBasMandateParameter, nachAdharBasFrontRequiredParameter, collectionNachTranPresentationParameter, collectionNachTranPresentationFrontRequiredParameter, uPICollectionParameter, uPICollectionFrontRequiredParameter, bBPSCollectionParameter, bBPSCollectionFrontRequiredParameter, aPBSCollectionParameter, aPBSFrontRequiredParameter, bankEntityOnboardingIdParameter, contactPersonNameParameter, designationParameter, emailIdParameter, phoneNumberParameter, contactPersonsParameter, countriesParameter, attachmentsParameter);
        }
    
        public virtual ObjectResult<Proc_BankEntityOnBoarding_BKP_29Sep2020_Result> Proc_BankEntityOnBoarding_BKP_29Sep2020(string queryType, Nullable<long> bankMasterId, string frequency, string guidlines, Nullable<bool> nPCIStatus, string netBanking, string debitCard, string accountValidation, Nullable<int> userId, string iFSC, string mICR, string branch, Nullable<long> bankIFSCMicrId, Nullable<bool> isActive, Nullable<long> countryId, Nullable<long> stateId, string bankCode, string bankName, Nullable<bool> isSubsidaryBank, string isSubsidaryParentBankName, Nullable<bool> status, string hOAddress, string hOCountry, string hOState, string hOCity, string hOPincode, string hORegionCode, string pHOAddress, string pHOCountry, string pHOState, string pHOCity, string pHOPincode, string pHORegionCode, string structureContries, string domesticBranchTimeBoarding, string overSeasBranchTimeBoarding, string homeSupervisoryAuthority, string detailsOfSupervisoryArrangements, Nullable<bool> nachPhysicalMandate, Nullable<bool> nachPhysicalFrontRequired, Nullable<bool> nachEmandate, Nullable<bool> nachEmandateFrontRequired, Nullable<bool> nachDirectDebit, Nullable<bool> nachDirectDebitFrontRequired, Nullable<bool> nachAdharBasMandate, Nullable<bool> nachAdharBasFrontRequired, Nullable<bool> collectionNachTranPresentation, Nullable<bool> collectionNachTranPresentationFrontRequired, Nullable<bool> uPICollection, Nullable<bool> uPICollectionFrontRequired, Nullable<bool> bBPSCollection, Nullable<bool> bBPSCollectionFrontRequired, Nullable<bool> aPBSCollection, Nullable<bool> aPBSFrontRequired, Nullable<long> bankEntityOnboardingId, string contactPersonName, string designation, string emailId, string phoneNumber)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var bankMasterIdParameter = bankMasterId.HasValue ?
                new ObjectParameter("BankMasterId", bankMasterId) :
                new ObjectParameter("BankMasterId", typeof(long));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var guidlinesParameter = guidlines != null ?
                new ObjectParameter("Guidlines", guidlines) :
                new ObjectParameter("Guidlines", typeof(string));
    
            var nPCIStatusParameter = nPCIStatus.HasValue ?
                new ObjectParameter("NPCIStatus", nPCIStatus) :
                new ObjectParameter("NPCIStatus", typeof(bool));
    
            var netBankingParameter = netBanking != null ?
                new ObjectParameter("NetBanking", netBanking) :
                new ObjectParameter("NetBanking", typeof(string));
    
            var debitCardParameter = debitCard != null ?
                new ObjectParameter("DebitCard", debitCard) :
                new ObjectParameter("DebitCard", typeof(string));
    
            var accountValidationParameter = accountValidation != null ?
                new ObjectParameter("AccountValidation", accountValidation) :
                new ObjectParameter("AccountValidation", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var mICRParameter = mICR != null ?
                new ObjectParameter("MICR", mICR) :
                new ObjectParameter("MICR", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var bankIFSCMicrIdParameter = bankIFSCMicrId.HasValue ?
                new ObjectParameter("BankIFSCMicrId", bankIFSCMicrId) :
                new ObjectParameter("BankIFSCMicrId", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(long));
    
            var bankCodeParameter = bankCode != null ?
                new ObjectParameter("BankCode", bankCode) :
                new ObjectParameter("BankCode", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var isSubsidaryBankParameter = isSubsidaryBank.HasValue ?
                new ObjectParameter("IsSubsidaryBank", isSubsidaryBank) :
                new ObjectParameter("IsSubsidaryBank", typeof(bool));
    
            var isSubsidaryParentBankNameParameter = isSubsidaryParentBankName != null ?
                new ObjectParameter("IsSubsidaryParentBankName", isSubsidaryParentBankName) :
                new ObjectParameter("IsSubsidaryParentBankName", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var hOAddressParameter = hOAddress != null ?
                new ObjectParameter("HOAddress", hOAddress) :
                new ObjectParameter("HOAddress", typeof(string));
    
            var hOCountryParameter = hOCountry != null ?
                new ObjectParameter("HOCountry", hOCountry) :
                new ObjectParameter("HOCountry", typeof(string));
    
            var hOStateParameter = hOState != null ?
                new ObjectParameter("HOState", hOState) :
                new ObjectParameter("HOState", typeof(string));
    
            var hOCityParameter = hOCity != null ?
                new ObjectParameter("HOCity", hOCity) :
                new ObjectParameter("HOCity", typeof(string));
    
            var hOPincodeParameter = hOPincode != null ?
                new ObjectParameter("HOPincode", hOPincode) :
                new ObjectParameter("HOPincode", typeof(string));
    
            var hORegionCodeParameter = hORegionCode != null ?
                new ObjectParameter("HORegionCode", hORegionCode) :
                new ObjectParameter("HORegionCode", typeof(string));
    
            var pHOAddressParameter = pHOAddress != null ?
                new ObjectParameter("PHOAddress", pHOAddress) :
                new ObjectParameter("PHOAddress", typeof(string));
    
            var pHOCountryParameter = pHOCountry != null ?
                new ObjectParameter("PHOCountry", pHOCountry) :
                new ObjectParameter("PHOCountry", typeof(string));
    
            var pHOStateParameter = pHOState != null ?
                new ObjectParameter("PHOState", pHOState) :
                new ObjectParameter("PHOState", typeof(string));
    
            var pHOCityParameter = pHOCity != null ?
                new ObjectParameter("PHOCity", pHOCity) :
                new ObjectParameter("PHOCity", typeof(string));
    
            var pHOPincodeParameter = pHOPincode != null ?
                new ObjectParameter("PHOPincode", pHOPincode) :
                new ObjectParameter("PHOPincode", typeof(string));
    
            var pHORegionCodeParameter = pHORegionCode != null ?
                new ObjectParameter("PHORegionCode", pHORegionCode) :
                new ObjectParameter("PHORegionCode", typeof(string));
    
            var structureContriesParameter = structureContries != null ?
                new ObjectParameter("StructureContries", structureContries) :
                new ObjectParameter("StructureContries", typeof(string));
    
            var domesticBranchTimeBoardingParameter = domesticBranchTimeBoarding != null ?
                new ObjectParameter("DomesticBranchTimeBoarding", domesticBranchTimeBoarding) :
                new ObjectParameter("DomesticBranchTimeBoarding", typeof(string));
    
            var overSeasBranchTimeBoardingParameter = overSeasBranchTimeBoarding != null ?
                new ObjectParameter("OverSeasBranchTimeBoarding", overSeasBranchTimeBoarding) :
                new ObjectParameter("OverSeasBranchTimeBoarding", typeof(string));
    
            var homeSupervisoryAuthorityParameter = homeSupervisoryAuthority != null ?
                new ObjectParameter("HomeSupervisoryAuthority", homeSupervisoryAuthority) :
                new ObjectParameter("HomeSupervisoryAuthority", typeof(string));
    
            var detailsOfSupervisoryArrangementsParameter = detailsOfSupervisoryArrangements != null ?
                new ObjectParameter("DetailsOfSupervisoryArrangements", detailsOfSupervisoryArrangements) :
                new ObjectParameter("DetailsOfSupervisoryArrangements", typeof(string));
    
            var nachPhysicalMandateParameter = nachPhysicalMandate.HasValue ?
                new ObjectParameter("NachPhysicalMandate", nachPhysicalMandate) :
                new ObjectParameter("NachPhysicalMandate", typeof(bool));
    
            var nachPhysicalFrontRequiredParameter = nachPhysicalFrontRequired.HasValue ?
                new ObjectParameter("NachPhysicalFrontRequired", nachPhysicalFrontRequired) :
                new ObjectParameter("NachPhysicalFrontRequired", typeof(bool));
    
            var nachEmandateParameter = nachEmandate.HasValue ?
                new ObjectParameter("NachEmandate", nachEmandate) :
                new ObjectParameter("NachEmandate", typeof(bool));
    
            var nachEmandateFrontRequiredParameter = nachEmandateFrontRequired.HasValue ?
                new ObjectParameter("NachEmandateFrontRequired", nachEmandateFrontRequired) :
                new ObjectParameter("NachEmandateFrontRequired", typeof(bool));
    
            var nachDirectDebitParameter = nachDirectDebit.HasValue ?
                new ObjectParameter("NachDirectDebit", nachDirectDebit) :
                new ObjectParameter("NachDirectDebit", typeof(bool));
    
            var nachDirectDebitFrontRequiredParameter = nachDirectDebitFrontRequired.HasValue ?
                new ObjectParameter("NachDirectDebitFrontRequired", nachDirectDebitFrontRequired) :
                new ObjectParameter("NachDirectDebitFrontRequired", typeof(bool));
    
            var nachAdharBasMandateParameter = nachAdharBasMandate.HasValue ?
                new ObjectParameter("NachAdharBasMandate", nachAdharBasMandate) :
                new ObjectParameter("NachAdharBasMandate", typeof(bool));
    
            var nachAdharBasFrontRequiredParameter = nachAdharBasFrontRequired.HasValue ?
                new ObjectParameter("NachAdharBasFrontRequired", nachAdharBasFrontRequired) :
                new ObjectParameter("NachAdharBasFrontRequired", typeof(bool));
    
            var collectionNachTranPresentationParameter = collectionNachTranPresentation.HasValue ?
                new ObjectParameter("CollectionNachTranPresentation", collectionNachTranPresentation) :
                new ObjectParameter("CollectionNachTranPresentation", typeof(bool));
    
            var collectionNachTranPresentationFrontRequiredParameter = collectionNachTranPresentationFrontRequired.HasValue ?
                new ObjectParameter("CollectionNachTranPresentationFrontRequired", collectionNachTranPresentationFrontRequired) :
                new ObjectParameter("CollectionNachTranPresentationFrontRequired", typeof(bool));
    
            var uPICollectionParameter = uPICollection.HasValue ?
                new ObjectParameter("UPICollection", uPICollection) :
                new ObjectParameter("UPICollection", typeof(bool));
    
            var uPICollectionFrontRequiredParameter = uPICollectionFrontRequired.HasValue ?
                new ObjectParameter("UPICollectionFrontRequired", uPICollectionFrontRequired) :
                new ObjectParameter("UPICollectionFrontRequired", typeof(bool));
    
            var bBPSCollectionParameter = bBPSCollection.HasValue ?
                new ObjectParameter("BBPSCollection", bBPSCollection) :
                new ObjectParameter("BBPSCollection", typeof(bool));
    
            var bBPSCollectionFrontRequiredParameter = bBPSCollectionFrontRequired.HasValue ?
                new ObjectParameter("BBPSCollectionFrontRequired", bBPSCollectionFrontRequired) :
                new ObjectParameter("BBPSCollectionFrontRequired", typeof(bool));
    
            var aPBSCollectionParameter = aPBSCollection.HasValue ?
                new ObjectParameter("APBSCollection", aPBSCollection) :
                new ObjectParameter("APBSCollection", typeof(bool));
    
            var aPBSFrontRequiredParameter = aPBSFrontRequired.HasValue ?
                new ObjectParameter("APBSFrontRequired", aPBSFrontRequired) :
                new ObjectParameter("APBSFrontRequired", typeof(bool));
    
            var bankEntityOnboardingIdParameter = bankEntityOnboardingId.HasValue ?
                new ObjectParameter("BankEntityOnboardingId", bankEntityOnboardingId) :
                new ObjectParameter("BankEntityOnboardingId", typeof(long));
    
            var contactPersonNameParameter = contactPersonName != null ?
                new ObjectParameter("ContactPersonName", contactPersonName) :
                new ObjectParameter("ContactPersonName", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_BankEntityOnBoarding_BKP_29Sep2020_Result>("Proc_BankEntityOnBoarding_BKP_29Sep2020", queryTypeParameter, bankMasterIdParameter, frequencyParameter, guidlinesParameter, nPCIStatusParameter, netBankingParameter, debitCardParameter, accountValidationParameter, userIdParameter, iFSCParameter, mICRParameter, branchParameter, bankIFSCMicrIdParameter, isActiveParameter, countryIdParameter, stateIdParameter, bankCodeParameter, bankNameParameter, isSubsidaryBankParameter, isSubsidaryParentBankNameParameter, statusParameter, hOAddressParameter, hOCountryParameter, hOStateParameter, hOCityParameter, hOPincodeParameter, hORegionCodeParameter, pHOAddressParameter, pHOCountryParameter, pHOStateParameter, pHOCityParameter, pHOPincodeParameter, pHORegionCodeParameter, structureContriesParameter, domesticBranchTimeBoardingParameter, overSeasBranchTimeBoardingParameter, homeSupervisoryAuthorityParameter, detailsOfSupervisoryArrangementsParameter, nachPhysicalMandateParameter, nachPhysicalFrontRequiredParameter, nachEmandateParameter, nachEmandateFrontRequiredParameter, nachDirectDebitParameter, nachDirectDebitFrontRequiredParameter, nachAdharBasMandateParameter, nachAdharBasFrontRequiredParameter, collectionNachTranPresentationParameter, collectionNachTranPresentationFrontRequiredParameter, uPICollectionParameter, uPICollectionFrontRequiredParameter, bBPSCollectionParameter, bBPSCollectionFrontRequiredParameter, aPBSCollectionParameter, aPBSFrontRequiredParameter, bankEntityOnboardingIdParameter, contactPersonNameParameter, designationParameter, emailIdParameter, phoneNumberParameter);
        }
    
        public virtual ObjectResult<Proc_BankEntityOnBoarding_BKP_OLD_Running_Result> Proc_BankEntityOnBoarding_BKP_OLD_Running(string queryType, Nullable<long> bankMasterId, string bankCode, string bankName, string frequency, string guidlines, Nullable<bool> nPCIStatus, string netBanking, string debitCard, string accountValidation, Nullable<int> userId, string iFSC, string mICR, string branch, Nullable<long> bankIFSCMicrId, Nullable<bool> isActive, Nullable<long> countryId, Nullable<long> stateId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var bankMasterIdParameter = bankMasterId.HasValue ?
                new ObjectParameter("BankMasterId", bankMasterId) :
                new ObjectParameter("BankMasterId", typeof(long));
    
            var bankCodeParameter = bankCode != null ?
                new ObjectParameter("BankCode", bankCode) :
                new ObjectParameter("BankCode", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var guidlinesParameter = guidlines != null ?
                new ObjectParameter("Guidlines", guidlines) :
                new ObjectParameter("Guidlines", typeof(string));
    
            var nPCIStatusParameter = nPCIStatus.HasValue ?
                new ObjectParameter("NPCIStatus", nPCIStatus) :
                new ObjectParameter("NPCIStatus", typeof(bool));
    
            var netBankingParameter = netBanking != null ?
                new ObjectParameter("NetBanking", netBanking) :
                new ObjectParameter("NetBanking", typeof(string));
    
            var debitCardParameter = debitCard != null ?
                new ObjectParameter("DebitCard", debitCard) :
                new ObjectParameter("DebitCard", typeof(string));
    
            var accountValidationParameter = accountValidation != null ?
                new ObjectParameter("AccountValidation", accountValidation) :
                new ObjectParameter("AccountValidation", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var mICRParameter = mICR != null ?
                new ObjectParameter("MICR", mICR) :
                new ObjectParameter("MICR", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var bankIFSCMicrIdParameter = bankIFSCMicrId.HasValue ?
                new ObjectParameter("BankIFSCMicrId", bankIFSCMicrId) :
                new ObjectParameter("BankIFSCMicrId", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_BankEntityOnBoarding_BKP_OLD_Running_Result>("Proc_BankEntityOnBoarding_BKP_OLD_Running", queryTypeParameter, bankMasterIdParameter, bankCodeParameter, bankNameParameter, frequencyParameter, guidlinesParameter, nPCIStatusParameter, netBankingParameter, debitCardParameter, accountValidationParameter, userIdParameter, iFSCParameter, mICRParameter, branchParameter, bankIFSCMicrIdParameter, isActiveParameter, countryIdParameter, stateIdParameter);
        }
    
        public virtual ObjectResult<string> Proc_BankMaster(string queryType, Nullable<long> bankMasterId, string bankCode, string bankName, string frequency, string guidlines, Nullable<bool> nPCIStatus, string netBanking, string debitCard, string accountValidation, Nullable<int> userId, string iFSC, string mICR, string branch, Nullable<long> bankIFSCMicrId, string bankNameMaster, Nullable<bool> isActive, Nullable<long> iSSubmember, Nullable<long> isImpSLive, Nullable<long> isNachLive, Nullable<long> isEnachLive, Nullable<long> isApbs, Nullable<long> isBankIIn, Nullable<long> isUpi, Nullable<long> netBanking_EmandateStatus, Nullable<long> debitCard_EmandateStatus, Nullable<long> isnetbankingSponsor, Nullable<long> isDebitCardSponsor, string guideLines, string parentBankName, string strTable)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var bankMasterIdParameter = bankMasterId.HasValue ?
                new ObjectParameter("BankMasterId", bankMasterId) :
                new ObjectParameter("BankMasterId", typeof(long));
    
            var bankCodeParameter = bankCode != null ?
                new ObjectParameter("BankCode", bankCode) :
                new ObjectParameter("BankCode", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var guidlinesParameter = guidlines != null ?
                new ObjectParameter("Guidlines", guidlines) :
                new ObjectParameter("Guidlines", typeof(string));
    
            var nPCIStatusParameter = nPCIStatus.HasValue ?
                new ObjectParameter("NPCIStatus", nPCIStatus) :
                new ObjectParameter("NPCIStatus", typeof(bool));
    
            var netBankingParameter = netBanking != null ?
                new ObjectParameter("NetBanking", netBanking) :
                new ObjectParameter("NetBanking", typeof(string));
    
            var debitCardParameter = debitCard != null ?
                new ObjectParameter("DebitCard", debitCard) :
                new ObjectParameter("DebitCard", typeof(string));
    
            var accountValidationParameter = accountValidation != null ?
                new ObjectParameter("AccountValidation", accountValidation) :
                new ObjectParameter("AccountValidation", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var mICRParameter = mICR != null ?
                new ObjectParameter("MICR", mICR) :
                new ObjectParameter("MICR", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var bankIFSCMicrIdParameter = bankIFSCMicrId.HasValue ?
                new ObjectParameter("BankIFSCMicrId", bankIFSCMicrId) :
                new ObjectParameter("BankIFSCMicrId", typeof(long));
    
            var bankNameMasterParameter = bankNameMaster != null ?
                new ObjectParameter("BankNameMaster", bankNameMaster) :
                new ObjectParameter("BankNameMaster", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var iSSubmemberParameter = iSSubmember.HasValue ?
                new ObjectParameter("ISSubmember", iSSubmember) :
                new ObjectParameter("ISSubmember", typeof(long));
    
            var isImpSLiveParameter = isImpSLive.HasValue ?
                new ObjectParameter("IsImpSLive", isImpSLive) :
                new ObjectParameter("IsImpSLive", typeof(long));
    
            var isNachLiveParameter = isNachLive.HasValue ?
                new ObjectParameter("IsNachLive", isNachLive) :
                new ObjectParameter("IsNachLive", typeof(long));
    
            var isEnachLiveParameter = isEnachLive.HasValue ?
                new ObjectParameter("IsEnachLive", isEnachLive) :
                new ObjectParameter("IsEnachLive", typeof(long));
    
            var isApbsParameter = isApbs.HasValue ?
                new ObjectParameter("IsApbs", isApbs) :
                new ObjectParameter("IsApbs", typeof(long));
    
            var isBankIInParameter = isBankIIn.HasValue ?
                new ObjectParameter("IsBankIIn", isBankIIn) :
                new ObjectParameter("IsBankIIn", typeof(long));
    
            var isUpiParameter = isUpi.HasValue ?
                new ObjectParameter("IsUpi", isUpi) :
                new ObjectParameter("IsUpi", typeof(long));
    
            var netBanking_EmandateStatusParameter = netBanking_EmandateStatus.HasValue ?
                new ObjectParameter("NetBanking_EmandateStatus", netBanking_EmandateStatus) :
                new ObjectParameter("NetBanking_EmandateStatus", typeof(long));
    
            var debitCard_EmandateStatusParameter = debitCard_EmandateStatus.HasValue ?
                new ObjectParameter("DebitCard_EmandateStatus", debitCard_EmandateStatus) :
                new ObjectParameter("DebitCard_EmandateStatus", typeof(long));
    
            var isnetbankingSponsorParameter = isnetbankingSponsor.HasValue ?
                new ObjectParameter("IsnetbankingSponsor", isnetbankingSponsor) :
                new ObjectParameter("IsnetbankingSponsor", typeof(long));
    
            var isDebitCardSponsorParameter = isDebitCardSponsor.HasValue ?
                new ObjectParameter("IsDebitCardSponsor", isDebitCardSponsor) :
                new ObjectParameter("IsDebitCardSponsor", typeof(long));
    
            var guideLinesParameter = guideLines != null ?
                new ObjectParameter("GuideLines", guideLines) :
                new ObjectParameter("GuideLines", typeof(string));
    
            var parentBankNameParameter = parentBankName != null ?
                new ObjectParameter("ParentBankName", parentBankName) :
                new ObjectParameter("ParentBankName", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Proc_BankMaster", queryTypeParameter, bankMasterIdParameter, bankCodeParameter, bankNameParameter, frequencyParameter, guidlinesParameter, nPCIStatusParameter, netBankingParameter, debitCardParameter, accountValidationParameter, userIdParameter, iFSCParameter, mICRParameter, branchParameter, bankIFSCMicrIdParameter, bankNameMasterParameter, isActiveParameter, iSSubmemberParameter, isImpSLiveParameter, isNachLiveParameter, isEnachLiveParameter, isApbsParameter, isBankIInParameter, isUpiParameter, netBanking_EmandateStatusParameter, debitCard_EmandateStatusParameter, isnetbankingSponsorParameter, isDebitCardSponsorParameter, guideLinesParameter, parentBankNameParameter, strTableParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> Proc_BulkUploadImages(string queryType, Nullable<int> totalImgages, Nullable<int> userID, string activityId, string reference1, string xmlDimension, Nullable<int> mappedImageCount, Nullable<int> unMappedImageCount, string entityId, string rejectReason, Nullable<bool> isOneThird)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var totalImgagesParameter = totalImgages.HasValue ?
                new ObjectParameter("TotalImgages", totalImgages) :
                new ObjectParameter("TotalImgages", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var activityIdParameter = activityId != null ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(string));
    
            var reference1Parameter = reference1 != null ?
                new ObjectParameter("Reference1", reference1) :
                new ObjectParameter("Reference1", typeof(string));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var mappedImageCountParameter = mappedImageCount.HasValue ?
                new ObjectParameter("MappedImageCount", mappedImageCount) :
                new ObjectParameter("MappedImageCount", typeof(int));
    
            var unMappedImageCountParameter = unMappedImageCount.HasValue ?
                new ObjectParameter("UnMappedImageCount", unMappedImageCount) :
                new ObjectParameter("UnMappedImageCount", typeof(int));
    
            var entityIdParameter = entityId != null ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(string));
    
            var rejectReasonParameter = rejectReason != null ?
                new ObjectParameter("RejectReason", rejectReason) :
                new ObjectParameter("RejectReason", typeof(string));
    
            var isOneThirdParameter = isOneThird.HasValue ?
                new ObjectParameter("IsOneThird", isOneThird) :
                new ObjectParameter("IsOneThird", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("Proc_BulkUploadImages", queryTypeParameter, totalImgagesParameter, userIDParameter, activityIdParameter, reference1Parameter, xmlDimensionParameter, mappedImageCountParameter, unMappedImageCountParameter, entityIdParameter, rejectReasonParameter, isOneThirdParameter);
        }
    
        public virtual ObjectResult<Proc_BulkUploadImages_BIBD_Result> Proc_BulkUploadImages_BIBD(string queryType, Nullable<int> totalImgages, Nullable<int> userID, string activityId, string reference1, string xmlDimension, Nullable<int> mappedImageCount, Nullable<int> unMappedImageCount, string entityId, string rejectReason, Nullable<bool> isOneThird)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var totalImgagesParameter = totalImgages.HasValue ?
                new ObjectParameter("TotalImgages", totalImgages) :
                new ObjectParameter("TotalImgages", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var activityIdParameter = activityId != null ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(string));
    
            var reference1Parameter = reference1 != null ?
                new ObjectParameter("Reference1", reference1) :
                new ObjectParameter("Reference1", typeof(string));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var mappedImageCountParameter = mappedImageCount.HasValue ?
                new ObjectParameter("MappedImageCount", mappedImageCount) :
                new ObjectParameter("MappedImageCount", typeof(int));
    
            var unMappedImageCountParameter = unMappedImageCount.HasValue ?
                new ObjectParameter("UnMappedImageCount", unMappedImageCount) :
                new ObjectParameter("UnMappedImageCount", typeof(int));
    
            var entityIdParameter = entityId != null ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(string));
    
            var rejectReasonParameter = rejectReason != null ?
                new ObjectParameter("RejectReason", rejectReason) :
                new ObjectParameter("RejectReason", typeof(string));
    
            var isOneThirdParameter = isOneThird.HasValue ?
                new ObjectParameter("IsOneThird", isOneThird) :
                new ObjectParameter("IsOneThird", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_BulkUploadImages_BIBD_Result>("Proc_BulkUploadImages_BIBD", queryTypeParameter, totalImgagesParameter, userIDParameter, activityIdParameter, reference1Parameter, xmlDimensionParameter, mappedImageCountParameter, unMappedImageCountParameter, entityIdParameter, rejectReasonParameter, isOneThirdParameter);
        }
    
        public virtual ObjectResult<Proc_BulkUploadImages_BulkImageSingleDataEntry_Result> Proc_BulkUploadImages_BulkImageSingleDataEntry(string queryType, Nullable<int> totalImgages, Nullable<int> userID, string activityId, string reference1, string xmlDimension, Nullable<int> mappedImageCount, Nullable<int> unMappedImageCount, string entityId, string rejectReason, Nullable<bool> isOneThird)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var totalImgagesParameter = totalImgages.HasValue ?
                new ObjectParameter("TotalImgages", totalImgages) :
                new ObjectParameter("TotalImgages", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var activityIdParameter = activityId != null ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(string));
    
            var reference1Parameter = reference1 != null ?
                new ObjectParameter("Reference1", reference1) :
                new ObjectParameter("Reference1", typeof(string));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var mappedImageCountParameter = mappedImageCount.HasValue ?
                new ObjectParameter("MappedImageCount", mappedImageCount) :
                new ObjectParameter("MappedImageCount", typeof(int));
    
            var unMappedImageCountParameter = unMappedImageCount.HasValue ?
                new ObjectParameter("UnMappedImageCount", unMappedImageCount) :
                new ObjectParameter("UnMappedImageCount", typeof(int));
    
            var entityIdParameter = entityId != null ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(string));
    
            var rejectReasonParameter = rejectReason != null ?
                new ObjectParameter("RejectReason", rejectReason) :
                new ObjectParameter("RejectReason", typeof(string));
    
            var isOneThirdParameter = isOneThird.HasValue ?
                new ObjectParameter("IsOneThird", isOneThird) :
                new ObjectParameter("IsOneThird", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_BulkUploadImages_BulkImageSingleDataEntry_Result>("Proc_BulkUploadImages_BulkImageSingleDataEntry", queryTypeParameter, totalImgagesParameter, userIDParameter, activityIdParameter, reference1Parameter, xmlDimensionParameter, mappedImageCountParameter, unMappedImageCountParameter, entityIdParameter, rejectReasonParameter, isOneThirdParameter);
        }
    
        public virtual ObjectResult<Sp_BankBulkUpload_Result> Sp_BankBulkUpload(string queryType, string xmlDimension, Nullable<int> userID, string entityId, string exlUploadedID, string activityId, Nullable<long> appId, string debitType, string frequency, string toDebit, string acNo, string bankName, string iFSC, Nullable<double> mICR, Nullable<long> netBanking, Nullable<long> debitCard, string amountRupees, string qRCodeImagepath, string refrence1, string refrence2, string addr1, string phNumber, string emailId, string from, string to, Nullable<long> mandateId, string description, string status, string nach, string rupees, string customer1, string customer2, string customer3, string dateOnMandate, string tIPPath, string pNGPath, string utilityCode, string sponsorCode, string strFromDate, string strToDate, string strTable, string paymentDataX, string xmlMandate, string filePath, string bankMICR, string typeData, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string rejectedReason, string fullbankBranch, Nullable<long> bankValidationAdminCount, Nullable<long> bankValidationUserCount, Nullable<long> acValidationAdminCount, Nullable<long> acValidationUserCount, string mandateMode, string amountWords, string sponsorBankCode, Nullable<bool> iSPhysical, Nullable<bool> isEnach, Nullable<int> topVal, string jpgPath, string activityType, string categoryCode, string custIFSC, string bankIFSC, string bulkOrNot, string mandateIdReverse, string uMRN, Nullable<long> sno)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var entityIdParameter = entityId != null ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(string));
    
            var exlUploadedIDParameter = exlUploadedID != null ?
                new ObjectParameter("ExlUploadedID", exlUploadedID) :
                new ObjectParameter("ExlUploadedID", typeof(string));
    
            var activityIdParameter = activityId != null ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("appId", appId) :
                new ObjectParameter("appId", typeof(long));
    
            var debitTypeParameter = debitType != null ?
                new ObjectParameter("DebitType", debitType) :
                new ObjectParameter("DebitType", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var toDebitParameter = toDebit != null ?
                new ObjectParameter("ToDebit", toDebit) :
                new ObjectParameter("ToDebit", typeof(string));
    
            var acNoParameter = acNo != null ?
                new ObjectParameter("AcNo", acNo) :
                new ObjectParameter("AcNo", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var mICRParameter = mICR.HasValue ?
                new ObjectParameter("MICR", mICR) :
                new ObjectParameter("MICR", typeof(double));
    
            var netBankingParameter = netBanking.HasValue ?
                new ObjectParameter("NetBanking", netBanking) :
                new ObjectParameter("NetBanking", typeof(long));
    
            var debitCardParameter = debitCard.HasValue ?
                new ObjectParameter("DebitCard", debitCard) :
                new ObjectParameter("DebitCard", typeof(long));
    
            var amountRupeesParameter = amountRupees != null ?
                new ObjectParameter("AmountRupees", amountRupees) :
                new ObjectParameter("AmountRupees", typeof(string));
    
            var qRCodeImagepathParameter = qRCodeImagepath != null ?
                new ObjectParameter("QRCodeImagepath", qRCodeImagepath) :
                new ObjectParameter("QRCodeImagepath", typeof(string));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var refrence2Parameter = refrence2 != null ?
                new ObjectParameter("Refrence2", refrence2) :
                new ObjectParameter("Refrence2", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var phNumberParameter = phNumber != null ?
                new ObjectParameter("PhNumber", phNumber) :
                new ObjectParameter("PhNumber", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var nachParameter = nach != null ?
                new ObjectParameter("Nach", nach) :
                new ObjectParameter("Nach", typeof(string));
    
            var rupeesParameter = rupees != null ?
                new ObjectParameter("Rupees", rupees) :
                new ObjectParameter("Rupees", typeof(string));
    
            var customer1Parameter = customer1 != null ?
                new ObjectParameter("Customer1", customer1) :
                new ObjectParameter("Customer1", typeof(string));
    
            var customer2Parameter = customer2 != null ?
                new ObjectParameter("Customer2", customer2) :
                new ObjectParameter("Customer2", typeof(string));
    
            var customer3Parameter = customer3 != null ?
                new ObjectParameter("Customer3", customer3) :
                new ObjectParameter("Customer3", typeof(string));
    
            var dateOnMandateParameter = dateOnMandate != null ?
                new ObjectParameter("DateOnMandate", dateOnMandate) :
                new ObjectParameter("DateOnMandate", typeof(string));
    
            var tIPPathParameter = tIPPath != null ?
                new ObjectParameter("TIPPath", tIPPath) :
                new ObjectParameter("TIPPath", typeof(string));
    
            var pNGPathParameter = pNGPath != null ?
                new ObjectParameter("PNGPath", pNGPath) :
                new ObjectParameter("PNGPath", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var sponsorCodeParameter = sponsorCode != null ?
                new ObjectParameter("SponsorCode", sponsorCode) :
                new ObjectParameter("SponsorCode", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var paymentDataXParameter = paymentDataX != null ?
                new ObjectParameter("PaymentDataX", paymentDataX) :
                new ObjectParameter("PaymentDataX", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var bankMICRParameter = bankMICR != null ?
                new ObjectParameter("BankMICR", bankMICR) :
                new ObjectParameter("BankMICR", typeof(string));
    
            var typeDataParameter = typeData != null ?
                new ObjectParameter("TypeData", typeData) :
                new ObjectParameter("TypeData", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var rejectedReasonParameter = rejectedReason != null ?
                new ObjectParameter("RejectedReason", rejectedReason) :
                new ObjectParameter("RejectedReason", typeof(string));
    
            var fullbankBranchParameter = fullbankBranch != null ?
                new ObjectParameter("fullbankBranch", fullbankBranch) :
                new ObjectParameter("fullbankBranch", typeof(string));
    
            var bankValidationAdminCountParameter = bankValidationAdminCount.HasValue ?
                new ObjectParameter("BankValidationAdminCount", bankValidationAdminCount) :
                new ObjectParameter("BankValidationAdminCount", typeof(long));
    
            var bankValidationUserCountParameter = bankValidationUserCount.HasValue ?
                new ObjectParameter("BankValidationUserCount", bankValidationUserCount) :
                new ObjectParameter("BankValidationUserCount", typeof(long));
    
            var acValidationAdminCountParameter = acValidationAdminCount.HasValue ?
                new ObjectParameter("AcValidationAdminCount", acValidationAdminCount) :
                new ObjectParameter("AcValidationAdminCount", typeof(long));
    
            var acValidationUserCountParameter = acValidationUserCount.HasValue ?
                new ObjectParameter("AcValidationUserCount", acValidationUserCount) :
                new ObjectParameter("AcValidationUserCount", typeof(long));
    
            var mandateModeParameter = mandateMode != null ?
                new ObjectParameter("MandateMode", mandateMode) :
                new ObjectParameter("MandateMode", typeof(string));
    
            var amountWordsParameter = amountWords != null ?
                new ObjectParameter("AmountWords", amountWords) :
                new ObjectParameter("AmountWords", typeof(string));
    
            var sponsorBankCodeParameter = sponsorBankCode != null ?
                new ObjectParameter("SponsorBankCode", sponsorBankCode) :
                new ObjectParameter("SponsorBankCode", typeof(string));
    
            var iSPhysicalParameter = iSPhysical.HasValue ?
                new ObjectParameter("ISPhysical", iSPhysical) :
                new ObjectParameter("ISPhysical", typeof(bool));
    
            var isEnachParameter = isEnach.HasValue ?
                new ObjectParameter("IsEnach", isEnach) :
                new ObjectParameter("IsEnach", typeof(bool));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var jpgPathParameter = jpgPath != null ?
                new ObjectParameter("jpgPath", jpgPath) :
                new ObjectParameter("jpgPath", typeof(string));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var categoryCodeParameter = categoryCode != null ?
                new ObjectParameter("CategoryCode", categoryCode) :
                new ObjectParameter("CategoryCode", typeof(string));
    
            var custIFSCParameter = custIFSC != null ?
                new ObjectParameter("CustIFSC", custIFSC) :
                new ObjectParameter("CustIFSC", typeof(string));
    
            var bankIFSCParameter = bankIFSC != null ?
                new ObjectParameter("BankIFSC", bankIFSC) :
                new ObjectParameter("BankIFSC", typeof(string));
    
            var bulkOrNotParameter = bulkOrNot != null ?
                new ObjectParameter("BulkOrNot", bulkOrNot) :
                new ObjectParameter("BulkOrNot", typeof(string));
    
            var mandateIdReverseParameter = mandateIdReverse != null ?
                new ObjectParameter("MandateIdReverse", mandateIdReverse) :
                new ObjectParameter("MandateIdReverse", typeof(string));
    
            var uMRNParameter = uMRN != null ?
                new ObjectParameter("UMRN", uMRN) :
                new ObjectParameter("UMRN", typeof(string));
    
            var snoParameter = sno.HasValue ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_BankBulkUpload_Result>("Sp_BankBulkUpload", queryTypeParameter, xmlDimensionParameter, userIDParameter, entityIdParameter, exlUploadedIDParameter, activityIdParameter, appIdParameter, debitTypeParameter, frequencyParameter, toDebitParameter, acNoParameter, bankNameParameter, iFSCParameter, mICRParameter, netBankingParameter, debitCardParameter, amountRupeesParameter, qRCodeImagepathParameter, refrence1Parameter, refrence2Parameter, addr1Parameter, phNumberParameter, emailIdParameter, fromParameter, toParameter, mandateIdParameter, descriptionParameter, statusParameter, nachParameter, rupeesParameter, customer1Parameter, customer2Parameter, customer3Parameter, dateOnMandateParameter, tIPPathParameter, pNGPathParameter, utilityCodeParameter, sponsorCodeParameter, strFromDateParameter, strToDateParameter, strTableParameter, paymentDataXParameter, xmlMandateParameter, filePathParameter, bankMICRParameter, typeDataParameter, fromDateParameter, toDateParameter, rejectedReasonParameter, fullbankBranchParameter, bankValidationAdminCountParameter, bankValidationUserCountParameter, acValidationAdminCountParameter, acValidationUserCountParameter, mandateModeParameter, amountWordsParameter, sponsorBankCodeParameter, iSPhysicalParameter, isEnachParameter, topValParameter, jpgPathParameter, activityTypeParameter, categoryCodeParameter, custIFSCParameter, bankIFSCParameter, bulkOrNotParameter, mandateIdReverseParameter, uMRNParameter, snoParameter);
        }
    
        public virtual ObjectResult<Sp_BankBulkUpload_BIBD_Result> Sp_BankBulkUpload_BIBD(string queryType, string xmlDimension, Nullable<int> userID, string entityId, string exlUploadedID, string activityId, Nullable<long> appId, string debitType, string frequency, string toDebit, string acNo, string bankName, string iFSC, Nullable<double> mICR, Nullable<long> netBanking, Nullable<long> debitCard, string amountRupees, string qRCodeImagepath, string refrence1, string refrence2, string addr1, string phNumber, string emailId, string from, string to, Nullable<long> mandateId, string description, string status, string nach, string rupees, string customer1, string customer2, string customer3, string dateOnMandate, string tIPPath, string pNGPath, string utilityCode, string sponsorCode, string strFromDate, string strToDate, string strTable, string paymentDataX, string xmlMandate, string filePath, string bankMICR, string typeData, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string rejectedReason, string fullbankBranch, Nullable<long> bankValidationAdminCount, Nullable<long> bankValidationUserCount, Nullable<long> acValidationAdminCount, Nullable<long> acValidationUserCount, string mandateMode, string amountWords, string sponsorBankCode, Nullable<bool> iSPhysical, Nullable<bool> isEnach, Nullable<int> topVal, string jpgPath, string activityType, string categoryCode, string custIFSC, string bankIFSC, string bulkOrNot, string mandateIdReverse, string uMRN, Nullable<long> sno)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var entityIdParameter = entityId != null ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(string));
    
            var exlUploadedIDParameter = exlUploadedID != null ?
                new ObjectParameter("ExlUploadedID", exlUploadedID) :
                new ObjectParameter("ExlUploadedID", typeof(string));
    
            var activityIdParameter = activityId != null ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("appId", appId) :
                new ObjectParameter("appId", typeof(long));
    
            var debitTypeParameter = debitType != null ?
                new ObjectParameter("DebitType", debitType) :
                new ObjectParameter("DebitType", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var toDebitParameter = toDebit != null ?
                new ObjectParameter("ToDebit", toDebit) :
                new ObjectParameter("ToDebit", typeof(string));
    
            var acNoParameter = acNo != null ?
                new ObjectParameter("AcNo", acNo) :
                new ObjectParameter("AcNo", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var mICRParameter = mICR.HasValue ?
                new ObjectParameter("MICR", mICR) :
                new ObjectParameter("MICR", typeof(double));
    
            var netBankingParameter = netBanking.HasValue ?
                new ObjectParameter("NetBanking", netBanking) :
                new ObjectParameter("NetBanking", typeof(long));
    
            var debitCardParameter = debitCard.HasValue ?
                new ObjectParameter("DebitCard", debitCard) :
                new ObjectParameter("DebitCard", typeof(long));
    
            var amountRupeesParameter = amountRupees != null ?
                new ObjectParameter("AmountRupees", amountRupees) :
                new ObjectParameter("AmountRupees", typeof(string));
    
            var qRCodeImagepathParameter = qRCodeImagepath != null ?
                new ObjectParameter("QRCodeImagepath", qRCodeImagepath) :
                new ObjectParameter("QRCodeImagepath", typeof(string));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var refrence2Parameter = refrence2 != null ?
                new ObjectParameter("Refrence2", refrence2) :
                new ObjectParameter("Refrence2", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var phNumberParameter = phNumber != null ?
                new ObjectParameter("PhNumber", phNumber) :
                new ObjectParameter("PhNumber", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var nachParameter = nach != null ?
                new ObjectParameter("Nach", nach) :
                new ObjectParameter("Nach", typeof(string));
    
            var rupeesParameter = rupees != null ?
                new ObjectParameter("Rupees", rupees) :
                new ObjectParameter("Rupees", typeof(string));
    
            var customer1Parameter = customer1 != null ?
                new ObjectParameter("Customer1", customer1) :
                new ObjectParameter("Customer1", typeof(string));
    
            var customer2Parameter = customer2 != null ?
                new ObjectParameter("Customer2", customer2) :
                new ObjectParameter("Customer2", typeof(string));
    
            var customer3Parameter = customer3 != null ?
                new ObjectParameter("Customer3", customer3) :
                new ObjectParameter("Customer3", typeof(string));
    
            var dateOnMandateParameter = dateOnMandate != null ?
                new ObjectParameter("DateOnMandate", dateOnMandate) :
                new ObjectParameter("DateOnMandate", typeof(string));
    
            var tIPPathParameter = tIPPath != null ?
                new ObjectParameter("TIPPath", tIPPath) :
                new ObjectParameter("TIPPath", typeof(string));
    
            var pNGPathParameter = pNGPath != null ?
                new ObjectParameter("PNGPath", pNGPath) :
                new ObjectParameter("PNGPath", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var sponsorCodeParameter = sponsorCode != null ?
                new ObjectParameter("SponsorCode", sponsorCode) :
                new ObjectParameter("SponsorCode", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var paymentDataXParameter = paymentDataX != null ?
                new ObjectParameter("PaymentDataX", paymentDataX) :
                new ObjectParameter("PaymentDataX", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var bankMICRParameter = bankMICR != null ?
                new ObjectParameter("BankMICR", bankMICR) :
                new ObjectParameter("BankMICR", typeof(string));
    
            var typeDataParameter = typeData != null ?
                new ObjectParameter("TypeData", typeData) :
                new ObjectParameter("TypeData", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var rejectedReasonParameter = rejectedReason != null ?
                new ObjectParameter("RejectedReason", rejectedReason) :
                new ObjectParameter("RejectedReason", typeof(string));
    
            var fullbankBranchParameter = fullbankBranch != null ?
                new ObjectParameter("fullbankBranch", fullbankBranch) :
                new ObjectParameter("fullbankBranch", typeof(string));
    
            var bankValidationAdminCountParameter = bankValidationAdminCount.HasValue ?
                new ObjectParameter("BankValidationAdminCount", bankValidationAdminCount) :
                new ObjectParameter("BankValidationAdminCount", typeof(long));
    
            var bankValidationUserCountParameter = bankValidationUserCount.HasValue ?
                new ObjectParameter("BankValidationUserCount", bankValidationUserCount) :
                new ObjectParameter("BankValidationUserCount", typeof(long));
    
            var acValidationAdminCountParameter = acValidationAdminCount.HasValue ?
                new ObjectParameter("AcValidationAdminCount", acValidationAdminCount) :
                new ObjectParameter("AcValidationAdminCount", typeof(long));
    
            var acValidationUserCountParameter = acValidationUserCount.HasValue ?
                new ObjectParameter("AcValidationUserCount", acValidationUserCount) :
                new ObjectParameter("AcValidationUserCount", typeof(long));
    
            var mandateModeParameter = mandateMode != null ?
                new ObjectParameter("MandateMode", mandateMode) :
                new ObjectParameter("MandateMode", typeof(string));
    
            var amountWordsParameter = amountWords != null ?
                new ObjectParameter("AmountWords", amountWords) :
                new ObjectParameter("AmountWords", typeof(string));
    
            var sponsorBankCodeParameter = sponsorBankCode != null ?
                new ObjectParameter("SponsorBankCode", sponsorBankCode) :
                new ObjectParameter("SponsorBankCode", typeof(string));
    
            var iSPhysicalParameter = iSPhysical.HasValue ?
                new ObjectParameter("ISPhysical", iSPhysical) :
                new ObjectParameter("ISPhysical", typeof(bool));
    
            var isEnachParameter = isEnach.HasValue ?
                new ObjectParameter("IsEnach", isEnach) :
                new ObjectParameter("IsEnach", typeof(bool));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var jpgPathParameter = jpgPath != null ?
                new ObjectParameter("jpgPath", jpgPath) :
                new ObjectParameter("jpgPath", typeof(string));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var categoryCodeParameter = categoryCode != null ?
                new ObjectParameter("CategoryCode", categoryCode) :
                new ObjectParameter("CategoryCode", typeof(string));
    
            var custIFSCParameter = custIFSC != null ?
                new ObjectParameter("CustIFSC", custIFSC) :
                new ObjectParameter("CustIFSC", typeof(string));
    
            var bankIFSCParameter = bankIFSC != null ?
                new ObjectParameter("BankIFSC", bankIFSC) :
                new ObjectParameter("BankIFSC", typeof(string));
    
            var bulkOrNotParameter = bulkOrNot != null ?
                new ObjectParameter("BulkOrNot", bulkOrNot) :
                new ObjectParameter("BulkOrNot", typeof(string));
    
            var mandateIdReverseParameter = mandateIdReverse != null ?
                new ObjectParameter("MandateIdReverse", mandateIdReverse) :
                new ObjectParameter("MandateIdReverse", typeof(string));
    
            var uMRNParameter = uMRN != null ?
                new ObjectParameter("UMRN", uMRN) :
                new ObjectParameter("UMRN", typeof(string));
    
            var snoParameter = sno.HasValue ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_BankBulkUpload_BIBD_Result>("Sp_BankBulkUpload_BIBD", queryTypeParameter, xmlDimensionParameter, userIDParameter, entityIdParameter, exlUploadedIDParameter, activityIdParameter, appIdParameter, debitTypeParameter, frequencyParameter, toDebitParameter, acNoParameter, bankNameParameter, iFSCParameter, mICRParameter, netBankingParameter, debitCardParameter, amountRupeesParameter, qRCodeImagepathParameter, refrence1Parameter, refrence2Parameter, addr1Parameter, phNumberParameter, emailIdParameter, fromParameter, toParameter, mandateIdParameter, descriptionParameter, statusParameter, nachParameter, rupeesParameter, customer1Parameter, customer2Parameter, customer3Parameter, dateOnMandateParameter, tIPPathParameter, pNGPathParameter, utilityCodeParameter, sponsorCodeParameter, strFromDateParameter, strToDateParameter, strTableParameter, paymentDataXParameter, xmlMandateParameter, filePathParameter, bankMICRParameter, typeDataParameter, fromDateParameter, toDateParameter, rejectedReasonParameter, fullbankBranchParameter, bankValidationAdminCountParameter, bankValidationUserCountParameter, acValidationAdminCountParameter, acValidationUserCountParameter, mandateModeParameter, amountWordsParameter, sponsorBankCodeParameter, iSPhysicalParameter, isEnachParameter, topValParameter, jpgPathParameter, activityTypeParameter, categoryCodeParameter, custIFSCParameter, bankIFSCParameter, bulkOrNotParameter, mandateIdReverseParameter, uMRNParameter, snoParameter);
        }
    
        public virtual ObjectResult<Sp_BankBulkUpload_BulkImageSingleDataEntry_Result> Sp_BankBulkUpload_BulkImageSingleDataEntry(string queryType, string xmlDimension, Nullable<int> userID, string entityId, string exlUploadedID, string activityId, Nullable<long> appId, string debitType, string frequency, string toDebit, string acNo, string bankName, string iFSC, Nullable<double> mICR, Nullable<long> netBanking, Nullable<long> debitCard, string amountRupees, string qRCodeImagepath, string refrence1, string refrence2, string addr1, string phNumber, string emailId, string from, string to, Nullable<long> mandateId, string description, string status, string nach, string rupees, string customer1, string customer2, string customer3, string dateOnMandate, string tIPPath, string pNGPath, string utilityCode, string sponsorCode, string strFromDate, string strToDate, string strTable, string paymentDataX, string xmlMandate, string filePath, string bankMICR, string typeData, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string rejectedReason, string fullbankBranch, Nullable<long> bankValidationAdminCount, Nullable<long> bankValidationUserCount, Nullable<long> acValidationAdminCount, Nullable<long> acValidationUserCount, string mandateMode, string amountWords, string sponsorBankCode, Nullable<bool> iSPhysical, Nullable<bool> isEnach, Nullable<int> topVal, string jpgPath, string activityType, string categoryCode, string custIFSC, string bankIFSC, string bulkOrNot, string mandateIdReverse, string uMRN, Nullable<long> sno)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var entityIdParameter = entityId != null ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(string));
    
            var exlUploadedIDParameter = exlUploadedID != null ?
                new ObjectParameter("ExlUploadedID", exlUploadedID) :
                new ObjectParameter("ExlUploadedID", typeof(string));
    
            var activityIdParameter = activityId != null ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("appId", appId) :
                new ObjectParameter("appId", typeof(long));
    
            var debitTypeParameter = debitType != null ?
                new ObjectParameter("DebitType", debitType) :
                new ObjectParameter("DebitType", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var toDebitParameter = toDebit != null ?
                new ObjectParameter("ToDebit", toDebit) :
                new ObjectParameter("ToDebit", typeof(string));
    
            var acNoParameter = acNo != null ?
                new ObjectParameter("AcNo", acNo) :
                new ObjectParameter("AcNo", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var mICRParameter = mICR.HasValue ?
                new ObjectParameter("MICR", mICR) :
                new ObjectParameter("MICR", typeof(double));
    
            var netBankingParameter = netBanking.HasValue ?
                new ObjectParameter("NetBanking", netBanking) :
                new ObjectParameter("NetBanking", typeof(long));
    
            var debitCardParameter = debitCard.HasValue ?
                new ObjectParameter("DebitCard", debitCard) :
                new ObjectParameter("DebitCard", typeof(long));
    
            var amountRupeesParameter = amountRupees != null ?
                new ObjectParameter("AmountRupees", amountRupees) :
                new ObjectParameter("AmountRupees", typeof(string));
    
            var qRCodeImagepathParameter = qRCodeImagepath != null ?
                new ObjectParameter("QRCodeImagepath", qRCodeImagepath) :
                new ObjectParameter("QRCodeImagepath", typeof(string));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var refrence2Parameter = refrence2 != null ?
                new ObjectParameter("Refrence2", refrence2) :
                new ObjectParameter("Refrence2", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var phNumberParameter = phNumber != null ?
                new ObjectParameter("PhNumber", phNumber) :
                new ObjectParameter("PhNumber", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var nachParameter = nach != null ?
                new ObjectParameter("Nach", nach) :
                new ObjectParameter("Nach", typeof(string));
    
            var rupeesParameter = rupees != null ?
                new ObjectParameter("Rupees", rupees) :
                new ObjectParameter("Rupees", typeof(string));
    
            var customer1Parameter = customer1 != null ?
                new ObjectParameter("Customer1", customer1) :
                new ObjectParameter("Customer1", typeof(string));
    
            var customer2Parameter = customer2 != null ?
                new ObjectParameter("Customer2", customer2) :
                new ObjectParameter("Customer2", typeof(string));
    
            var customer3Parameter = customer3 != null ?
                new ObjectParameter("Customer3", customer3) :
                new ObjectParameter("Customer3", typeof(string));
    
            var dateOnMandateParameter = dateOnMandate != null ?
                new ObjectParameter("DateOnMandate", dateOnMandate) :
                new ObjectParameter("DateOnMandate", typeof(string));
    
            var tIPPathParameter = tIPPath != null ?
                new ObjectParameter("TIPPath", tIPPath) :
                new ObjectParameter("TIPPath", typeof(string));
    
            var pNGPathParameter = pNGPath != null ?
                new ObjectParameter("PNGPath", pNGPath) :
                new ObjectParameter("PNGPath", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var sponsorCodeParameter = sponsorCode != null ?
                new ObjectParameter("SponsorCode", sponsorCode) :
                new ObjectParameter("SponsorCode", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var paymentDataXParameter = paymentDataX != null ?
                new ObjectParameter("PaymentDataX", paymentDataX) :
                new ObjectParameter("PaymentDataX", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var bankMICRParameter = bankMICR != null ?
                new ObjectParameter("BankMICR", bankMICR) :
                new ObjectParameter("BankMICR", typeof(string));
    
            var typeDataParameter = typeData != null ?
                new ObjectParameter("TypeData", typeData) :
                new ObjectParameter("TypeData", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var rejectedReasonParameter = rejectedReason != null ?
                new ObjectParameter("RejectedReason", rejectedReason) :
                new ObjectParameter("RejectedReason", typeof(string));
    
            var fullbankBranchParameter = fullbankBranch != null ?
                new ObjectParameter("fullbankBranch", fullbankBranch) :
                new ObjectParameter("fullbankBranch", typeof(string));
    
            var bankValidationAdminCountParameter = bankValidationAdminCount.HasValue ?
                new ObjectParameter("BankValidationAdminCount", bankValidationAdminCount) :
                new ObjectParameter("BankValidationAdminCount", typeof(long));
    
            var bankValidationUserCountParameter = bankValidationUserCount.HasValue ?
                new ObjectParameter("BankValidationUserCount", bankValidationUserCount) :
                new ObjectParameter("BankValidationUserCount", typeof(long));
    
            var acValidationAdminCountParameter = acValidationAdminCount.HasValue ?
                new ObjectParameter("AcValidationAdminCount", acValidationAdminCount) :
                new ObjectParameter("AcValidationAdminCount", typeof(long));
    
            var acValidationUserCountParameter = acValidationUserCount.HasValue ?
                new ObjectParameter("AcValidationUserCount", acValidationUserCount) :
                new ObjectParameter("AcValidationUserCount", typeof(long));
    
            var mandateModeParameter = mandateMode != null ?
                new ObjectParameter("MandateMode", mandateMode) :
                new ObjectParameter("MandateMode", typeof(string));
    
            var amountWordsParameter = amountWords != null ?
                new ObjectParameter("AmountWords", amountWords) :
                new ObjectParameter("AmountWords", typeof(string));
    
            var sponsorBankCodeParameter = sponsorBankCode != null ?
                new ObjectParameter("SponsorBankCode", sponsorBankCode) :
                new ObjectParameter("SponsorBankCode", typeof(string));
    
            var iSPhysicalParameter = iSPhysical.HasValue ?
                new ObjectParameter("ISPhysical", iSPhysical) :
                new ObjectParameter("ISPhysical", typeof(bool));
    
            var isEnachParameter = isEnach.HasValue ?
                new ObjectParameter("IsEnach", isEnach) :
                new ObjectParameter("IsEnach", typeof(bool));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var jpgPathParameter = jpgPath != null ?
                new ObjectParameter("jpgPath", jpgPath) :
                new ObjectParameter("jpgPath", typeof(string));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var categoryCodeParameter = categoryCode != null ?
                new ObjectParameter("CategoryCode", categoryCode) :
                new ObjectParameter("CategoryCode", typeof(string));
    
            var custIFSCParameter = custIFSC != null ?
                new ObjectParameter("CustIFSC", custIFSC) :
                new ObjectParameter("CustIFSC", typeof(string));
    
            var bankIFSCParameter = bankIFSC != null ?
                new ObjectParameter("BankIFSC", bankIFSC) :
                new ObjectParameter("BankIFSC", typeof(string));
    
            var bulkOrNotParameter = bulkOrNot != null ?
                new ObjectParameter("BulkOrNot", bulkOrNot) :
                new ObjectParameter("BulkOrNot", typeof(string));
    
            var mandateIdReverseParameter = mandateIdReverse != null ?
                new ObjectParameter("MandateIdReverse", mandateIdReverse) :
                new ObjectParameter("MandateIdReverse", typeof(string));
    
            var uMRNParameter = uMRN != null ?
                new ObjectParameter("UMRN", uMRN) :
                new ObjectParameter("UMRN", typeof(string));
    
            var snoParameter = sno.HasValue ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_BankBulkUpload_BulkImageSingleDataEntry_Result>("Sp_BankBulkUpload_BulkImageSingleDataEntry", queryTypeParameter, xmlDimensionParameter, userIDParameter, entityIdParameter, exlUploadedIDParameter, activityIdParameter, appIdParameter, debitTypeParameter, frequencyParameter, toDebitParameter, acNoParameter, bankNameParameter, iFSCParameter, mICRParameter, netBankingParameter, debitCardParameter, amountRupeesParameter, qRCodeImagepathParameter, refrence1Parameter, refrence2Parameter, addr1Parameter, phNumberParameter, emailIdParameter, fromParameter, toParameter, mandateIdParameter, descriptionParameter, statusParameter, nachParameter, rupeesParameter, customer1Parameter, customer2Parameter, customer3Parameter, dateOnMandateParameter, tIPPathParameter, pNGPathParameter, utilityCodeParameter, sponsorCodeParameter, strFromDateParameter, strToDateParameter, strTableParameter, paymentDataXParameter, xmlMandateParameter, filePathParameter, bankMICRParameter, typeDataParameter, fromDateParameter, toDateParameter, rejectedReasonParameter, fullbankBranchParameter, bankValidationAdminCountParameter, bankValidationUserCountParameter, acValidationAdminCountParameter, acValidationUserCountParameter, mandateModeParameter, amountWordsParameter, sponsorBankCodeParameter, iSPhysicalParameter, isEnachParameter, topValParameter, jpgPathParameter, activityTypeParameter, categoryCodeParameter, custIFSCParameter, bankIFSCParameter, bulkOrNotParameter, mandateIdReverseParameter, uMRNParameter, snoParameter);
        }
    
        public virtual ObjectResult<Sp_BindMenu_Result> Sp_BindMenu(string queryType, Nullable<int> pID, string pSId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("PID", pID) :
                new ObjectParameter("PID", typeof(int));
    
            var pSIdParameter = pSId != null ?
                new ObjectParameter("PSId", pSId) :
                new ObjectParameter("PSId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_BindMenu_Result>("Sp_BindMenu", queryTypeParameter, pIDParameter, pSIdParameter);
        }
    
        public virtual ObjectResult<Sp_Bindrequest_Result> Sp_Bindrequest(string queryType, string requestdata, string corporatedata, string businessCodedata, string corporateOtherdetails, Nullable<long> userID, Nullable<long> entityId, string userType, Nullable<long> getREQID, string appId, string tokenID, string requestType, string requestNo, string corporatename, string searchText, string strFromDate, string strToDate, string rejectReason, Nullable<int> pageCount, Nullable<bool> isReject)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var requestdataParameter = requestdata != null ?
                new ObjectParameter("Requestdata", requestdata) :
                new ObjectParameter("Requestdata", typeof(string));
    
            var corporatedataParameter = corporatedata != null ?
                new ObjectParameter("Corporatedata", corporatedata) :
                new ObjectParameter("Corporatedata", typeof(string));
    
            var businessCodedataParameter = businessCodedata != null ?
                new ObjectParameter("BusinessCodedata", businessCodedata) :
                new ObjectParameter("BusinessCodedata", typeof(string));
    
            var corporateOtherdetailsParameter = corporateOtherdetails != null ?
                new ObjectParameter("CorporateOtherdetails", corporateOtherdetails) :
                new ObjectParameter("CorporateOtherdetails", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var getREQIDParameter = getREQID.HasValue ?
                new ObjectParameter("GetREQID", getREQID) :
                new ObjectParameter("GetREQID", typeof(long));
    
            var appIdParameter = appId != null ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(string));
    
            var tokenIDParameter = tokenID != null ?
                new ObjectParameter("TokenID", tokenID) :
                new ObjectParameter("TokenID", typeof(string));
    
            var requestTypeParameter = requestType != null ?
                new ObjectParameter("RequestType", requestType) :
                new ObjectParameter("RequestType", typeof(string));
    
            var requestNoParameter = requestNo != null ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(string));
    
            var corporatenameParameter = corporatename != null ?
                new ObjectParameter("Corporatename", corporatename) :
                new ObjectParameter("Corporatename", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var rejectReasonParameter = rejectReason != null ?
                new ObjectParameter("RejectReason", rejectReason) :
                new ObjectParameter("RejectReason", typeof(string));
    
            var pageCountParameter = pageCount.HasValue ?
                new ObjectParameter("PageCount", pageCount) :
                new ObjectParameter("PageCount", typeof(int));
    
            var isRejectParameter = isReject.HasValue ?
                new ObjectParameter("IsReject", isReject) :
                new ObjectParameter("IsReject", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Bindrequest_Result>("Sp_Bindrequest", queryTypeParameter, requestdataParameter, corporatedataParameter, businessCodedataParameter, corporateOtherdetailsParameter, userIDParameter, entityIdParameter, userTypeParameter, getREQIDParameter, appIdParameter, tokenIDParameter, requestTypeParameter, requestNoParameter, corporatenameParameter, searchTextParameter, strFromDateParameter, strToDateParameter, rejectReasonParameter, pageCountParameter, isRejectParameter);
        }
    
        public virtual ObjectResult<Sp_BranchCreation_Result> Sp_BranchCreation(string queryType, Nullable<long> branchId, string branchCode, string branchName, string address, string contactPerson, Nullable<long> mobileNo, string emailId, string password, string passwordKey, Nullable<long> userId, string name, string xmlDeleteBranches, Nullable<bool> status, Nullable<long> branchUserId, string xmlDeleteBranchUser)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("BranchCode", branchCode) :
                new ObjectParameter("BranchCode", typeof(string));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var mobileNoParameter = mobileNo.HasValue ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(long));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordKeyParameter = passwordKey != null ?
                new ObjectParameter("PasswordKey", passwordKey) :
                new ObjectParameter("PasswordKey", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var xmlDeleteBranchesParameter = xmlDeleteBranches != null ?
                new ObjectParameter("xmlDeleteBranches", xmlDeleteBranches) :
                new ObjectParameter("xmlDeleteBranches", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var branchUserIdParameter = branchUserId.HasValue ?
                new ObjectParameter("BranchUserId", branchUserId) :
                new ObjectParameter("BranchUserId", typeof(long));
    
            var xmlDeleteBranchUserParameter = xmlDeleteBranchUser != null ?
                new ObjectParameter("xmlDeleteBranchUser", xmlDeleteBranchUser) :
                new ObjectParameter("xmlDeleteBranchUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_BranchCreation_Result>("Sp_BranchCreation", queryTypeParameter, branchIdParameter, branchCodeParameter, branchNameParameter, addressParameter, contactPersonParameter, mobileNoParameter, emailIdParameter, passwordParameter, passwordKeyParameter, userIdParameter, nameParameter, xmlDeleteBranchesParameter, statusParameter, branchUserIdParameter, xmlDeleteBranchUserParameter);
        }
    
        public virtual ObjectResult<Sp_BranchMaster_Result> Sp_BranchMaster(string queryType, Nullable<long> branchId, string branchCode, string branchName, Nullable<long> regionId, Nullable<long> appId, Nullable<long> entityId, Nullable<long> createdBy, string searchText, Nullable<long> userId, Nullable<int> pageCount, string strFromDate, string tokenId, string strToDate)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("BranchCode", branchCode) :
                new ObjectParameter("BranchCode", typeof(string));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("RegionId", regionId) :
                new ObjectParameter("RegionId", typeof(long));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var pageCountParameter = pageCount.HasValue ?
                new ObjectParameter("PageCount", pageCount) :
                new ObjectParameter("PageCount", typeof(int));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var tokenIdParameter = tokenId != null ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_BranchMaster_Result>("Sp_BranchMaster", queryTypeParameter, branchIdParameter, branchCodeParameter, branchNameParameter, regionIdParameter, appIdParameter, entityIdParameter, createdByParameter, searchTextParameter, userIdParameter, pageCountParameter, strFromDateParameter, tokenIdParameter, strToDateParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> Sp_BulkESign(string queryType, Nullable<long> userId, Nullable<long> entityId, string strTable, Nullable<long> mandateid)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var mandateidParameter = mandateid.HasValue ?
                new ObjectParameter("mandateid", mandateid) :
                new ObjectParameter("mandateid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("Sp_BulkESign", queryTypeParameter, userIdParameter, entityIdParameter, strTableParameter, mandateidParameter);
        }
    
        public virtual ObjectResult<Sp_Bulkmandate_Result> Sp_Bulkmandate(string queryType, string xmlMandate, Nullable<long> entityId, string filePath, Nullable<long> activityId, Nullable<long> userId, string xMLMandateId, string xMLNameUpdate, string tEUHID, Nullable<int> topVal, string mandID, string activityType, string appId, string tokenID, string strFromDate, string strToDate)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var xMLMandateIdParameter = xMLMandateId != null ?
                new ObjectParameter("XMLMandateId", xMLMandateId) :
                new ObjectParameter("XMLMandateId", typeof(string));
    
            var xMLNameUpdateParameter = xMLNameUpdate != null ?
                new ObjectParameter("XMLNameUpdate", xMLNameUpdate) :
                new ObjectParameter("XMLNameUpdate", typeof(string));
    
            var tEUHIDParameter = tEUHID != null ?
                new ObjectParameter("TEUHID", tEUHID) :
                new ObjectParameter("TEUHID", typeof(string));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var mandIDParameter = mandID != null ?
                new ObjectParameter("MandID", mandID) :
                new ObjectParameter("MandID", typeof(string));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var appIdParameter = appId != null ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(string));
    
            var tokenIDParameter = tokenID != null ?
                new ObjectParameter("TokenID", tokenID) :
                new ObjectParameter("TokenID", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Bulkmandate_Result>("Sp_Bulkmandate", queryTypeParameter, xmlMandateParameter, entityIdParameter, filePathParameter, activityIdParameter, userIdParameter, xMLMandateIdParameter, xMLNameUpdateParameter, tEUHIDParameter, topValParameter, mandIDParameter, activityTypeParameter, appIdParameter, tokenIDParameter, strFromDateParameter, strToDateParameter);
        }
    
        public virtual ObjectResult<Sp_Bulkmandate_Aadhar_Result> Sp_Bulkmandate_Aadhar(string queryType, string xmlMandate, Nullable<long> entityId, string filePath, Nullable<long> activityId, Nullable<long> userId, string xMLMandateId, string xMLNameUpdate, string tEUHID, string strFromDate, string strToDate, Nullable<int> topVal, string mandID, string activityType, Nullable<long> appId, string tokenID)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var xMLMandateIdParameter = xMLMandateId != null ?
                new ObjectParameter("XMLMandateId", xMLMandateId) :
                new ObjectParameter("XMLMandateId", typeof(string));
    
            var xMLNameUpdateParameter = xMLNameUpdate != null ?
                new ObjectParameter("XMLNameUpdate", xMLNameUpdate) :
                new ObjectParameter("XMLNameUpdate", typeof(string));
    
            var tEUHIDParameter = tEUHID != null ?
                new ObjectParameter("TEUHID", tEUHID) :
                new ObjectParameter("TEUHID", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var mandIDParameter = mandID != null ?
                new ObjectParameter("MandID", mandID) :
                new ObjectParameter("MandID", typeof(string));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var tokenIDParameter = tokenID != null ?
                new ObjectParameter("TokenID", tokenID) :
                new ObjectParameter("TokenID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Bulkmandate_Aadhar_Result>("Sp_Bulkmandate_Aadhar", queryTypeParameter, xmlMandateParameter, entityIdParameter, filePathParameter, activityIdParameter, userIdParameter, xMLMandateIdParameter, xMLNameUpdateParameter, tEUHIDParameter, strFromDateParameter, strToDateParameter, topValParameter, mandIDParameter, activityTypeParameter, appIdParameter, tokenIDParameter);
        }
    
        public virtual ObjectResult<Sp_Bulkmandate_DirectDebit_Result> Sp_Bulkmandate_DirectDebit(string queryType, string xmlMandate, Nullable<long> entityId, string filePath, Nullable<long> activityId, Nullable<long> userId, string xMLMandateId, string xMLNameUpdate, string tEUHID, string strFromDate, string strToDate, Nullable<int> topVal, string mandID, string activityType, Nullable<long> appId, string tokenID)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var xMLMandateIdParameter = xMLMandateId != null ?
                new ObjectParameter("XMLMandateId", xMLMandateId) :
                new ObjectParameter("XMLMandateId", typeof(string));
    
            var xMLNameUpdateParameter = xMLNameUpdate != null ?
                new ObjectParameter("XMLNameUpdate", xMLNameUpdate) :
                new ObjectParameter("XMLNameUpdate", typeof(string));
    
            var tEUHIDParameter = tEUHID != null ?
                new ObjectParameter("TEUHID", tEUHID) :
                new ObjectParameter("TEUHID", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var mandIDParameter = mandID != null ?
                new ObjectParameter("MandID", mandID) :
                new ObjectParameter("MandID", typeof(string));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var tokenIDParameter = tokenID != null ?
                new ObjectParameter("TokenID", tokenID) :
                new ObjectParameter("TokenID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Bulkmandate_DirectDebit_Result>("Sp_Bulkmandate_DirectDebit", queryTypeParameter, xmlMandateParameter, entityIdParameter, filePathParameter, activityIdParameter, userIdParameter, xMLMandateIdParameter, xMLNameUpdateParameter, tEUHIDParameter, strFromDateParameter, strToDateParameter, topValParameter, mandIDParameter, activityTypeParameter, appIdParameter, tokenIDParameter);
        }
    
        public virtual ObjectResult<Sp_Bulkmandate_Physical_Result> Sp_Bulkmandate_Physical(string queryType, string xmlMandate, Nullable<long> entityId, string filePath, Nullable<long> activityId, Nullable<long> userId, string xMLMandateId, string xMLNameUpdate, string tEUHID, Nullable<int> topVal, string mandID, string activityType, Nullable<long> appId, string tokenID)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var xMLMandateIdParameter = xMLMandateId != null ?
                new ObjectParameter("XMLMandateId", xMLMandateId) :
                new ObjectParameter("XMLMandateId", typeof(string));
    
            var xMLNameUpdateParameter = xMLNameUpdate != null ?
                new ObjectParameter("XMLNameUpdate", xMLNameUpdate) :
                new ObjectParameter("XMLNameUpdate", typeof(string));
    
            var tEUHIDParameter = tEUHID != null ?
                new ObjectParameter("TEUHID", tEUHID) :
                new ObjectParameter("TEUHID", typeof(string));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var mandIDParameter = mandID != null ?
                new ObjectParameter("MandID", mandID) :
                new ObjectParameter("MandID", typeof(string));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var tokenIDParameter = tokenID != null ?
                new ObjectParameter("TokenID", tokenID) :
                new ObjectParameter("TokenID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Bulkmandate_Physical_Result>("Sp_Bulkmandate_Physical", queryTypeParameter, xmlMandateParameter, entityIdParameter, filePathParameter, activityIdParameter, userIdParameter, xMLMandateIdParameter, xMLNameUpdateParameter, tEUHIDParameter, topValParameter, mandIDParameter, activityTypeParameter, appIdParameter, tokenIDParameter);
        }
    
        public virtual ObjectResult<Sp_CityMaster_Result> Sp_CityMaster(string queryType, Nullable<long> entityId, Nullable<long> userId, string cityName, string cityCode, Nullable<long> countryId, Nullable<long> stateId, string tokenId, Nullable<long> cityId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            var cityCodeParameter = cityCode != null ?
                new ObjectParameter("CityCode", cityCode) :
                new ObjectParameter("CityCode", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(long));
    
            var tokenIdParameter = tokenId != null ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CityMaster_Result>("Sp_CityMaster", queryTypeParameter, entityIdParameter, userIdParameter, cityNameParameter, cityCodeParameter, countryIdParameter, stateIdParameter, tokenIdParameter, cityIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_ClientDataUpload(string queryType, string xmlBankData, Nullable<long> maxId, string xmlClientData, Nullable<long> branchId, string status, Nullable<long> clientid, Nullable<long> uniqueNo, Nullable<long> isMerged, string xmlClientData1)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var xmlBankDataParameter = xmlBankData != null ?
                new ObjectParameter("XmlBankData", xmlBankData) :
                new ObjectParameter("XmlBankData", typeof(string));
    
            var maxIdParameter = maxId.HasValue ?
                new ObjectParameter("MaxId", maxId) :
                new ObjectParameter("MaxId", typeof(long));
    
            var xmlClientDataParameter = xmlClientData != null ?
                new ObjectParameter("XmlClientData", xmlClientData) :
                new ObjectParameter("XmlClientData", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var clientidParameter = clientid.HasValue ?
                new ObjectParameter("clientid", clientid) :
                new ObjectParameter("clientid", typeof(long));
    
            var uniqueNoParameter = uniqueNo.HasValue ?
                new ObjectParameter("uniqueNo", uniqueNo) :
                new ObjectParameter("uniqueNo", typeof(long));
    
            var isMergedParameter = isMerged.HasValue ?
                new ObjectParameter("isMerged", isMerged) :
                new ObjectParameter("isMerged", typeof(long));
    
            var xmlClientData1Parameter = xmlClientData1 != null ?
                new ObjectParameter("XmlClientData1", xmlClientData1) :
                new ObjectParameter("XmlClientData1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_ClientDataUpload", queryTypeParameter, xmlBankDataParameter, maxIdParameter, xmlClientDataParameter, branchIdParameter, statusParameter, clientidParameter, uniqueNoParameter, isMergedParameter, xmlClientData1Parameter);
        }
    
        public virtual ObjectResult<Sp_CollectionStatus_Result> Sp_CollectionStatus(Nullable<int> entityId)
        {
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CollectionStatus_Result>("Sp_CollectionStatus", entityIdParameter);
        }
    
        public virtual ObjectResult<Sp_CorporateOnBoarding_Result> Sp_CorporateOnBoarding(string queryType, Nullable<int> countryID, Nullable<int> stateID, Nullable<int> bankID, Nullable<int> subMemberBank, Nullable<long> appId, Nullable<long> entityId, Nullable<long> userId, string xmlCorporateEntity, string xmlPhysicalMandateData, string xmlEMandateData, string xmlAadharMandateData, string xmlDirectDebitMandateData, string xmlDebitPresentationData, string xmlUPICollectionData, string xmlBBPSData, string xmlAPBSData, string xmlCorporateFinancial, string xmlBilling_OtherDetailsData, string xmlContactPersonArray, Nullable<long> tCEDID2)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var subMemberBankParameter = subMemberBank.HasValue ?
                new ObjectParameter("SubMemberBank", subMemberBank) :
                new ObjectParameter("SubMemberBank", typeof(int));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var xmlCorporateEntityParameter = xmlCorporateEntity != null ?
                new ObjectParameter("XmlCorporateEntity", xmlCorporateEntity) :
                new ObjectParameter("XmlCorporateEntity", typeof(string));
    
            var xmlPhysicalMandateDataParameter = xmlPhysicalMandateData != null ?
                new ObjectParameter("XmlPhysicalMandateData", xmlPhysicalMandateData) :
                new ObjectParameter("XmlPhysicalMandateData", typeof(string));
    
            var xmlEMandateDataParameter = xmlEMandateData != null ?
                new ObjectParameter("XmlEMandateData", xmlEMandateData) :
                new ObjectParameter("XmlEMandateData", typeof(string));
    
            var xmlAadharMandateDataParameter = xmlAadharMandateData != null ?
                new ObjectParameter("XmlAadharMandateData", xmlAadharMandateData) :
                new ObjectParameter("XmlAadharMandateData", typeof(string));
    
            var xmlDirectDebitMandateDataParameter = xmlDirectDebitMandateData != null ?
                new ObjectParameter("XmlDirectDebitMandateData", xmlDirectDebitMandateData) :
                new ObjectParameter("XmlDirectDebitMandateData", typeof(string));
    
            var xmlDebitPresentationDataParameter = xmlDebitPresentationData != null ?
                new ObjectParameter("XmlDebitPresentationData", xmlDebitPresentationData) :
                new ObjectParameter("XmlDebitPresentationData", typeof(string));
    
            var xmlUPICollectionDataParameter = xmlUPICollectionData != null ?
                new ObjectParameter("XmlUPICollectionData", xmlUPICollectionData) :
                new ObjectParameter("XmlUPICollectionData", typeof(string));
    
            var xmlBBPSDataParameter = xmlBBPSData != null ?
                new ObjectParameter("XmlBBPSData", xmlBBPSData) :
                new ObjectParameter("XmlBBPSData", typeof(string));
    
            var xmlAPBSDataParameter = xmlAPBSData != null ?
                new ObjectParameter("XmlAPBSData", xmlAPBSData) :
                new ObjectParameter("XmlAPBSData", typeof(string));
    
            var xmlCorporateFinancialParameter = xmlCorporateFinancial != null ?
                new ObjectParameter("XmlCorporateFinancial", xmlCorporateFinancial) :
                new ObjectParameter("XmlCorporateFinancial", typeof(string));
    
            var xmlBilling_OtherDetailsDataParameter = xmlBilling_OtherDetailsData != null ?
                new ObjectParameter("XmlBilling_OtherDetailsData", xmlBilling_OtherDetailsData) :
                new ObjectParameter("XmlBilling_OtherDetailsData", typeof(string));
    
            var xmlContactPersonArrayParameter = xmlContactPersonArray != null ?
                new ObjectParameter("XmlContactPersonArray", xmlContactPersonArray) :
                new ObjectParameter("XmlContactPersonArray", typeof(string));
    
            var tCEDID2Parameter = tCEDID2.HasValue ?
                new ObjectParameter("TCEDID2", tCEDID2) :
                new ObjectParameter("TCEDID2", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CorporateOnBoarding_Result>("Sp_CorporateOnBoarding", queryTypeParameter, countryIDParameter, stateIDParameter, bankIDParameter, subMemberBankParameter, appIdParameter, entityIdParameter, userIdParameter, xmlCorporateEntityParameter, xmlPhysicalMandateDataParameter, xmlEMandateDataParameter, xmlAadharMandateDataParameter, xmlDirectDebitMandateDataParameter, xmlDebitPresentationDataParameter, xmlUPICollectionDataParameter, xmlBBPSDataParameter, xmlAPBSDataParameter, xmlCorporateFinancialParameter, xmlBilling_OtherDetailsDataParameter, xmlContactPersonArrayParameter, tCEDID2Parameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_CountryMaster(string queryType, Nullable<long> entityId, Nullable<long> userId, string countryName, string countryCode, Nullable<long> countryId, string tokenId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            var tokenIdParameter = tokenId != null ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_CountryMaster", queryTypeParameter, entityIdParameter, userIdParameter, countryNameParameter, countryCodeParameter, countryIdParameter, tokenIdParameter);
        }
    
        public virtual int Sp_CreateLAndTFile(string queryType, string bankName, string fileNo, Nullable<int> entityID, Nullable<int> userID, string appId, Nullable<long> transheaderId, Nullable<long> bank_ID, string xmlXlData, string xmlXlDetailData, Nullable<long> resheaderId, string presentmentDate)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var fileNoParameter = fileNo != null ?
                new ObjectParameter("FileNo", fileNo) :
                new ObjectParameter("FileNo", typeof(string));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var appIdParameter = appId != null ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(string));
    
            var transheaderIdParameter = transheaderId.HasValue ?
                new ObjectParameter("TransheaderId", transheaderId) :
                new ObjectParameter("TransheaderId", typeof(long));
    
            var bank_IDParameter = bank_ID.HasValue ?
                new ObjectParameter("Bank_ID", bank_ID) :
                new ObjectParameter("Bank_ID", typeof(long));
    
            var xmlXlDataParameter = xmlXlData != null ?
                new ObjectParameter("XmlXlData", xmlXlData) :
                new ObjectParameter("XmlXlData", typeof(string));
    
            var xmlXlDetailDataParameter = xmlXlDetailData != null ?
                new ObjectParameter("XmlXlDetailData", xmlXlDetailData) :
                new ObjectParameter("XmlXlDetailData", typeof(string));
    
            var resheaderIdParameter = resheaderId.HasValue ?
                new ObjectParameter("ResheaderId", resheaderId) :
                new ObjectParameter("ResheaderId", typeof(long));
    
            var presentmentDateParameter = presentmentDate != null ?
                new ObjectParameter("PresentmentDate", presentmentDate) :
                new ObjectParameter("PresentmentDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_CreateLAndTFile", queryTypeParameter, bankNameParameter, fileNoParameter, entityIDParameter, userIDParameter, appIdParameter, transheaderIdParameter, bank_IDParameter, xmlXlDataParameter, xmlXlDetailDataParameter, resheaderIdParameter, presentmentDateParameter);
        }
    
        public virtual int Sp_CreatePresenmentFile(string queryType, string bankName, string fileNo, Nullable<int> entityID, Nullable<int> userID, string appId, Nullable<long> transheaderId, Nullable<long> bank_ID, string xmlXlData, string xmlXlDetailData, Nullable<long> resheaderId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var fileNoParameter = fileNo != null ?
                new ObjectParameter("FileNo", fileNo) :
                new ObjectParameter("FileNo", typeof(string));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var appIdParameter = appId != null ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(string));
    
            var transheaderIdParameter = transheaderId.HasValue ?
                new ObjectParameter("TransheaderId", transheaderId) :
                new ObjectParameter("TransheaderId", typeof(long));
    
            var bank_IDParameter = bank_ID.HasValue ?
                new ObjectParameter("Bank_ID", bank_ID) :
                new ObjectParameter("Bank_ID", typeof(long));
    
            var xmlXlDataParameter = xmlXlData != null ?
                new ObjectParameter("XmlXlData", xmlXlData) :
                new ObjectParameter("XmlXlData", typeof(string));
    
            var xmlXlDetailDataParameter = xmlXlDetailData != null ?
                new ObjectParameter("XmlXlDetailData", xmlXlDetailData) :
                new ObjectParameter("XmlXlDetailData", typeof(string));
    
            var resheaderIdParameter = resheaderId.HasValue ?
                new ObjectParameter("ResheaderId", resheaderId) :
                new ObjectParameter("ResheaderId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_CreatePresenmentFile", queryTypeParameter, bankNameParameter, fileNoParameter, entityIDParameter, userIDParameter, appIdParameter, transheaderIdParameter, bank_IDParameter, xmlXlDataParameter, xmlXlDetailDataParameter, resheaderIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_CreateUser(string queryType, string contactNo, string emailId, string userName, string password, string passwordKey, Nullable<long> entityId, Nullable<long> userId, Nullable<long> appId, Nullable<long> productId, Nullable<long> primaryBranchId, string secondaryBranchId, string searchText, Nullable<long> user, Nullable<long> id, string xmlSponsorBankCode, string xmlCategoryCode, string xmlProductId, string xmlUtilityCode, string xmlClientCode, string xmlSecBranch, Nullable<long> branchId, Nullable<int> editPerMandate, Nullable<int> mandatesPerRefrence, Nullable<long> regionId, Nullable<bool> isActive, Nullable<int> pageCount, Nullable<long> roleID, string tokenId, Nullable<int> isphysical, Nullable<int> isEmandate, Nullable<int> isDebitpresentation, Nullable<int> isaccountvalidation, Nullable<int> isaddharvaification, Nullable<int> isDirectDebit, Nullable<int> isCancelled)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var passwordKeyParameter = passwordKey != null ?
                new ObjectParameter("passwordKey", passwordKey) :
                new ObjectParameter("passwordKey", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(long));
    
            var primaryBranchIdParameter = primaryBranchId.HasValue ?
                new ObjectParameter("PrimaryBranchId", primaryBranchId) :
                new ObjectParameter("PrimaryBranchId", typeof(long));
    
            var secondaryBranchIdParameter = secondaryBranchId != null ?
                new ObjectParameter("SecondaryBranchId", secondaryBranchId) :
                new ObjectParameter("SecondaryBranchId", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(long));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var xmlSponsorBankCodeParameter = xmlSponsorBankCode != null ?
                new ObjectParameter("XmlSponsorBankCode", xmlSponsorBankCode) :
                new ObjectParameter("XmlSponsorBankCode", typeof(string));
    
            var xmlCategoryCodeParameter = xmlCategoryCode != null ?
                new ObjectParameter("XmlCategoryCode", xmlCategoryCode) :
                new ObjectParameter("XmlCategoryCode", typeof(string));
    
            var xmlProductIdParameter = xmlProductId != null ?
                new ObjectParameter("XmlProductId", xmlProductId) :
                new ObjectParameter("XmlProductId", typeof(string));
    
            var xmlUtilityCodeParameter = xmlUtilityCode != null ?
                new ObjectParameter("XmlUtilityCode", xmlUtilityCode) :
                new ObjectParameter("XmlUtilityCode", typeof(string));
    
            var xmlClientCodeParameter = xmlClientCode != null ?
                new ObjectParameter("XmlClientCode", xmlClientCode) :
                new ObjectParameter("XmlClientCode", typeof(string));
    
            var xmlSecBranchParameter = xmlSecBranch != null ?
                new ObjectParameter("XmlSecBranch", xmlSecBranch) :
                new ObjectParameter("XmlSecBranch", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            var editPerMandateParameter = editPerMandate.HasValue ?
                new ObjectParameter("EditPerMandate", editPerMandate) :
                new ObjectParameter("EditPerMandate", typeof(int));
    
            var mandatesPerRefrenceParameter = mandatesPerRefrence.HasValue ?
                new ObjectParameter("MandatesPerRefrence", mandatesPerRefrence) :
                new ObjectParameter("MandatesPerRefrence", typeof(int));
    
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("RegionId", regionId) :
                new ObjectParameter("RegionId", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageCountParameter = pageCount.HasValue ?
                new ObjectParameter("PageCount", pageCount) :
                new ObjectParameter("PageCount", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(long));
    
            var tokenIdParameter = tokenId != null ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(string));
    
            var isphysicalParameter = isphysical.HasValue ?
                new ObjectParameter("Isphysical", isphysical) :
                new ObjectParameter("Isphysical", typeof(int));
    
            var isEmandateParameter = isEmandate.HasValue ?
                new ObjectParameter("IsEmandate", isEmandate) :
                new ObjectParameter("IsEmandate", typeof(int));
    
            var isDebitpresentationParameter = isDebitpresentation.HasValue ?
                new ObjectParameter("IsDebitpresentation", isDebitpresentation) :
                new ObjectParameter("IsDebitpresentation", typeof(int));
    
            var isaccountvalidationParameter = isaccountvalidation.HasValue ?
                new ObjectParameter("Isaccountvalidation", isaccountvalidation) :
                new ObjectParameter("Isaccountvalidation", typeof(int));
    
            var isaddharvaificationParameter = isaddharvaification.HasValue ?
                new ObjectParameter("Isaddharvaification", isaddharvaification) :
                new ObjectParameter("Isaddharvaification", typeof(int));
    
            var isDirectDebitParameter = isDirectDebit.HasValue ?
                new ObjectParameter("IsDirectDebit", isDirectDebit) :
                new ObjectParameter("IsDirectDebit", typeof(int));
    
            var isCancelledParameter = isCancelled.HasValue ?
                new ObjectParameter("IsCancelled", isCancelled) :
                new ObjectParameter("IsCancelled", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_CreateUser", queryTypeParameter, contactNoParameter, emailIdParameter, userNameParameter, passwordParameter, passwordKeyParameter, entityIdParameter, userIdParameter, appIdParameter, productIdParameter, primaryBranchIdParameter, secondaryBranchIdParameter, searchTextParameter, userParameter, idParameter, xmlSponsorBankCodeParameter, xmlCategoryCodeParameter, xmlProductIdParameter, xmlUtilityCodeParameter, xmlClientCodeParameter, xmlSecBranchParameter, branchIdParameter, editPerMandateParameter, mandatesPerRefrenceParameter, regionIdParameter, isActiveParameter, pageCountParameter, roleIDParameter, tokenIdParameter, isphysicalParameter, isEmandateParameter, isDebitpresentationParameter, isaccountvalidationParameter, isaddharvaificationParameter, isDirectDebitParameter, isCancelledParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_CustomerCardDetail(string queryType, Nullable<long> clientid, string name, string fatherName, string address, string state, Nullable<long> pincode, Nullable<System.DateTime> dob, string cardtype, string cardno, string photo, string pan, string adhar, string passport, string pancardImage, string adharcardImage, string passportImage, Nullable<long> customerId, string gender)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var clientidParameter = clientid.HasValue ?
                new ObjectParameter("clientid", clientid) :
                new ObjectParameter("clientid", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var pincodeParameter = pincode.HasValue ?
                new ObjectParameter("pincode", pincode) :
                new ObjectParameter("pincode", typeof(long));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var cardtypeParameter = cardtype != null ?
                new ObjectParameter("cardtype", cardtype) :
                new ObjectParameter("cardtype", typeof(string));
    
            var cardnoParameter = cardno != null ?
                new ObjectParameter("cardno", cardno) :
                new ObjectParameter("cardno", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("photo", photo) :
                new ObjectParameter("photo", typeof(string));
    
            var panParameter = pan != null ?
                new ObjectParameter("pan", pan) :
                new ObjectParameter("pan", typeof(string));
    
            var adharParameter = adhar != null ?
                new ObjectParameter("Adhar", adhar) :
                new ObjectParameter("Adhar", typeof(string));
    
            var passportParameter = passport != null ?
                new ObjectParameter("passport", passport) :
                new ObjectParameter("passport", typeof(string));
    
            var pancardImageParameter = pancardImage != null ?
                new ObjectParameter("PancardImage", pancardImage) :
                new ObjectParameter("PancardImage", typeof(string));
    
            var adharcardImageParameter = adharcardImage != null ?
                new ObjectParameter("AdharcardImage", adharcardImage) :
                new ObjectParameter("AdharcardImage", typeof(string));
    
            var passportImageParameter = passportImage != null ?
                new ObjectParameter("PassportImage", passportImage) :
                new ObjectParameter("PassportImage", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_CustomerCardDetail", queryTypeParameter, clientidParameter, nameParameter, fatherNameParameter, addressParameter, stateParameter, pincodeParameter, dobParameter, cardtypeParameter, cardnoParameter, photoParameter, panParameter, adharParameter, passportParameter, pancardImageParameter, adharcardImageParameter, passportImageParameter, customerIdParameter, genderParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_CustomerDetail(string queryType, Nullable<long> customerId, string name, string fatherName, string address, string state, Nullable<long> pincode, Nullable<System.DateTime> dob, string cardtype, string cardno, string photo, string pan, string adhar, string passport, string pancardImage, string adharcardImage, string passportImage)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var pincodeParameter = pincode.HasValue ?
                new ObjectParameter("pincode", pincode) :
                new ObjectParameter("pincode", typeof(long));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var cardtypeParameter = cardtype != null ?
                new ObjectParameter("cardtype", cardtype) :
                new ObjectParameter("cardtype", typeof(string));
    
            var cardnoParameter = cardno != null ?
                new ObjectParameter("cardno", cardno) :
                new ObjectParameter("cardno", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("photo", photo) :
                new ObjectParameter("photo", typeof(string));
    
            var panParameter = pan != null ?
                new ObjectParameter("pan", pan) :
                new ObjectParameter("pan", typeof(string));
    
            var adharParameter = adhar != null ?
                new ObjectParameter("Adhar", adhar) :
                new ObjectParameter("Adhar", typeof(string));
    
            var passportParameter = passport != null ?
                new ObjectParameter("passport", passport) :
                new ObjectParameter("passport", typeof(string));
    
            var pancardImageParameter = pancardImage != null ?
                new ObjectParameter("PancardImage", pancardImage) :
                new ObjectParameter("PancardImage", typeof(string));
    
            var adharcardImageParameter = adharcardImage != null ?
                new ObjectParameter("AdharcardImage", adharcardImage) :
                new ObjectParameter("AdharcardImage", typeof(string));
    
            var passportImageParameter = passportImage != null ?
                new ObjectParameter("PassportImage", passportImage) :
                new ObjectParameter("PassportImage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_CustomerDetail", queryTypeParameter, customerIdParameter, nameParameter, fatherNameParameter, addressParameter, stateParameter, pincodeParameter, dobParameter, cardtypeParameter, cardnoParameter, photoParameter, panParameter, adharParameter, passportParameter, pancardImageParameter, adharcardImageParameter, passportImageParameter);
        }
    
        public virtual int Sp_Dashboard(string queryType, Nullable<long> userId, Nullable<long> legalId, Nullable<long> proDimensionId, Nullable<long> projectId, string code, string name, Nullable<long> proGroupId, string userType, Nullable<long> refId, Nullable<long> branchId, Nullable<System.DateTime> weekDate, string strFromDate, string strToDate, Nullable<long> entityId, Nullable<System.DateTime> date, Nullable<int> month, string bankID, string accountValDB_DashBoard, Nullable<int> year, Nullable<bool> isAmount)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var legalIdParameter = legalId.HasValue ?
                new ObjectParameter("LegalId", legalId) :
                new ObjectParameter("LegalId", typeof(long));
    
            var proDimensionIdParameter = proDimensionId.HasValue ?
                new ObjectParameter("ProDimensionId", proDimensionId) :
                new ObjectParameter("ProDimensionId", typeof(long));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(long));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var proGroupIdParameter = proGroupId.HasValue ?
                new ObjectParameter("ProGroupId", proGroupId) :
                new ObjectParameter("ProGroupId", typeof(long));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var refIdParameter = refId.HasValue ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(long));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            var weekDateParameter = weekDate.HasValue ?
                new ObjectParameter("WeekDate", weekDate) :
                new ObjectParameter("WeekDate", typeof(System.DateTime));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var bankIDParameter = bankID != null ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(string));
    
            var accountValDB_DashBoardParameter = accountValDB_DashBoard != null ?
                new ObjectParameter("AccountValDB_DashBoard", accountValDB_DashBoard) :
                new ObjectParameter("AccountValDB_DashBoard", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var isAmountParameter = isAmount.HasValue ?
                new ObjectParameter("IsAmount", isAmount) :
                new ObjectParameter("IsAmount", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Dashboard", queryTypeParameter, userIdParameter, legalIdParameter, proDimensionIdParameter, projectIdParameter, codeParameter, nameParameter, proGroupIdParameter, userTypeParameter, refIdParameter, branchIdParameter, weekDateParameter, strFromDateParameter, strToDateParameter, entityIdParameter, dateParameter, monthParameter, bankIDParameter, accountValDB_DashBoardParameter, yearParameter, isAmountParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_Detail(Nullable<long> clientid, Nullable<long> bankid, string queryType, Nullable<long> userId, string accountNo, string benificiaryName, string sponserBankCode, string utilityCode, string createdStatus, string companyName, string debitTo, Nullable<decimal> amount, string frequency, string debitType, string reference1, string reference2, string phoneNo, string emailId, Nullable<System.DateTime> periodFrom, Nullable<System.DateTime> periodTo, string isMerged, string refId, string iFSCcode, string mICRcode, string transactionStatus, string bankName, Nullable<long> branchId, string refEmailId, Nullable<long> mergeDataId, string uniqueNo, string status, string emailtype, string xmlToEmail, string xmlCcEmail, string xmlBCcEmail, Nullable<long> mergeid, Nullable<long> clientDataId, Nullable<long> unit, Nullable<long> bankIMPSID)
        {
            var clientidParameter = clientid.HasValue ?
                new ObjectParameter("clientid", clientid) :
                new ObjectParameter("clientid", typeof(long));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(long));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("accountNo", accountNo) :
                new ObjectParameter("accountNo", typeof(string));
    
            var benificiaryNameParameter = benificiaryName != null ?
                new ObjectParameter("benificiaryName", benificiaryName) :
                new ObjectParameter("benificiaryName", typeof(string));
    
            var sponserBankCodeParameter = sponserBankCode != null ?
                new ObjectParameter("sponserBankCode", sponserBankCode) :
                new ObjectParameter("sponserBankCode", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("utilityCode", utilityCode) :
                new ObjectParameter("utilityCode", typeof(string));
    
            var createdStatusParameter = createdStatus != null ?
                new ObjectParameter("createdStatus", createdStatus) :
                new ObjectParameter("createdStatus", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("companyName", companyName) :
                new ObjectParameter("companyName", typeof(string));
    
            var debitToParameter = debitTo != null ?
                new ObjectParameter("debitTo", debitTo) :
                new ObjectParameter("debitTo", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            var debitTypeParameter = debitType != null ?
                new ObjectParameter("debitType", debitType) :
                new ObjectParameter("debitType", typeof(string));
    
            var reference1Parameter = reference1 != null ?
                new ObjectParameter("reference1", reference1) :
                new ObjectParameter("reference1", typeof(string));
    
            var reference2Parameter = reference2 != null ?
                new ObjectParameter("reference2", reference2) :
                new ObjectParameter("reference2", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("phoneNo", phoneNo) :
                new ObjectParameter("phoneNo", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var periodFromParameter = periodFrom.HasValue ?
                new ObjectParameter("periodFrom", periodFrom) :
                new ObjectParameter("periodFrom", typeof(System.DateTime));
    
            var periodToParameter = periodTo.HasValue ?
                new ObjectParameter("periodTo", periodTo) :
                new ObjectParameter("periodTo", typeof(System.DateTime));
    
            var isMergedParameter = isMerged != null ?
                new ObjectParameter("isMerged", isMerged) :
                new ObjectParameter("isMerged", typeof(string));
    
            var refIdParameter = refId != null ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(string));
    
            var iFSCcodeParameter = iFSCcode != null ?
                new ObjectParameter("IFSCcode", iFSCcode) :
                new ObjectParameter("IFSCcode", typeof(string));
    
            var mICRcodeParameter = mICRcode != null ?
                new ObjectParameter("MICRcode", mICRcode) :
                new ObjectParameter("MICRcode", typeof(string));
    
            var transactionStatusParameter = transactionStatus != null ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("bankName", bankName) :
                new ObjectParameter("bankName", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            var refEmailIdParameter = refEmailId != null ?
                new ObjectParameter("RefEmailId", refEmailId) :
                new ObjectParameter("RefEmailId", typeof(string));
    
            var mergeDataIdParameter = mergeDataId.HasValue ?
                new ObjectParameter("MergeDataId", mergeDataId) :
                new ObjectParameter("MergeDataId", typeof(long));
    
            var uniqueNoParameter = uniqueNo != null ?
                new ObjectParameter("uniqueNo", uniqueNo) :
                new ObjectParameter("uniqueNo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var emailtypeParameter = emailtype != null ?
                new ObjectParameter("emailtype", emailtype) :
                new ObjectParameter("emailtype", typeof(string));
    
            var xmlToEmailParameter = xmlToEmail != null ?
                new ObjectParameter("XmlToEmail", xmlToEmail) :
                new ObjectParameter("XmlToEmail", typeof(string));
    
            var xmlCcEmailParameter = xmlCcEmail != null ?
                new ObjectParameter("XmlCcEmail", xmlCcEmail) :
                new ObjectParameter("XmlCcEmail", typeof(string));
    
            var xmlBCcEmailParameter = xmlBCcEmail != null ?
                new ObjectParameter("XmlBCcEmail", xmlBCcEmail) :
                new ObjectParameter("XmlBCcEmail", typeof(string));
    
            var mergeidParameter = mergeid.HasValue ?
                new ObjectParameter("mergeid", mergeid) :
                new ObjectParameter("mergeid", typeof(long));
    
            var clientDataIdParameter = clientDataId.HasValue ?
                new ObjectParameter("ClientDataId", clientDataId) :
                new ObjectParameter("ClientDataId", typeof(long));
    
            var unitParameter = unit.HasValue ?
                new ObjectParameter("unit", unit) :
                new ObjectParameter("unit", typeof(long));
    
            var bankIMPSIDParameter = bankIMPSID.HasValue ?
                new ObjectParameter("BankIMPSID", bankIMPSID) :
                new ObjectParameter("BankIMPSID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_Detail", clientidParameter, bankidParameter, queryTypeParameter, userIdParameter, accountNoParameter, benificiaryNameParameter, sponserBankCodeParameter, utilityCodeParameter, createdStatusParameter, companyNameParameter, debitToParameter, amountParameter, frequencyParameter, debitTypeParameter, reference1Parameter, reference2Parameter, phoneNoParameter, emailIdParameter, periodFromParameter, periodToParameter, isMergedParameter, refIdParameter, iFSCcodeParameter, mICRcodeParameter, transactionStatusParameter, bankNameParameter, branchIdParameter, refEmailIdParameter, mergeDataIdParameter, uniqueNoParameter, statusParameter, emailtypeParameter, xmlToEmailParameter, xmlCcEmailParameter, xmlBCcEmailParameter, mergeidParameter, clientDataIdParameter, unitParameter, bankIMPSIDParameter);
        }
    
        public virtual int Sp_DivideTablesActivityWise(Nullable<long> mandateId, Nullable<int> statusID, Nullable<int> cancelledUId, string mType)
        {
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var cancelledUIdParameter = cancelledUId.HasValue ?
                new ObjectParameter("CancelledUId", cancelledUId) :
                new ObjectParameter("CancelledUId", typeof(int));
    
            var mTypeParameter = mType != null ?
                new ObjectParameter("MType", mType) :
                new ObjectParameter("MType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_DivideTablesActivityWise", mandateIdParameter, statusIDParameter, cancelledUIdParameter, mTypeParameter);
        }
    
        public virtual ObjectResult<Sp_DocumentMaster_Result> Sp_DocumentMaster(string queryType, Nullable<long> entityId, Nullable<long> userId, string documentName, string documentCode, Nullable<long> countryId, string tokenId, Nullable<bool> active, Nullable<long> docMasterId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var documentCodeParameter = documentCode != null ?
                new ObjectParameter("DocumentCode", documentCode) :
                new ObjectParameter("DocumentCode", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            var tokenIdParameter = tokenId != null ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var docMasterIdParameter = docMasterId.HasValue ?
                new ObjectParameter("DocMasterId", docMasterId) :
                new ObjectParameter("DocMasterId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_DocumentMaster_Result>("Sp_DocumentMaster", queryTypeParameter, entityIdParameter, userIdParameter, documentNameParameter, documentCodeParameter, countryIdParameter, tokenIdParameter, activeParameter, docMasterIdParameter);
        }
    
        public virtual ObjectResult<Sp_DownloadEMandate_Result> Sp_DownloadEMandate(string queryType, Nullable<long> entityId, Nullable<long> userId, string refrence1, string strFromDate, string strToDate, string xmlPath, Nullable<long> mandateId, string error, string enachMessageId, string messageid, string creationdatetime, string accptRefNo, string status, string errorDesc, string strTable, string bankName, string sponsorBankCode, string searchText)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var xmlPathParameter = xmlPath != null ?
                new ObjectParameter("XmlPath", xmlPath) :
                new ObjectParameter("XmlPath", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var errorParameter = error != null ?
                new ObjectParameter("Error", error) :
                new ObjectParameter("Error", typeof(string));
    
            var enachMessageIdParameter = enachMessageId != null ?
                new ObjectParameter("EnachMessageId", enachMessageId) :
                new ObjectParameter("EnachMessageId", typeof(string));
    
            var messageidParameter = messageid != null ?
                new ObjectParameter("messageid", messageid) :
                new ObjectParameter("messageid", typeof(string));
    
            var creationdatetimeParameter = creationdatetime != null ?
                new ObjectParameter("Creationdatetime", creationdatetime) :
                new ObjectParameter("Creationdatetime", typeof(string));
    
            var accptRefNoParameter = accptRefNo != null ?
                new ObjectParameter("AccptRefNo", accptRefNo) :
                new ObjectParameter("AccptRefNo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var errorDescParameter = errorDesc != null ?
                new ObjectParameter("ErrorDesc", errorDesc) :
                new ObjectParameter("ErrorDesc", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var sponsorBankCodeParameter = sponsorBankCode != null ?
                new ObjectParameter("SponsorBankCode", sponsorBankCode) :
                new ObjectParameter("SponsorBankCode", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_DownloadEMandate_Result>("Sp_DownloadEMandate", queryTypeParameter, entityIdParameter, userIdParameter, refrence1Parameter, strFromDateParameter, strToDateParameter, xmlPathParameter, mandateIdParameter, errorParameter, enachMessageIdParameter, messageidParameter, creationdatetimeParameter, accptRefNoParameter, statusParameter, errorDescParameter, strTableParameter, bankNameParameter, sponsorBankCodeParameter, searchTextParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> Sp_EMandate(string queryType, Nullable<long> entityId, Nullable<long> userId, string refrence1, string strFromDate, string strToDate, string xmlPath, Nullable<long> mandateId, string error, string enachMessageId, string messageid, string creationdatetime, string accptRefNo, string status, string errorDesc, string strTable, string bankName, string sponsorBankCode, string uMRN, Nullable<long> appId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var xmlPathParameter = xmlPath != null ?
                new ObjectParameter("XmlPath", xmlPath) :
                new ObjectParameter("XmlPath", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var errorParameter = error != null ?
                new ObjectParameter("Error", error) :
                new ObjectParameter("Error", typeof(string));
    
            var enachMessageIdParameter = enachMessageId != null ?
                new ObjectParameter("EnachMessageId", enachMessageId) :
                new ObjectParameter("EnachMessageId", typeof(string));
    
            var messageidParameter = messageid != null ?
                new ObjectParameter("messageid", messageid) :
                new ObjectParameter("messageid", typeof(string));
    
            var creationdatetimeParameter = creationdatetime != null ?
                new ObjectParameter("Creationdatetime", creationdatetime) :
                new ObjectParameter("Creationdatetime", typeof(string));
    
            var accptRefNoParameter = accptRefNo != null ?
                new ObjectParameter("AccptRefNo", accptRefNo) :
                new ObjectParameter("AccptRefNo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var errorDescParameter = errorDesc != null ?
                new ObjectParameter("ErrorDesc", errorDesc) :
                new ObjectParameter("ErrorDesc", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var sponsorBankCodeParameter = sponsorBankCode != null ?
                new ObjectParameter("SponsorBankCode", sponsorBankCode) :
                new ObjectParameter("SponsorBankCode", typeof(string));
    
            var uMRNParameter = uMRN != null ?
                new ObjectParameter("UMRN", uMRN) :
                new ObjectParameter("UMRN", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("Sp_EMandate", queryTypeParameter, entityIdParameter, userIdParameter, refrence1Parameter, strFromDateParameter, strToDateParameter, xmlPathParameter, mandateIdParameter, errorParameter, enachMessageIdParameter, messageidParameter, creationdatetimeParameter, accptRefNoParameter, statusParameter, errorDescParameter, strTableParameter, bankNameParameter, sponsorBankCodeParameter, uMRNParameter, appIdParameter);
        }
    
        public virtual ObjectResult<sp_ENach_Result> sp_ENach(string queryType, Nullable<long> mandateId, string adharNo, string mobileNo, string enachEmail, Nullable<long> id, string eMandatetype, Nullable<bool> isPhysical, Nullable<bool> enach, string appId, string emailId, Nullable<long> userId, string amount, string msgId, string link, string amountRupeesInWords)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var adharNoParameter = adharNo != null ?
                new ObjectParameter("AdharNo", adharNo) :
                new ObjectParameter("AdharNo", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var enachEmailParameter = enachEmail != null ?
                new ObjectParameter("EnachEmail", enachEmail) :
                new ObjectParameter("EnachEmail", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var eMandatetypeParameter = eMandatetype != null ?
                new ObjectParameter("EMandatetype", eMandatetype) :
                new ObjectParameter("EMandatetype", typeof(string));
    
            var isPhysicalParameter = isPhysical.HasValue ?
                new ObjectParameter("IsPhysical", isPhysical) :
                new ObjectParameter("IsPhysical", typeof(bool));
    
            var enachParameter = enach.HasValue ?
                new ObjectParameter("Enach", enach) :
                new ObjectParameter("Enach", typeof(bool));
    
            var appIdParameter = appId != null ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var msgIdParameter = msgId != null ?
                new ObjectParameter("MsgId", msgId) :
                new ObjectParameter("MsgId", typeof(string));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var amountRupeesInWordsParameter = amountRupeesInWords != null ?
                new ObjectParameter("AmountRupeesInWords", amountRupeesInWords) :
                new ObjectParameter("AmountRupeesInWords", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ENach_Result>("sp_ENach", queryTypeParameter, mandateIdParameter, adharNoParameter, mobileNoParameter, enachEmailParameter, idParameter, eMandatetypeParameter, isPhysicalParameter, enachParameter, appIdParameter, emailIdParameter, userIdParameter, amountParameter, msgIdParameter, linkParameter, amountRupeesInWordsParameter);
        }
    
        public virtual int Sp_Entity(string queryType, Nullable<long> stateId, Nullable<long> countryId, string name, string contactPerson, string sponsorBankCode, string utilityCode, string sponsorBankName, Nullable<long> entityId, string addr1, string email, Nullable<long> cityId, string mobile, string pincode, string fax, string imagePath, Nullable<long> userId, string userName, string password, string passwordKey, string code, string xmlEntity, string type, string debitType, string frequencyType, string toDebit, string xmlUtilityCode, string xmlSponsorBankCode, string instructingMemberId, string amount, string xmlPaymentMode, string activate, string entityBusinessCode, Nullable<bool> isOverMandate, Nullable<bool> isRefrenceCheck, Nullable<bool> isValidationCountEnable, Nullable<long> bankValidationAdminCount, Nullable<long> bankValidationUserCount, Nullable<long> acValidationAdminCount, Nullable<long> acValidationUserCount, Nullable<bool> isRefNumerc, Nullable<bool> isSendEmailCustomer, Nullable<bool> isShowMandateMode, Nullable<bool> ischkEmandate, Nullable<bool> ischkPhysical, string xmldebittype, string xmlToDebit, string xmlType, string xmlfrequency, Nullable<bool> chkIsRefrence2Mandatory, string dtBankAmount, Nullable<bool> isThirdTransaction, Nullable<bool> chkIsZipSure, Nullable<bool> chkIsAllowEManadte, Nullable<bool> iSTodateMandatoryEnach, string xmlFileName, string accountNumber, Nullable<long> aPPId, string presentmentSeqNumber, Nullable<bool> reCheck, Nullable<bool> checkerRequire, string xmlModeType, Nullable<bool> chkIsaccountvalidation, Nullable<bool> chkIsmobileapp, Nullable<bool> isEnableUserCheck, Nullable<bool> iSEnableCancelUser, string merchantKey, string dtentitycode, string requestdata, string dtEntity, string reqID, string dtphysicalbatcharr, string dtemandatebatcharr, string dtaadharbatcharr, string dtdebitbatcharr, string corporatename, string dtdirectdebitbatcharr, string dtIp, string dtphysicalfileformat, string dtemandatefileformat, string dtaadharfileformat, string dtMandateCancelParameter, string dtdebitfileformat, Nullable<int> physicalbank, Nullable<int> emandatebank, Nullable<int> aadharbank, Nullable<int> debitbank, string corporateOtherdetails, string callbackurl, string loginname, string loginpwd, Nullable<long> idphysical, Nullable<long> idemandate, Nullable<long> idaadhar, Nullable<long> iddebit, string dtFileSequence, string dtFileSequence1, string dtFileSequence2, string dtFileSequence3, string requestId, Nullable<long> corpRequestId, Nullable<long> entity, string searchText, string strFromDate, string strToDate, Nullable<int> pageCount, Nullable<int> directdebitbank, string dtdirectdebitfileformat, string dtFileSequence4, Nullable<long> iddirectdebit, string loginPassword, Nullable<int> rEf2Maxlength)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(long));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var sponsorBankCodeParameter = sponsorBankCode != null ?
                new ObjectParameter("SponsorBankCode", sponsorBankCode) :
                new ObjectParameter("SponsorBankCode", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var sponsorBankNameParameter = sponsorBankName != null ?
                new ObjectParameter("SponsorBankName", sponsorBankName) :
                new ObjectParameter("SponsorBankName", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(long));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var pincodeParameter = pincode != null ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var passwordKeyParameter = passwordKey != null ?
                new ObjectParameter("passwordKey", passwordKey) :
                new ObjectParameter("passwordKey", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var xmlEntityParameter = xmlEntity != null ?
                new ObjectParameter("XmlEntity", xmlEntity) :
                new ObjectParameter("XmlEntity", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var debitTypeParameter = debitType != null ?
                new ObjectParameter("DebitType", debitType) :
                new ObjectParameter("DebitType", typeof(string));
    
            var frequencyTypeParameter = frequencyType != null ?
                new ObjectParameter("FrequencyType", frequencyType) :
                new ObjectParameter("FrequencyType", typeof(string));
    
            var toDebitParameter = toDebit != null ?
                new ObjectParameter("ToDebit", toDebit) :
                new ObjectParameter("ToDebit", typeof(string));
    
            var xmlUtilityCodeParameter = xmlUtilityCode != null ?
                new ObjectParameter("XmlUtilityCode", xmlUtilityCode) :
                new ObjectParameter("XmlUtilityCode", typeof(string));
    
            var xmlSponsorBankCodeParameter = xmlSponsorBankCode != null ?
                new ObjectParameter("XmlSponsorBankCode", xmlSponsorBankCode) :
                new ObjectParameter("XmlSponsorBankCode", typeof(string));
    
            var instructingMemberIdParameter = instructingMemberId != null ?
                new ObjectParameter("InstructingMemberId", instructingMemberId) :
                new ObjectParameter("InstructingMemberId", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var xmlPaymentModeParameter = xmlPaymentMode != null ?
                new ObjectParameter("XmlPaymentMode", xmlPaymentMode) :
                new ObjectParameter("XmlPaymentMode", typeof(string));
    
            var activateParameter = activate != null ?
                new ObjectParameter("Activate", activate) :
                new ObjectParameter("Activate", typeof(string));
    
            var entityBusinessCodeParameter = entityBusinessCode != null ?
                new ObjectParameter("EntityBusinessCode", entityBusinessCode) :
                new ObjectParameter("EntityBusinessCode", typeof(string));
    
            var isOverMandateParameter = isOverMandate.HasValue ?
                new ObjectParameter("IsOverMandate", isOverMandate) :
                new ObjectParameter("IsOverMandate", typeof(bool));
    
            var isRefrenceCheckParameter = isRefrenceCheck.HasValue ?
                new ObjectParameter("IsRefrenceCheck", isRefrenceCheck) :
                new ObjectParameter("IsRefrenceCheck", typeof(bool));
    
            var isValidationCountEnableParameter = isValidationCountEnable.HasValue ?
                new ObjectParameter("IsValidationCountEnable", isValidationCountEnable) :
                new ObjectParameter("IsValidationCountEnable", typeof(bool));
    
            var bankValidationAdminCountParameter = bankValidationAdminCount.HasValue ?
                new ObjectParameter("BankValidationAdminCount", bankValidationAdminCount) :
                new ObjectParameter("BankValidationAdminCount", typeof(long));
    
            var bankValidationUserCountParameter = bankValidationUserCount.HasValue ?
                new ObjectParameter("BankValidationUserCount", bankValidationUserCount) :
                new ObjectParameter("BankValidationUserCount", typeof(long));
    
            var acValidationAdminCountParameter = acValidationAdminCount.HasValue ?
                new ObjectParameter("AcValidationAdminCount", acValidationAdminCount) :
                new ObjectParameter("AcValidationAdminCount", typeof(long));
    
            var acValidationUserCountParameter = acValidationUserCount.HasValue ?
                new ObjectParameter("AcValidationUserCount", acValidationUserCount) :
                new ObjectParameter("AcValidationUserCount", typeof(long));
    
            var isRefNumercParameter = isRefNumerc.HasValue ?
                new ObjectParameter("IsRefNumerc", isRefNumerc) :
                new ObjectParameter("IsRefNumerc", typeof(bool));
    
            var isSendEmailCustomerParameter = isSendEmailCustomer.HasValue ?
                new ObjectParameter("IsSendEmailCustomer", isSendEmailCustomer) :
                new ObjectParameter("IsSendEmailCustomer", typeof(bool));
    
            var isShowMandateModeParameter = isShowMandateMode.HasValue ?
                new ObjectParameter("IsShowMandateMode", isShowMandateMode) :
                new ObjectParameter("IsShowMandateMode", typeof(bool));
    
            var ischkEmandateParameter = ischkEmandate.HasValue ?
                new ObjectParameter("IschkEmandate", ischkEmandate) :
                new ObjectParameter("IschkEmandate", typeof(bool));
    
            var ischkPhysicalParameter = ischkPhysical.HasValue ?
                new ObjectParameter("IschkPhysical", ischkPhysical) :
                new ObjectParameter("IschkPhysical", typeof(bool));
    
            var xmldebittypeParameter = xmldebittype != null ?
                new ObjectParameter("Xmldebittype", xmldebittype) :
                new ObjectParameter("Xmldebittype", typeof(string));
    
            var xmlToDebitParameter = xmlToDebit != null ?
                new ObjectParameter("XmlToDebit", xmlToDebit) :
                new ObjectParameter("XmlToDebit", typeof(string));
    
            var xmlTypeParameter = xmlType != null ?
                new ObjectParameter("XmlType", xmlType) :
                new ObjectParameter("XmlType", typeof(string));
    
            var xmlfrequencyParameter = xmlfrequency != null ?
                new ObjectParameter("Xmlfrequency", xmlfrequency) :
                new ObjectParameter("Xmlfrequency", typeof(string));
    
            var chkIsRefrence2MandatoryParameter = chkIsRefrence2Mandatory.HasValue ?
                new ObjectParameter("chkIsRefrence2Mandatory", chkIsRefrence2Mandatory) :
                new ObjectParameter("chkIsRefrence2Mandatory", typeof(bool));
    
            var dtBankAmountParameter = dtBankAmount != null ?
                new ObjectParameter("dtBankAmount", dtBankAmount) :
                new ObjectParameter("dtBankAmount", typeof(string));
    
            var isThirdTransactionParameter = isThirdTransaction.HasValue ?
                new ObjectParameter("IsThirdTransaction", isThirdTransaction) :
                new ObjectParameter("IsThirdTransaction", typeof(bool));
    
            var chkIsZipSureParameter = chkIsZipSure.HasValue ?
                new ObjectParameter("chkIsZipSure", chkIsZipSure) :
                new ObjectParameter("chkIsZipSure", typeof(bool));
    
            var chkIsAllowEManadteParameter = chkIsAllowEManadte.HasValue ?
                new ObjectParameter("chkIsAllowEManadte", chkIsAllowEManadte) :
                new ObjectParameter("chkIsAllowEManadte", typeof(bool));
    
            var iSTodateMandatoryEnachParameter = iSTodateMandatoryEnach.HasValue ?
                new ObjectParameter("ISTodateMandatoryEnach", iSTodateMandatoryEnach) :
                new ObjectParameter("ISTodateMandatoryEnach", typeof(bool));
    
            var xmlFileNameParameter = xmlFileName != null ?
                new ObjectParameter("XmlFileName", xmlFileName) :
                new ObjectParameter("XmlFileName", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var aPPIdParameter = aPPId.HasValue ?
                new ObjectParameter("APPId", aPPId) :
                new ObjectParameter("APPId", typeof(long));
    
            var presentmentSeqNumberParameter = presentmentSeqNumber != null ?
                new ObjectParameter("PresentmentSeqNumber", presentmentSeqNumber) :
                new ObjectParameter("PresentmentSeqNumber", typeof(string));
    
            var reCheckParameter = reCheck.HasValue ?
                new ObjectParameter("ReCheck", reCheck) :
                new ObjectParameter("ReCheck", typeof(bool));
    
            var checkerRequireParameter = checkerRequire.HasValue ?
                new ObjectParameter("CheckerRequire", checkerRequire) :
                new ObjectParameter("CheckerRequire", typeof(bool));
    
            var xmlModeTypeParameter = xmlModeType != null ?
                new ObjectParameter("XmlModeType", xmlModeType) :
                new ObjectParameter("XmlModeType", typeof(string));
    
            var chkIsaccountvalidationParameter = chkIsaccountvalidation.HasValue ?
                new ObjectParameter("chkIsaccountvalidation", chkIsaccountvalidation) :
                new ObjectParameter("chkIsaccountvalidation", typeof(bool));
    
            var chkIsmobileappParameter = chkIsmobileapp.HasValue ?
                new ObjectParameter("chkIsmobileapp", chkIsmobileapp) :
                new ObjectParameter("chkIsmobileapp", typeof(bool));
    
            var isEnableUserCheckParameter = isEnableUserCheck.HasValue ?
                new ObjectParameter("IsEnableUserCheck", isEnableUserCheck) :
                new ObjectParameter("IsEnableUserCheck", typeof(bool));
    
            var iSEnableCancelUserParameter = iSEnableCancelUser.HasValue ?
                new ObjectParameter("ISEnableCancelUser", iSEnableCancelUser) :
                new ObjectParameter("ISEnableCancelUser", typeof(bool));
    
            var merchantKeyParameter = merchantKey != null ?
                new ObjectParameter("MerchantKey", merchantKey) :
                new ObjectParameter("MerchantKey", typeof(string));
    
            var dtentitycodeParameter = dtentitycode != null ?
                new ObjectParameter("dtentitycode", dtentitycode) :
                new ObjectParameter("dtentitycode", typeof(string));
    
            var requestdataParameter = requestdata != null ?
                new ObjectParameter("Requestdata", requestdata) :
                new ObjectParameter("Requestdata", typeof(string));
    
            var dtEntityParameter = dtEntity != null ?
                new ObjectParameter("dtEntity", dtEntity) :
                new ObjectParameter("dtEntity", typeof(string));
    
            var reqIDParameter = reqID != null ?
                new ObjectParameter("ReqID", reqID) :
                new ObjectParameter("ReqID", typeof(string));
    
            var dtphysicalbatcharrParameter = dtphysicalbatcharr != null ?
                new ObjectParameter("dtphysicalbatcharr", dtphysicalbatcharr) :
                new ObjectParameter("dtphysicalbatcharr", typeof(string));
    
            var dtemandatebatcharrParameter = dtemandatebatcharr != null ?
                new ObjectParameter("dtemandatebatcharr", dtemandatebatcharr) :
                new ObjectParameter("dtemandatebatcharr", typeof(string));
    
            var dtaadharbatcharrParameter = dtaadharbatcharr != null ?
                new ObjectParameter("dtaadharbatcharr", dtaadharbatcharr) :
                new ObjectParameter("dtaadharbatcharr", typeof(string));
    
            var dtdebitbatcharrParameter = dtdebitbatcharr != null ?
                new ObjectParameter("dtdebitbatcharr", dtdebitbatcharr) :
                new ObjectParameter("dtdebitbatcharr", typeof(string));
    
            var corporatenameParameter = corporatename != null ?
                new ObjectParameter("Corporatename", corporatename) :
                new ObjectParameter("Corporatename", typeof(string));
    
            var dtdirectdebitbatcharrParameter = dtdirectdebitbatcharr != null ?
                new ObjectParameter("dtdirectdebitbatcharr", dtdirectdebitbatcharr) :
                new ObjectParameter("dtdirectdebitbatcharr", typeof(string));
    
            var dtIpParameter = dtIp != null ?
                new ObjectParameter("dtIp", dtIp) :
                new ObjectParameter("dtIp", typeof(string));
    
            var dtphysicalfileformatParameter = dtphysicalfileformat != null ?
                new ObjectParameter("dtphysicalfileformat", dtphysicalfileformat) :
                new ObjectParameter("dtphysicalfileformat", typeof(string));
    
            var dtemandatefileformatParameter = dtemandatefileformat != null ?
                new ObjectParameter("dtemandatefileformat", dtemandatefileformat) :
                new ObjectParameter("dtemandatefileformat", typeof(string));
    
            var dtaadharfileformatParameter = dtaadharfileformat != null ?
                new ObjectParameter("dtaadharfileformat", dtaadharfileformat) :
                new ObjectParameter("dtaadharfileformat", typeof(string));
    
            var dtMandateCancelParameterParameter = dtMandateCancelParameter != null ?
                new ObjectParameter("dtMandateCancelParameter", dtMandateCancelParameter) :
                new ObjectParameter("dtMandateCancelParameter", typeof(string));
    
            var dtdebitfileformatParameter = dtdebitfileformat != null ?
                new ObjectParameter("dtdebitfileformat", dtdebitfileformat) :
                new ObjectParameter("dtdebitfileformat", typeof(string));
    
            var physicalbankParameter = physicalbank.HasValue ?
                new ObjectParameter("physicalbank", physicalbank) :
                new ObjectParameter("physicalbank", typeof(int));
    
            var emandatebankParameter = emandatebank.HasValue ?
                new ObjectParameter("emandatebank", emandatebank) :
                new ObjectParameter("emandatebank", typeof(int));
    
            var aadharbankParameter = aadharbank.HasValue ?
                new ObjectParameter("aadharbank", aadharbank) :
                new ObjectParameter("aadharbank", typeof(int));
    
            var debitbankParameter = debitbank.HasValue ?
                new ObjectParameter("debitbank", debitbank) :
                new ObjectParameter("debitbank", typeof(int));
    
            var corporateOtherdetailsParameter = corporateOtherdetails != null ?
                new ObjectParameter("CorporateOtherdetails", corporateOtherdetails) :
                new ObjectParameter("CorporateOtherdetails", typeof(string));
    
            var callbackurlParameter = callbackurl != null ?
                new ObjectParameter("callbackurl", callbackurl) :
                new ObjectParameter("callbackurl", typeof(string));
    
            var loginnameParameter = loginname != null ?
                new ObjectParameter("loginname", loginname) :
                new ObjectParameter("loginname", typeof(string));
    
            var loginpwdParameter = loginpwd != null ?
                new ObjectParameter("loginpwd", loginpwd) :
                new ObjectParameter("loginpwd", typeof(string));
    
            var idphysicalParameter = idphysical.HasValue ?
                new ObjectParameter("Idphysical", idphysical) :
                new ObjectParameter("Idphysical", typeof(long));
    
            var idemandateParameter = idemandate.HasValue ?
                new ObjectParameter("Idemandate", idemandate) :
                new ObjectParameter("Idemandate", typeof(long));
    
            var idaadharParameter = idaadhar.HasValue ?
                new ObjectParameter("Idaadhar", idaadhar) :
                new ObjectParameter("Idaadhar", typeof(long));
    
            var iddebitParameter = iddebit.HasValue ?
                new ObjectParameter("Iddebit", iddebit) :
                new ObjectParameter("Iddebit", typeof(long));
    
            var dtFileSequenceParameter = dtFileSequence != null ?
                new ObjectParameter("dtFileSequence", dtFileSequence) :
                new ObjectParameter("dtFileSequence", typeof(string));
    
            var dtFileSequence1Parameter = dtFileSequence1 != null ?
                new ObjectParameter("dtFileSequence1", dtFileSequence1) :
                new ObjectParameter("dtFileSequence1", typeof(string));
    
            var dtFileSequence2Parameter = dtFileSequence2 != null ?
                new ObjectParameter("dtFileSequence2", dtFileSequence2) :
                new ObjectParameter("dtFileSequence2", typeof(string));
    
            var dtFileSequence3Parameter = dtFileSequence3 != null ?
                new ObjectParameter("dtFileSequence3", dtFileSequence3) :
                new ObjectParameter("dtFileSequence3", typeof(string));
    
            var requestIdParameter = requestId != null ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(string));
    
            var corpRequestIdParameter = corpRequestId.HasValue ?
                new ObjectParameter("CorpRequestId", corpRequestId) :
                new ObjectParameter("CorpRequestId", typeof(long));
    
            var entityParameter = entity.HasValue ?
                new ObjectParameter("Entity", entity) :
                new ObjectParameter("Entity", typeof(long));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var pageCountParameter = pageCount.HasValue ?
                new ObjectParameter("PageCount", pageCount) :
                new ObjectParameter("PageCount", typeof(int));
    
            var directdebitbankParameter = directdebitbank.HasValue ?
                new ObjectParameter("directdebitbank", directdebitbank) :
                new ObjectParameter("directdebitbank", typeof(int));
    
            var dtdirectdebitfileformatParameter = dtdirectdebitfileformat != null ?
                new ObjectParameter("dtdirectdebitfileformat", dtdirectdebitfileformat) :
                new ObjectParameter("dtdirectdebitfileformat", typeof(string));
    
            var dtFileSequence4Parameter = dtFileSequence4 != null ?
                new ObjectParameter("dtFileSequence4", dtFileSequence4) :
                new ObjectParameter("dtFileSequence4", typeof(string));
    
            var iddirectdebitParameter = iddirectdebit.HasValue ?
                new ObjectParameter("Iddirectdebit", iddirectdebit) :
                new ObjectParameter("Iddirectdebit", typeof(long));
    
            var loginPasswordParameter = loginPassword != null ?
                new ObjectParameter("LoginPassword", loginPassword) :
                new ObjectParameter("LoginPassword", typeof(string));
    
            var rEf2MaxlengthParameter = rEf2Maxlength.HasValue ?
                new ObjectParameter("REf2Maxlength", rEf2Maxlength) :
                new ObjectParameter("REf2Maxlength", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Entity", queryTypeParameter, stateIdParameter, countryIdParameter, nameParameter, contactPersonParameter, sponsorBankCodeParameter, utilityCodeParameter, sponsorBankNameParameter, entityIdParameter, addr1Parameter, emailParameter, cityIdParameter, mobileParameter, pincodeParameter, faxParameter, imagePathParameter, userIdParameter, userNameParameter, passwordParameter, passwordKeyParameter, codeParameter, xmlEntityParameter, typeParameter, debitTypeParameter, frequencyTypeParameter, toDebitParameter, xmlUtilityCodeParameter, xmlSponsorBankCodeParameter, instructingMemberIdParameter, amountParameter, xmlPaymentModeParameter, activateParameter, entityBusinessCodeParameter, isOverMandateParameter, isRefrenceCheckParameter, isValidationCountEnableParameter, bankValidationAdminCountParameter, bankValidationUserCountParameter, acValidationAdminCountParameter, acValidationUserCountParameter, isRefNumercParameter, isSendEmailCustomerParameter, isShowMandateModeParameter, ischkEmandateParameter, ischkPhysicalParameter, xmldebittypeParameter, xmlToDebitParameter, xmlTypeParameter, xmlfrequencyParameter, chkIsRefrence2MandatoryParameter, dtBankAmountParameter, isThirdTransactionParameter, chkIsZipSureParameter, chkIsAllowEManadteParameter, iSTodateMandatoryEnachParameter, xmlFileNameParameter, accountNumberParameter, aPPIdParameter, presentmentSeqNumberParameter, reCheckParameter, checkerRequireParameter, xmlModeTypeParameter, chkIsaccountvalidationParameter, chkIsmobileappParameter, isEnableUserCheckParameter, iSEnableCancelUserParameter, merchantKeyParameter, dtentitycodeParameter, requestdataParameter, dtEntityParameter, reqIDParameter, dtphysicalbatcharrParameter, dtemandatebatcharrParameter, dtaadharbatcharrParameter, dtdebitbatcharrParameter, corporatenameParameter, dtdirectdebitbatcharrParameter, dtIpParameter, dtphysicalfileformatParameter, dtemandatefileformatParameter, dtaadharfileformatParameter, dtMandateCancelParameterParameter, dtdebitfileformatParameter, physicalbankParameter, emandatebankParameter, aadharbankParameter, debitbankParameter, corporateOtherdetailsParameter, callbackurlParameter, loginnameParameter, loginpwdParameter, idphysicalParameter, idemandateParameter, idaadharParameter, iddebitParameter, dtFileSequenceParameter, dtFileSequence1Parameter, dtFileSequence2Parameter, dtFileSequence3Parameter, requestIdParameter, corpRequestIdParameter, entityParameter, searchTextParameter, strFromDateParameter, strToDateParameter, pageCountParameter, directdebitbankParameter, dtdirectdebitfileformatParameter, dtFileSequence4Parameter, iddirectdebitParameter, loginPasswordParameter, rEf2MaxlengthParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_EntityBankSetup(string queryType, Nullable<long> entityId, Nullable<long> bankId, Nullable<bool> fileformatxml, Nullable<bool> fileformatexcel, Nullable<bool> fileformatcsv, Nullable<bool> filesendDaily, Nullable<bool> filesendWeekly, Nullable<bool> filesendMonthly, Nullable<bool> filesendSpecific, string timeDuration, Nullable<System.DateTime> weekDate, Nullable<System.DateTime> specificDate, Nullable<long> entityBankId, string dtFileSequence, Nullable<long> id, Nullable<long> userId, string dailyTime, string dtDate)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(long));
    
            var fileformatxmlParameter = fileformatxml.HasValue ?
                new ObjectParameter("fileformatxml", fileformatxml) :
                new ObjectParameter("fileformatxml", typeof(bool));
    
            var fileformatexcelParameter = fileformatexcel.HasValue ?
                new ObjectParameter("fileformatexcel", fileformatexcel) :
                new ObjectParameter("fileformatexcel", typeof(bool));
    
            var fileformatcsvParameter = fileformatcsv.HasValue ?
                new ObjectParameter("fileformatcsv", fileformatcsv) :
                new ObjectParameter("fileformatcsv", typeof(bool));
    
            var filesendDailyParameter = filesendDaily.HasValue ?
                new ObjectParameter("FilesendDaily", filesendDaily) :
                new ObjectParameter("FilesendDaily", typeof(bool));
    
            var filesendWeeklyParameter = filesendWeekly.HasValue ?
                new ObjectParameter("FilesendWeekly", filesendWeekly) :
                new ObjectParameter("FilesendWeekly", typeof(bool));
    
            var filesendMonthlyParameter = filesendMonthly.HasValue ?
                new ObjectParameter("FilesendMonthly", filesendMonthly) :
                new ObjectParameter("FilesendMonthly", typeof(bool));
    
            var filesendSpecificParameter = filesendSpecific.HasValue ?
                new ObjectParameter("FilesendSpecific", filesendSpecific) :
                new ObjectParameter("FilesendSpecific", typeof(bool));
    
            var timeDurationParameter = timeDuration != null ?
                new ObjectParameter("TimeDuration", timeDuration) :
                new ObjectParameter("TimeDuration", typeof(string));
    
            var weekDateParameter = weekDate.HasValue ?
                new ObjectParameter("WeekDate", weekDate) :
                new ObjectParameter("WeekDate", typeof(System.DateTime));
    
            var specificDateParameter = specificDate.HasValue ?
                new ObjectParameter("SpecificDate", specificDate) :
                new ObjectParameter("SpecificDate", typeof(System.DateTime));
    
            var entityBankIdParameter = entityBankId.HasValue ?
                new ObjectParameter("EntityBankId", entityBankId) :
                new ObjectParameter("EntityBankId", typeof(long));
    
            var dtFileSequenceParameter = dtFileSequence != null ?
                new ObjectParameter("dtFileSequence", dtFileSequence) :
                new ObjectParameter("dtFileSequence", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var dailyTimeParameter = dailyTime != null ?
                new ObjectParameter("DailyTime", dailyTime) :
                new ObjectParameter("DailyTime", typeof(string));
    
            var dtDateParameter = dtDate != null ?
                new ObjectParameter("dtDate", dtDate) :
                new ObjectParameter("dtDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_EntityBankSetup", queryTypeParameter, entityIdParameter, bankIdParameter, fileformatxmlParameter, fileformatexcelParameter, fileformatcsvParameter, filesendDailyParameter, filesendWeeklyParameter, filesendMonthlyParameter, filesendSpecificParameter, timeDurationParameter, weekDateParameter, specificDateParameter, entityBankIdParameter, dtFileSequenceParameter, idParameter, userIdParameter, dailyTimeParameter, dtDateParameter);
        }
    
        public virtual ObjectResult<sp_ESign_Result> sp_ESign(string queryType, Nullable<long> userId, Nullable<long> mandateid, string emandatetype, string webAppUrl, string encodedMandateID, Nullable<long> appId, string encodedAppId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var mandateidParameter = mandateid.HasValue ?
                new ObjectParameter("mandateid", mandateid) :
                new ObjectParameter("mandateid", typeof(long));
    
            var emandatetypeParameter = emandatetype != null ?
                new ObjectParameter("emandatetype", emandatetype) :
                new ObjectParameter("emandatetype", typeof(string));
    
            var webAppUrlParameter = webAppUrl != null ?
                new ObjectParameter("WebAppUrl", webAppUrl) :
                new ObjectParameter("WebAppUrl", typeof(string));
    
            var encodedMandateIDParameter = encodedMandateID != null ?
                new ObjectParameter("EncodedMandateID", encodedMandateID) :
                new ObjectParameter("EncodedMandateID", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var encodedAppIdParameter = encodedAppId != null ?
                new ObjectParameter("EncodedAppId", encodedAppId) :
                new ObjectParameter("EncodedAppId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ESign_Result>("sp_ESign", queryTypeParameter, userIdParameter, mandateidParameter, emandatetypeParameter, webAppUrlParameter, encodedMandateIDParameter, appIdParameter, encodedAppIdParameter);
        }
    
        public virtual ObjectResult<string> Sp_ExlUploadedData(string queryType, string entityID, string userID, string xmlDimension, Nullable<int> topVal, Nullable<long> aPPId, string tEUHID, string actID, string fileName, string tokenID, Nullable<int> productId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIDParameter = entityID != null ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var aPPIdParameter = aPPId.HasValue ?
                new ObjectParameter("APPId", aPPId) :
                new ObjectParameter("APPId", typeof(long));
    
            var tEUHIDParameter = tEUHID != null ?
                new ObjectParameter("TEUHID", tEUHID) :
                new ObjectParameter("TEUHID", typeof(string));
    
            var actIDParameter = actID != null ?
                new ObjectParameter("ActID", actID) :
                new ObjectParameter("ActID", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var tokenIDParameter = tokenID != null ?
                new ObjectParameter("TokenID", tokenID) :
                new ObjectParameter("TokenID", typeof(string));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_ExlUploadedData", queryTypeParameter, entityIDParameter, userIDParameter, xmlDimensionParameter, topValParameter, aPPIdParameter, tEUHIDParameter, actIDParameter, fileNameParameter, tokenIDParameter, productIdParameter);
        }
    
        public virtual int Sp_FinalDashbaord(string queryType, Nullable<int> entityId, Nullable<int> userId, string xmlDimension, string fILENO, string bankID, string fromDate, string toDate, Nullable<int> mode)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var fILENOParameter = fILENO != null ?
                new ObjectParameter("FILENO", fILENO) :
                new ObjectParameter("FILENO", typeof(string));
    
            var bankIDParameter = bankID != null ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_FinalDashbaord", queryTypeParameter, entityIdParameter, userIdParameter, xmlDimensionParameter, fILENOParameter, bankIDParameter, fromDateParameter, toDateParameter, modeParameter);
        }
    
        public virtual ObjectResult<SP_FinalStatusNotReceived_Result> SP_FinalStatusNotReceived(string queryType, Nullable<long> userId, string xmlXlData, Nullable<long> count, string fileNo, string appId, string submitteddate, Nullable<long> database_id, string entityFilename, string corporateNo, string strTable, string linkedServerName, Nullable<long> tCHID, Nullable<int> pageCount)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var xmlXlDataParameter = xmlXlData != null ?
                new ObjectParameter("XmlXlData", xmlXlData) :
                new ObjectParameter("XmlXlData", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            var fileNoParameter = fileNo != null ?
                new ObjectParameter("FileNo", fileNo) :
                new ObjectParameter("FileNo", typeof(string));
    
            var appIdParameter = appId != null ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(string));
    
            var submitteddateParameter = submitteddate != null ?
                new ObjectParameter("Submitteddate", submitteddate) :
                new ObjectParameter("Submitteddate", typeof(string));
    
            var database_idParameter = database_id.HasValue ?
                new ObjectParameter("database_id", database_id) :
                new ObjectParameter("database_id", typeof(long));
    
            var entityFilenameParameter = entityFilename != null ?
                new ObjectParameter("EntityFilename", entityFilename) :
                new ObjectParameter("EntityFilename", typeof(string));
    
            var corporateNoParameter = corporateNo != null ?
                new ObjectParameter("CorporateNo", corporateNo) :
                new ObjectParameter("CorporateNo", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var linkedServerNameParameter = linkedServerName != null ?
                new ObjectParameter("LinkedServerName", linkedServerName) :
                new ObjectParameter("LinkedServerName", typeof(string));
    
            var tCHIDParameter = tCHID.HasValue ?
                new ObjectParameter("TCHID", tCHID) :
                new ObjectParameter("TCHID", typeof(long));
    
            var pageCountParameter = pageCount.HasValue ?
                new ObjectParameter("PageCount", pageCount) :
                new ObjectParameter("PageCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FinalStatusNotReceived_Result>("SP_FinalStatusNotReceived", queryTypeParameter, userIdParameter, xmlXlDataParameter, countParameter, fileNoParameter, appIdParameter, submitteddateParameter, database_idParameter, entityFilenameParameter, corporateNoParameter, strTableParameter, linkedServerNameParameter, tCHIDParameter, pageCountParameter);
        }
    
        public virtual ObjectResult<SP_GeneraateMandateRegFile_Result> SP_GeneraateMandateRegFile(string queryType, Nullable<long> userId, Nullable<System.DateTime> fromDate, string xmlXlData, Nullable<System.DateTime> toDate, string strTable, Nullable<long> ddlUserId, Nullable<long> count)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var xmlXlDataParameter = xmlXlData != null ?
                new ObjectParameter("XmlXlData", xmlXlData) :
                new ObjectParameter("XmlXlData", typeof(string));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var ddlUserIdParameter = ddlUserId.HasValue ?
                new ObjectParameter("ddlUserId", ddlUserId) :
                new ObjectParameter("ddlUserId", typeof(long));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GeneraateMandateRegFile_Result>("SP_GeneraateMandateRegFile", queryTypeParameter, userIdParameter, fromDateParameter, xmlXlDataParameter, toDateParameter, strTableParameter, ddlUserIdParameter, countParameter);
        }
    
        public virtual ObjectResult<SP_GenerateZipFromService_Result> SP_GenerateZipFromService(string queryType, Nullable<long> userId, Nullable<System.DateTime> fromDate, string xmlXlData, Nullable<System.DateTime> toDate, string strTable, Nullable<long> ddlUserId, string entityFilename, Nullable<long> count, string fileNo, string appId, string appName, Nullable<int> totalDetailCount, string fileName, string newFileName)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var xmlXlDataParameter = xmlXlData != null ?
                new ObjectParameter("XmlXlData", xmlXlData) :
                new ObjectParameter("XmlXlData", typeof(string));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var ddlUserIdParameter = ddlUserId.HasValue ?
                new ObjectParameter("ddlUserId", ddlUserId) :
                new ObjectParameter("ddlUserId", typeof(long));
    
            var entityFilenameParameter = entityFilename != null ?
                new ObjectParameter("EntityFilename", entityFilename) :
                new ObjectParameter("EntityFilename", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            var fileNoParameter = fileNo != null ?
                new ObjectParameter("FileNo", fileNo) :
                new ObjectParameter("FileNo", typeof(string));
    
            var appIdParameter = appId != null ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(string));
    
            var appNameParameter = appName != null ?
                new ObjectParameter("AppName", appName) :
                new ObjectParameter("AppName", typeof(string));
    
            var totalDetailCountParameter = totalDetailCount.HasValue ?
                new ObjectParameter("TotalDetailCount", totalDetailCount) :
                new ObjectParameter("TotalDetailCount", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var newFileNameParameter = newFileName != null ?
                new ObjectParameter("NewFileName", newFileName) :
                new ObjectParameter("NewFileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GenerateZipFromService_Result>("SP_GenerateZipFromService", queryTypeParameter, userIdParameter, fromDateParameter, xmlXlDataParameter, toDateParameter, strTableParameter, ddlUserIdParameter, entityFilenameParameter, countParameter, fileNoParameter, appIdParameter, appNameParameter, totalDetailCountParameter, fileNameParameter, newFileNameParameter);
        }
    
        public virtual ObjectResult<SP_GenerateZipFromServiceForHDFC_Result> SP_GenerateZipFromServiceForHDFC(string queryType, Nullable<long> userId, Nullable<System.DateTime> fromDate, string xmlXlData, Nullable<System.DateTime> toDate, string strTable, Nullable<long> ddlUserId, Nullable<long> count, string fileNo, string appId, string appName, Nullable<int> totalDetailCount, string fileName, string newFileName, string entityFilename)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var xmlXlDataParameter = xmlXlData != null ?
                new ObjectParameter("XmlXlData", xmlXlData) :
                new ObjectParameter("XmlXlData", typeof(string));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var ddlUserIdParameter = ddlUserId.HasValue ?
                new ObjectParameter("ddlUserId", ddlUserId) :
                new ObjectParameter("ddlUserId", typeof(long));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            var fileNoParameter = fileNo != null ?
                new ObjectParameter("FileNo", fileNo) :
                new ObjectParameter("FileNo", typeof(string));
    
            var appIdParameter = appId != null ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(string));
    
            var appNameParameter = appName != null ?
                new ObjectParameter("AppName", appName) :
                new ObjectParameter("AppName", typeof(string));
    
            var totalDetailCountParameter = totalDetailCount.HasValue ?
                new ObjectParameter("TotalDetailCount", totalDetailCount) :
                new ObjectParameter("TotalDetailCount", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var newFileNameParameter = newFileName != null ?
                new ObjectParameter("NewFileName", newFileName) :
                new ObjectParameter("NewFileName", typeof(string));
    
            var entityFilenameParameter = entityFilename != null ?
                new ObjectParameter("EntityFilename", entityFilename) :
                new ObjectParameter("EntityFilename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GenerateZipFromServiceForHDFC_Result>("SP_GenerateZipFromServiceForHDFC", queryTypeParameter, userIdParameter, fromDateParameter, xmlXlDataParameter, toDateParameter, strTableParameter, ddlUserIdParameter, countParameter, fileNoParameter, appIdParameter, appNameParameter, totalDetailCountParameter, fileNameParameter, newFileNameParameter, entityFilenameParameter);
        }
    
        public virtual ObjectResult<Sp_GetDashBoardData_Result> Sp_GetDashBoardData(string queryType, Nullable<System.DateTime> weekDate, Nullable<long> branchId, Nullable<int> yearNo)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var weekDateParameter = weekDate.HasValue ?
                new ObjectParameter("WeekDate", weekDate) :
                new ObjectParameter("WeekDate", typeof(System.DateTime));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            var yearNoParameter = yearNo.HasValue ?
                new ObjectParameter("YearNo", yearNo) :
                new ObjectParameter("YearNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetDashBoardData_Result>("Sp_GetDashBoardData", queryTypeParameter, weekDateParameter, branchIdParameter, yearNoParameter);
        }
    
        public virtual ObjectResult<Sp_GetEmailData_Result> Sp_GetEmailData(string queryType, Nullable<long> mergeDataId, Nullable<long> id, Nullable<long> entityId, Nullable<long> appId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var mergeDataIdParameter = mergeDataId.HasValue ?
                new ObjectParameter("MergeDataId", mergeDataId) :
                new ObjectParameter("MergeDataId", typeof(long));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetEmailData_Result>("Sp_GetEmailData", queryTypeParameter, mergeDataIdParameter, idParameter, entityIdParameter, appIdParameter);
        }
    
        public virtual ObjectResult<Sp_GetMandatemodeData_Result> Sp_GetMandatemodeData(string queryType, Nullable<long> appId, Nullable<long> mandateId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetMandatemodeData_Result>("Sp_GetMandatemodeData", queryTypeParameter, appIdParameter, mandateIdParameter);
        }
    
        public virtual int Sp_GetMandateRegData(string queryType, Nullable<long> headerId, string xmlXlData, Nullable<long> fileNo, string appid, string headerReason, string fromDate, string toDate, string dateSearch, Nullable<int> pageCount, string search_Text, Nullable<int> userid, Nullable<int> entityId, string userType, string mandateid, string notRecieved, string isReject)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var headerIdParameter = headerId.HasValue ?
                new ObjectParameter("HeaderId", headerId) :
                new ObjectParameter("HeaderId", typeof(long));
    
            var xmlXlDataParameter = xmlXlData != null ?
                new ObjectParameter("XmlXlData", xmlXlData) :
                new ObjectParameter("XmlXlData", typeof(string));
    
            var fileNoParameter = fileNo.HasValue ?
                new ObjectParameter("FileNo", fileNo) :
                new ObjectParameter("FileNo", typeof(long));
    
            var appidParameter = appid != null ?
                new ObjectParameter("Appid", appid) :
                new ObjectParameter("Appid", typeof(string));
    
            var headerReasonParameter = headerReason != null ?
                new ObjectParameter("HeaderReason", headerReason) :
                new ObjectParameter("HeaderReason", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var dateSearchParameter = dateSearch != null ?
                new ObjectParameter("DateSearch", dateSearch) :
                new ObjectParameter("DateSearch", typeof(string));
    
            var pageCountParameter = pageCount.HasValue ?
                new ObjectParameter("PageCount", pageCount) :
                new ObjectParameter("PageCount", typeof(int));
    
            var search_TextParameter = search_Text != null ?
                new ObjectParameter("Search_Text", search_Text) :
                new ObjectParameter("Search_Text", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(int));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var mandateidParameter = mandateid != null ?
                new ObjectParameter("mandateid", mandateid) :
                new ObjectParameter("mandateid", typeof(string));
    
            var notRecievedParameter = notRecieved != null ?
                new ObjectParameter("NotRecieved", notRecieved) :
                new ObjectParameter("NotRecieved", typeof(string));
    
            var isRejectParameter = isReject != null ?
                new ObjectParameter("IsReject", isReject) :
                new ObjectParameter("IsReject", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_GetMandateRegData", queryTypeParameter, headerIdParameter, xmlXlDataParameter, fileNoParameter, appidParameter, headerReasonParameter, fromDateParameter, toDateParameter, dateSearchParameter, pageCountParameter, search_TextParameter, useridParameter, entityIdParameter, userTypeParameter, mandateidParameter, notRecievedParameter, isRejectParameter);
        }
    
        public virtual ObjectResult<sp_GetPennydropdetails_Result> sp_GetPennydropdetails(string queryType, string appId, string ifsc)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var appIdParameter = appId != null ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(string));
    
            var ifscParameter = ifsc != null ?
                new ObjectParameter("Ifsc", ifsc) :
                new ObjectParameter("Ifsc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPennydropdetails_Result>("sp_GetPennydropdetails", queryTypeParameter, appIdParameter, ifscParameter);
        }
    
        public virtual ObjectResult<Sp_Home_Result> Sp_Home(string queryType, Nullable<long> userId, Nullable<long> entityId, string type)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Home_Result>("Sp_Home", queryTypeParameter, userIdParameter, entityIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<Sp_IssueTracking_Result> Sp_IssueTracking(string queryType, Nullable<long> userID, Nullable<long> issueId, string userType, string appId, string tokenID, string requestNo, string searchText, string comment, string strFromDate, string strToDate, Nullable<long> linkID, string maxQuery, Nullable<int> records, Nullable<int> tOP, Nullable<int> pageCount, string requestID, Nullable<long> moduleId, Nullable<long> subModuleId, Nullable<long> priority, string issueDetails, Nullable<long> status, string strTable, string strTableValue, string issueAttachementPath)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var issueIdParameter = issueId.HasValue ?
                new ObjectParameter("IssueId", issueId) :
                new ObjectParameter("IssueId", typeof(long));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var appIdParameter = appId != null ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(string));
    
            var tokenIDParameter = tokenID != null ?
                new ObjectParameter("TokenID", tokenID) :
                new ObjectParameter("TokenID", typeof(string));
    
            var requestNoParameter = requestNo != null ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var linkIDParameter = linkID.HasValue ?
                new ObjectParameter("LinkID", linkID) :
                new ObjectParameter("LinkID", typeof(long));
    
            var maxQueryParameter = maxQuery != null ?
                new ObjectParameter("maxQuery", maxQuery) :
                new ObjectParameter("maxQuery", typeof(string));
    
            var recordsParameter = records.HasValue ?
                new ObjectParameter("Records", records) :
                new ObjectParameter("Records", typeof(int));
    
            var tOPParameter = tOP.HasValue ?
                new ObjectParameter("TOP", tOP) :
                new ObjectParameter("TOP", typeof(int));
    
            var pageCountParameter = pageCount.HasValue ?
                new ObjectParameter("PageCount", pageCount) :
                new ObjectParameter("PageCount", typeof(int));
    
            var requestIDParameter = requestID != null ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(string));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(long));
    
            var subModuleIdParameter = subModuleId.HasValue ?
                new ObjectParameter("SubModuleId", subModuleId) :
                new ObjectParameter("SubModuleId", typeof(long));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(long));
    
            var issueDetailsParameter = issueDetails != null ?
                new ObjectParameter("IssueDetails", issueDetails) :
                new ObjectParameter("IssueDetails", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(long));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var strTableValueParameter = strTableValue != null ?
                new ObjectParameter("StrTableValue", strTableValue) :
                new ObjectParameter("StrTableValue", typeof(string));
    
            var issueAttachementPathParameter = issueAttachementPath != null ?
                new ObjectParameter("IssueAttachementPath", issueAttachementPath) :
                new ObjectParameter("IssueAttachementPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_IssueTracking_Result>("Sp_IssueTracking", queryTypeParameter, userIDParameter, issueIdParameter, userTypeParameter, appIdParameter, tokenIDParameter, requestNoParameter, searchTextParameter, commentParameter, strFromDateParameter, strToDateParameter, linkIDParameter, maxQueryParameter, recordsParameter, tOPParameter, pageCountParameter, requestIDParameter, moduleIdParameter, subModuleIdParameter, priorityParameter, issueDetailsParameter, statusParameter, strTableParameter, strTableValueParameter, issueAttachementPathParameter);
        }
    
        public virtual ObjectResult<sp_KotakDashboard_Result> sp_KotakDashboard(string queryType, string xmlXlData, string corporateName, string dBId, string year, string month, string type, Nullable<int> pageCount)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var xmlXlDataParameter = xmlXlData != null ?
                new ObjectParameter("XmlXlData", xmlXlData) :
                new ObjectParameter("XmlXlData", typeof(string));
    
            var corporateNameParameter = corporateName != null ?
                new ObjectParameter("CorporateName", corporateName) :
                new ObjectParameter("CorporateName", typeof(string));
    
            var dBIdParameter = dBId != null ?
                new ObjectParameter("DBId", dBId) :
                new ObjectParameter("DBId", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var pageCountParameter = pageCount.HasValue ?
                new ObjectParameter("PageCount", pageCount) :
                new ObjectParameter("PageCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_KotakDashboard_Result>("sp_KotakDashboard", queryTypeParameter, xmlXlDataParameter, corporateNameParameter, dBIdParameter, yearParameter, monthParameter, typeParameter, pageCountParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_LinksCreation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_LinksCreation");
        }
    
        public virtual ObjectResult<Nullable<decimal>> Sp_LinkSetup(string queryType, string linkName, string url, Nullable<int> orderNo, string purpose, Nullable<bool> isActive, string iconName, Nullable<long> linkID)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var linkNameParameter = linkName != null ?
                new ObjectParameter("LinkName", linkName) :
                new ObjectParameter("LinkName", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("url", url) :
                new ObjectParameter("url", typeof(string));
    
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var purposeParameter = purpose != null ?
                new ObjectParameter("Purpose", purpose) :
                new ObjectParameter("Purpose", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var iconNameParameter = iconName != null ?
                new ObjectParameter("IconName", iconName) :
                new ObjectParameter("IconName", typeof(string));
    
            var linkIDParameter = linkID.HasValue ?
                new ObjectParameter("LinkID", linkID) :
                new ObjectParameter("LinkID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Sp_LinkSetup", queryTypeParameter, linkNameParameter, urlParameter, orderNoParameter, purposeParameter, isActiveParameter, iconNameParameter, linkIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> Sp_LinkSetup_AccessRights(string queryType, string linkName, string url, Nullable<int> orderNo, string purpose, Nullable<bool> isActive, string iconName, Nullable<long> linkID, string userType, Nullable<long> entityID, string accessRightsXml, Nullable<long> userID, Nullable<long> createdby)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var linkNameParameter = linkName != null ?
                new ObjectParameter("LinkName", linkName) :
                new ObjectParameter("LinkName", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("url", url) :
                new ObjectParameter("url", typeof(string));
    
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var purposeParameter = purpose != null ?
                new ObjectParameter("Purpose", purpose) :
                new ObjectParameter("Purpose", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var iconNameParameter = iconName != null ?
                new ObjectParameter("IconName", iconName) :
                new ObjectParameter("IconName", typeof(string));
    
            var linkIDParameter = linkID.HasValue ?
                new ObjectParameter("LinkID", linkID) :
                new ObjectParameter("LinkID", typeof(long));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(long));
    
            var accessRightsXmlParameter = accessRightsXml != null ?
                new ObjectParameter("AccessRightsXml", accessRightsXml) :
                new ObjectParameter("AccessRightsXml", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Sp_LinkSetup_AccessRights", queryTypeParameter, linkNameParameter, urlParameter, orderNoParameter, purposeParameter, isActiveParameter, iconNameParameter, linkIDParameter, userTypeParameter, entityIDParameter, accessRightsXmlParameter, userIDParameter, createdbyParameter);
        }
    
        public virtual ObjectResult<byte[]> Sp_LogoImageData(string queryType, string schemeId, string customerId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var schemeIdParameter = schemeId != null ?
                new ObjectParameter("SchemeId", schemeId) :
                new ObjectParameter("SchemeId", typeof(string));
    
            var customerIdParameter = customerId != null ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("Sp_LogoImageData", queryTypeParameter, schemeIdParameter, customerIdParameter);
        }
    
        public virtual ObjectResult<Sp_Mandate_Result> Sp_Mandate(string queryType, Nullable<long> entityId, string debitType, string frequency, Nullable<long> userId, string toDebit, string acNo, string bankName, string iFSC, Nullable<double> mICR, Nullable<long> netBanking, Nullable<long> debitCard, string amountRupees, string qRCodeImagepath, string refrence1, string refrence2, string addr1, string phNumber, string emailId, string from, string to, Nullable<long> mandateId, string description, string status, string nach, string rupees, string customer1, string customer2, string customer3, string dateOnMandate, string tIPPath, string pNGPath, string utilityCode, string sponsorCode, string strFromDate, string strToDate, string strTable, string paymentDataX, string xmlMandate, string filePath, Nullable<long> activityId, string typeData, string productId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string rejectedReason, string fullbankBranch, Nullable<long> bankValidationAdminCount, Nullable<long> bankValidationUserCount, Nullable<long> acValidationAdminCount, Nullable<long> acValidationUserCount, string mandateMode, string amountWords, string sponsorBankCode, Nullable<bool> iSPhysical, Nullable<bool> isEnach, Nullable<long> appId, Nullable<int> topVal, string tEUHID, string activityType, string categoryCode, string dBId, string year, string month, string commondata, string iFSCName, string micrName, string withbank)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var debitTypeParameter = debitType != null ?
                new ObjectParameter("DebitType", debitType) :
                new ObjectParameter("DebitType", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var toDebitParameter = toDebit != null ?
                new ObjectParameter("ToDebit", toDebit) :
                new ObjectParameter("ToDebit", typeof(string));
    
            var acNoParameter = acNo != null ?
                new ObjectParameter("AcNo", acNo) :
                new ObjectParameter("AcNo", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var mICRParameter = mICR.HasValue ?
                new ObjectParameter("MICR", mICR) :
                new ObjectParameter("MICR", typeof(double));
    
            var netBankingParameter = netBanking.HasValue ?
                new ObjectParameter("NetBanking", netBanking) :
                new ObjectParameter("NetBanking", typeof(long));
    
            var debitCardParameter = debitCard.HasValue ?
                new ObjectParameter("DebitCard", debitCard) :
                new ObjectParameter("DebitCard", typeof(long));
    
            var amountRupeesParameter = amountRupees != null ?
                new ObjectParameter("AmountRupees", amountRupees) :
                new ObjectParameter("AmountRupees", typeof(string));
    
            var qRCodeImagepathParameter = qRCodeImagepath != null ?
                new ObjectParameter("QRCodeImagepath", qRCodeImagepath) :
                new ObjectParameter("QRCodeImagepath", typeof(string));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var refrence2Parameter = refrence2 != null ?
                new ObjectParameter("Refrence2", refrence2) :
                new ObjectParameter("Refrence2", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var phNumberParameter = phNumber != null ?
                new ObjectParameter("PhNumber", phNumber) :
                new ObjectParameter("PhNumber", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var nachParameter = nach != null ?
                new ObjectParameter("Nach", nach) :
                new ObjectParameter("Nach", typeof(string));
    
            var rupeesParameter = rupees != null ?
                new ObjectParameter("Rupees", rupees) :
                new ObjectParameter("Rupees", typeof(string));
    
            var customer1Parameter = customer1 != null ?
                new ObjectParameter("Customer1", customer1) :
                new ObjectParameter("Customer1", typeof(string));
    
            var customer2Parameter = customer2 != null ?
                new ObjectParameter("Customer2", customer2) :
                new ObjectParameter("Customer2", typeof(string));
    
            var customer3Parameter = customer3 != null ?
                new ObjectParameter("Customer3", customer3) :
                new ObjectParameter("Customer3", typeof(string));
    
            var dateOnMandateParameter = dateOnMandate != null ?
                new ObjectParameter("DateOnMandate", dateOnMandate) :
                new ObjectParameter("DateOnMandate", typeof(string));
    
            var tIPPathParameter = tIPPath != null ?
                new ObjectParameter("TIPPath", tIPPath) :
                new ObjectParameter("TIPPath", typeof(string));
    
            var pNGPathParameter = pNGPath != null ?
                new ObjectParameter("PNGPath", pNGPath) :
                new ObjectParameter("PNGPath", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var sponsorCodeParameter = sponsorCode != null ?
                new ObjectParameter("SponsorCode", sponsorCode) :
                new ObjectParameter("SponsorCode", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var paymentDataXParameter = paymentDataX != null ?
                new ObjectParameter("PaymentDataX", paymentDataX) :
                new ObjectParameter("PaymentDataX", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(long));
    
            var typeDataParameter = typeData != null ?
                new ObjectParameter("TypeData", typeData) :
                new ObjectParameter("TypeData", typeof(string));
    
            var productIdParameter = productId != null ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var rejectedReasonParameter = rejectedReason != null ?
                new ObjectParameter("RejectedReason", rejectedReason) :
                new ObjectParameter("RejectedReason", typeof(string));
    
            var fullbankBranchParameter = fullbankBranch != null ?
                new ObjectParameter("fullbankBranch", fullbankBranch) :
                new ObjectParameter("fullbankBranch", typeof(string));
    
            var bankValidationAdminCountParameter = bankValidationAdminCount.HasValue ?
                new ObjectParameter("BankValidationAdminCount", bankValidationAdminCount) :
                new ObjectParameter("BankValidationAdminCount", typeof(long));
    
            var bankValidationUserCountParameter = bankValidationUserCount.HasValue ?
                new ObjectParameter("BankValidationUserCount", bankValidationUserCount) :
                new ObjectParameter("BankValidationUserCount", typeof(long));
    
            var acValidationAdminCountParameter = acValidationAdminCount.HasValue ?
                new ObjectParameter("AcValidationAdminCount", acValidationAdminCount) :
                new ObjectParameter("AcValidationAdminCount", typeof(long));
    
            var acValidationUserCountParameter = acValidationUserCount.HasValue ?
                new ObjectParameter("AcValidationUserCount", acValidationUserCount) :
                new ObjectParameter("AcValidationUserCount", typeof(long));
    
            var mandateModeParameter = mandateMode != null ?
                new ObjectParameter("MandateMode", mandateMode) :
                new ObjectParameter("MandateMode", typeof(string));
    
            var amountWordsParameter = amountWords != null ?
                new ObjectParameter("AmountWords", amountWords) :
                new ObjectParameter("AmountWords", typeof(string));
    
            var sponsorBankCodeParameter = sponsorBankCode != null ?
                new ObjectParameter("SponsorBankCode", sponsorBankCode) :
                new ObjectParameter("SponsorBankCode", typeof(string));
    
            var iSPhysicalParameter = iSPhysical.HasValue ?
                new ObjectParameter("ISPhysical", iSPhysical) :
                new ObjectParameter("ISPhysical", typeof(bool));
    
            var isEnachParameter = isEnach.HasValue ?
                new ObjectParameter("IsEnach", isEnach) :
                new ObjectParameter("IsEnach", typeof(bool));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var tEUHIDParameter = tEUHID != null ?
                new ObjectParameter("TEUHID", tEUHID) :
                new ObjectParameter("TEUHID", typeof(string));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var categoryCodeParameter = categoryCode != null ?
                new ObjectParameter("CategoryCode", categoryCode) :
                new ObjectParameter("CategoryCode", typeof(string));
    
            var dBIdParameter = dBId != null ?
                new ObjectParameter("DBId", dBId) :
                new ObjectParameter("DBId", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var commondataParameter = commondata != null ?
                new ObjectParameter("Commondata", commondata) :
                new ObjectParameter("Commondata", typeof(string));
    
            var iFSCNameParameter = iFSCName != null ?
                new ObjectParameter("IFSCName", iFSCName) :
                new ObjectParameter("IFSCName", typeof(string));
    
            var micrNameParameter = micrName != null ?
                new ObjectParameter("MicrName", micrName) :
                new ObjectParameter("MicrName", typeof(string));
    
            var withbankParameter = withbank != null ?
                new ObjectParameter("withbank", withbank) :
                new ObjectParameter("withbank", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Mandate_Result>("Sp_Mandate", queryTypeParameter, entityIdParameter, debitTypeParameter, frequencyParameter, userIdParameter, toDebitParameter, acNoParameter, bankNameParameter, iFSCParameter, mICRParameter, netBankingParameter, debitCardParameter, amountRupeesParameter, qRCodeImagepathParameter, refrence1Parameter, refrence2Parameter, addr1Parameter, phNumberParameter, emailIdParameter, fromParameter, toParameter, mandateIdParameter, descriptionParameter, statusParameter, nachParameter, rupeesParameter, customer1Parameter, customer2Parameter, customer3Parameter, dateOnMandateParameter, tIPPathParameter, pNGPathParameter, utilityCodeParameter, sponsorCodeParameter, strFromDateParameter, strToDateParameter, strTableParameter, paymentDataXParameter, xmlMandateParameter, filePathParameter, activityIdParameter, typeDataParameter, productIdParameter, fromDateParameter, toDateParameter, rejectedReasonParameter, fullbankBranchParameter, bankValidationAdminCountParameter, bankValidationUserCountParameter, acValidationAdminCountParameter, acValidationUserCountParameter, mandateModeParameter, amountWordsParameter, sponsorBankCodeParameter, iSPhysicalParameter, isEnachParameter, appIdParameter, topValParameter, tEUHIDParameter, activityTypeParameter, categoryCodeParameter, dBIdParameter, yearParameter, monthParameter, commondataParameter, iFSCNameParameter, micrNameParameter, withbankParameter);
        }
    
        public virtual int Sp_Mandate_24_082020(string queryType, Nullable<long> entityId, string debitType, string frequency, Nullable<long> userId, string toDebit, string acNo, string bankName, string iFSC, Nullable<double> mICR, Nullable<long> netBanking, Nullable<long> debitCard, string amountRupees, string qRCodeImagepath, string refrence1, string refrence2, string addr1, string phNumber, string emailId, string from, string to, Nullable<long> mandateId, string description, string status, string nach, string rupees, string customer1, string customer2, string customer3, string dateOnMandate, string tIPPath, string pNGPath, string utilityCode, string sponsorCode, string strFromDate, string strToDate, string strTable, string paymentDataX, string xmlMandate, string filePath, Nullable<long> activityId, string typeData, Nullable<long> productId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string rejectedReason, string fullbankBranch, Nullable<long> bankValidationAdminCount, Nullable<long> bankValidationUserCount, Nullable<long> acValidationAdminCount, Nullable<long> acValidationUserCount, string mandateMode, string amountWords, string sponsorBankCode, Nullable<bool> iSPhysical, Nullable<bool> isEnach, Nullable<long> appId, Nullable<int> topVal, string tEUHID, string activityType, string categoryCode, string dBId, string year, string month)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var debitTypeParameter = debitType != null ?
                new ObjectParameter("DebitType", debitType) :
                new ObjectParameter("DebitType", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var toDebitParameter = toDebit != null ?
                new ObjectParameter("ToDebit", toDebit) :
                new ObjectParameter("ToDebit", typeof(string));
    
            var acNoParameter = acNo != null ?
                new ObjectParameter("AcNo", acNo) :
                new ObjectParameter("AcNo", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var mICRParameter = mICR.HasValue ?
                new ObjectParameter("MICR", mICR) :
                new ObjectParameter("MICR", typeof(double));
    
            var netBankingParameter = netBanking.HasValue ?
                new ObjectParameter("NetBanking", netBanking) :
                new ObjectParameter("NetBanking", typeof(long));
    
            var debitCardParameter = debitCard.HasValue ?
                new ObjectParameter("DebitCard", debitCard) :
                new ObjectParameter("DebitCard", typeof(long));
    
            var amountRupeesParameter = amountRupees != null ?
                new ObjectParameter("AmountRupees", amountRupees) :
                new ObjectParameter("AmountRupees", typeof(string));
    
            var qRCodeImagepathParameter = qRCodeImagepath != null ?
                new ObjectParameter("QRCodeImagepath", qRCodeImagepath) :
                new ObjectParameter("QRCodeImagepath", typeof(string));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var refrence2Parameter = refrence2 != null ?
                new ObjectParameter("Refrence2", refrence2) :
                new ObjectParameter("Refrence2", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var phNumberParameter = phNumber != null ?
                new ObjectParameter("PhNumber", phNumber) :
                new ObjectParameter("PhNumber", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var nachParameter = nach != null ?
                new ObjectParameter("Nach", nach) :
                new ObjectParameter("Nach", typeof(string));
    
            var rupeesParameter = rupees != null ?
                new ObjectParameter("Rupees", rupees) :
                new ObjectParameter("Rupees", typeof(string));
    
            var customer1Parameter = customer1 != null ?
                new ObjectParameter("Customer1", customer1) :
                new ObjectParameter("Customer1", typeof(string));
    
            var customer2Parameter = customer2 != null ?
                new ObjectParameter("Customer2", customer2) :
                new ObjectParameter("Customer2", typeof(string));
    
            var customer3Parameter = customer3 != null ?
                new ObjectParameter("Customer3", customer3) :
                new ObjectParameter("Customer3", typeof(string));
    
            var dateOnMandateParameter = dateOnMandate != null ?
                new ObjectParameter("DateOnMandate", dateOnMandate) :
                new ObjectParameter("DateOnMandate", typeof(string));
    
            var tIPPathParameter = tIPPath != null ?
                new ObjectParameter("TIPPath", tIPPath) :
                new ObjectParameter("TIPPath", typeof(string));
    
            var pNGPathParameter = pNGPath != null ?
                new ObjectParameter("PNGPath", pNGPath) :
                new ObjectParameter("PNGPath", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var sponsorCodeParameter = sponsorCode != null ?
                new ObjectParameter("SponsorCode", sponsorCode) :
                new ObjectParameter("SponsorCode", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var paymentDataXParameter = paymentDataX != null ?
                new ObjectParameter("PaymentDataX", paymentDataX) :
                new ObjectParameter("PaymentDataX", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(long));
    
            var typeDataParameter = typeData != null ?
                new ObjectParameter("TypeData", typeData) :
                new ObjectParameter("TypeData", typeof(string));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var rejectedReasonParameter = rejectedReason != null ?
                new ObjectParameter("RejectedReason", rejectedReason) :
                new ObjectParameter("RejectedReason", typeof(string));
    
            var fullbankBranchParameter = fullbankBranch != null ?
                new ObjectParameter("fullbankBranch", fullbankBranch) :
                new ObjectParameter("fullbankBranch", typeof(string));
    
            var bankValidationAdminCountParameter = bankValidationAdminCount.HasValue ?
                new ObjectParameter("BankValidationAdminCount", bankValidationAdminCount) :
                new ObjectParameter("BankValidationAdminCount", typeof(long));
    
            var bankValidationUserCountParameter = bankValidationUserCount.HasValue ?
                new ObjectParameter("BankValidationUserCount", bankValidationUserCount) :
                new ObjectParameter("BankValidationUserCount", typeof(long));
    
            var acValidationAdminCountParameter = acValidationAdminCount.HasValue ?
                new ObjectParameter("AcValidationAdminCount", acValidationAdminCount) :
                new ObjectParameter("AcValidationAdminCount", typeof(long));
    
            var acValidationUserCountParameter = acValidationUserCount.HasValue ?
                new ObjectParameter("AcValidationUserCount", acValidationUserCount) :
                new ObjectParameter("AcValidationUserCount", typeof(long));
    
            var mandateModeParameter = mandateMode != null ?
                new ObjectParameter("MandateMode", mandateMode) :
                new ObjectParameter("MandateMode", typeof(string));
    
            var amountWordsParameter = amountWords != null ?
                new ObjectParameter("AmountWords", amountWords) :
                new ObjectParameter("AmountWords", typeof(string));
    
            var sponsorBankCodeParameter = sponsorBankCode != null ?
                new ObjectParameter("SponsorBankCode", sponsorBankCode) :
                new ObjectParameter("SponsorBankCode", typeof(string));
    
            var iSPhysicalParameter = iSPhysical.HasValue ?
                new ObjectParameter("ISPhysical", iSPhysical) :
                new ObjectParameter("ISPhysical", typeof(bool));
    
            var isEnachParameter = isEnach.HasValue ?
                new ObjectParameter("IsEnach", isEnach) :
                new ObjectParameter("IsEnach", typeof(bool));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var tEUHIDParameter = tEUHID != null ?
                new ObjectParameter("TEUHID", tEUHID) :
                new ObjectParameter("TEUHID", typeof(string));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var categoryCodeParameter = categoryCode != null ?
                new ObjectParameter("CategoryCode", categoryCode) :
                new ObjectParameter("CategoryCode", typeof(string));
    
            var dBIdParameter = dBId != null ?
                new ObjectParameter("DBId", dBId) :
                new ObjectParameter("DBId", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Mandate_24_082020", queryTypeParameter, entityIdParameter, debitTypeParameter, frequencyParameter, userIdParameter, toDebitParameter, acNoParameter, bankNameParameter, iFSCParameter, mICRParameter, netBankingParameter, debitCardParameter, amountRupeesParameter, qRCodeImagepathParameter, refrence1Parameter, refrence2Parameter, addr1Parameter, phNumberParameter, emailIdParameter, fromParameter, toParameter, mandateIdParameter, descriptionParameter, statusParameter, nachParameter, rupeesParameter, customer1Parameter, customer2Parameter, customer3Parameter, dateOnMandateParameter, tIPPathParameter, pNGPathParameter, utilityCodeParameter, sponsorCodeParameter, strFromDateParameter, strToDateParameter, strTableParameter, paymentDataXParameter, xmlMandateParameter, filePathParameter, activityIdParameter, typeDataParameter, productIdParameter, fromDateParameter, toDateParameter, rejectedReasonParameter, fullbankBranchParameter, bankValidationAdminCountParameter, bankValidationUserCountParameter, acValidationAdminCountParameter, acValidationUserCountParameter, mandateModeParameter, amountWordsParameter, sponsorBankCodeParameter, iSPhysicalParameter, isEnachParameter, appIdParameter, topValParameter, tEUHIDParameter, activityTypeParameter, categoryCodeParameter, dBIdParameter, yearParameter, monthParameter);
        }
    
        public virtual ObjectResult<string> Sp_Mandate_Reverse(string queryType, Nullable<long> entityId, string debitType, string frequency, Nullable<long> userId, string toDebit, string acNo, string bankName, string iFSC, Nullable<double> mICR, Nullable<long> netBanking, Nullable<long> debitCard, string amountRupees, string qRCodeImagepath, string refrence1, string refrence2, string addr1, string phNumber, string emailId, string from, string to, Nullable<long> mandateId, string description, string status, string nach, string rupees, string customer1, string customer2, string customer3, string dateOnMandate, string tIPPath, string pNGPath, string utilityCode, string sponsorCode, string strFromDate, string strToDate, string strTable, string paymentDataX, string xmlMandate, string filePath, Nullable<long> activityId, string typeData, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string rejectedReason, string fullbankBranch, Nullable<long> bankValidationAdminCount, Nullable<long> bankValidationUserCount, Nullable<long> acValidationAdminCount, Nullable<long> acValidationUserCount, string mandateMode, string amountWords, string sponsorBankCode, Nullable<bool> iSPhysical, Nullable<bool> isEnach, Nullable<long> appId, Nullable<int> topVal, string tEUHID, string activityType, string categoryCode, Nullable<long> id, Nullable<long> mandateReverseId, Nullable<bool> isOnUs, string activityName)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var debitTypeParameter = debitType != null ?
                new ObjectParameter("DebitType", debitType) :
                new ObjectParameter("DebitType", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var toDebitParameter = toDebit != null ?
                new ObjectParameter("ToDebit", toDebit) :
                new ObjectParameter("ToDebit", typeof(string));
    
            var acNoParameter = acNo != null ?
                new ObjectParameter("AcNo", acNo) :
                new ObjectParameter("AcNo", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var mICRParameter = mICR.HasValue ?
                new ObjectParameter("MICR", mICR) :
                new ObjectParameter("MICR", typeof(double));
    
            var netBankingParameter = netBanking.HasValue ?
                new ObjectParameter("NetBanking", netBanking) :
                new ObjectParameter("NetBanking", typeof(long));
    
            var debitCardParameter = debitCard.HasValue ?
                new ObjectParameter("DebitCard", debitCard) :
                new ObjectParameter("DebitCard", typeof(long));
    
            var amountRupeesParameter = amountRupees != null ?
                new ObjectParameter("AmountRupees", amountRupees) :
                new ObjectParameter("AmountRupees", typeof(string));
    
            var qRCodeImagepathParameter = qRCodeImagepath != null ?
                new ObjectParameter("QRCodeImagepath", qRCodeImagepath) :
                new ObjectParameter("QRCodeImagepath", typeof(string));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var refrence2Parameter = refrence2 != null ?
                new ObjectParameter("Refrence2", refrence2) :
                new ObjectParameter("Refrence2", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var phNumberParameter = phNumber != null ?
                new ObjectParameter("PhNumber", phNumber) :
                new ObjectParameter("PhNumber", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var nachParameter = nach != null ?
                new ObjectParameter("Nach", nach) :
                new ObjectParameter("Nach", typeof(string));
    
            var rupeesParameter = rupees != null ?
                new ObjectParameter("Rupees", rupees) :
                new ObjectParameter("Rupees", typeof(string));
    
            var customer1Parameter = customer1 != null ?
                new ObjectParameter("Customer1", customer1) :
                new ObjectParameter("Customer1", typeof(string));
    
            var customer2Parameter = customer2 != null ?
                new ObjectParameter("Customer2", customer2) :
                new ObjectParameter("Customer2", typeof(string));
    
            var customer3Parameter = customer3 != null ?
                new ObjectParameter("Customer3", customer3) :
                new ObjectParameter("Customer3", typeof(string));
    
            var dateOnMandateParameter = dateOnMandate != null ?
                new ObjectParameter("DateOnMandate", dateOnMandate) :
                new ObjectParameter("DateOnMandate", typeof(string));
    
            var tIPPathParameter = tIPPath != null ?
                new ObjectParameter("TIPPath", tIPPath) :
                new ObjectParameter("TIPPath", typeof(string));
    
            var pNGPathParameter = pNGPath != null ?
                new ObjectParameter("PNGPath", pNGPath) :
                new ObjectParameter("PNGPath", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var sponsorCodeParameter = sponsorCode != null ?
                new ObjectParameter("SponsorCode", sponsorCode) :
                new ObjectParameter("SponsorCode", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var paymentDataXParameter = paymentDataX != null ?
                new ObjectParameter("PaymentDataX", paymentDataX) :
                new ObjectParameter("PaymentDataX", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(long));
    
            var typeDataParameter = typeData != null ?
                new ObjectParameter("TypeData", typeData) :
                new ObjectParameter("TypeData", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var rejectedReasonParameter = rejectedReason != null ?
                new ObjectParameter("RejectedReason", rejectedReason) :
                new ObjectParameter("RejectedReason", typeof(string));
    
            var fullbankBranchParameter = fullbankBranch != null ?
                new ObjectParameter("fullbankBranch", fullbankBranch) :
                new ObjectParameter("fullbankBranch", typeof(string));
    
            var bankValidationAdminCountParameter = bankValidationAdminCount.HasValue ?
                new ObjectParameter("BankValidationAdminCount", bankValidationAdminCount) :
                new ObjectParameter("BankValidationAdminCount", typeof(long));
    
            var bankValidationUserCountParameter = bankValidationUserCount.HasValue ?
                new ObjectParameter("BankValidationUserCount", bankValidationUserCount) :
                new ObjectParameter("BankValidationUserCount", typeof(long));
    
            var acValidationAdminCountParameter = acValidationAdminCount.HasValue ?
                new ObjectParameter("AcValidationAdminCount", acValidationAdminCount) :
                new ObjectParameter("AcValidationAdminCount", typeof(long));
    
            var acValidationUserCountParameter = acValidationUserCount.HasValue ?
                new ObjectParameter("AcValidationUserCount", acValidationUserCount) :
                new ObjectParameter("AcValidationUserCount", typeof(long));
    
            var mandateModeParameter = mandateMode != null ?
                new ObjectParameter("MandateMode", mandateMode) :
                new ObjectParameter("MandateMode", typeof(string));
    
            var amountWordsParameter = amountWords != null ?
                new ObjectParameter("AmountWords", amountWords) :
                new ObjectParameter("AmountWords", typeof(string));
    
            var sponsorBankCodeParameter = sponsorBankCode != null ?
                new ObjectParameter("SponsorBankCode", sponsorBankCode) :
                new ObjectParameter("SponsorBankCode", typeof(string));
    
            var iSPhysicalParameter = iSPhysical.HasValue ?
                new ObjectParameter("ISPhysical", iSPhysical) :
                new ObjectParameter("ISPhysical", typeof(bool));
    
            var isEnachParameter = isEnach.HasValue ?
                new ObjectParameter("IsEnach", isEnach) :
                new ObjectParameter("IsEnach", typeof(bool));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var tEUHIDParameter = tEUHID != null ?
                new ObjectParameter("TEUHID", tEUHID) :
                new ObjectParameter("TEUHID", typeof(string));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var categoryCodeParameter = categoryCode != null ?
                new ObjectParameter("CategoryCode", categoryCode) :
                new ObjectParameter("CategoryCode", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var mandateReverseIdParameter = mandateReverseId.HasValue ?
                new ObjectParameter("MandateReverseId", mandateReverseId) :
                new ObjectParameter("MandateReverseId", typeof(long));
    
            var isOnUsParameter = isOnUs.HasValue ?
                new ObjectParameter("IsOnUs", isOnUs) :
                new ObjectParameter("IsOnUs", typeof(bool));
    
            var activityNameParameter = activityName != null ?
                new ObjectParameter("ActivityName", activityName) :
                new ObjectParameter("ActivityName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_Mandate_Reverse", queryTypeParameter, entityIdParameter, debitTypeParameter, frequencyParameter, userIdParameter, toDebitParameter, acNoParameter, bankNameParameter, iFSCParameter, mICRParameter, netBankingParameter, debitCardParameter, amountRupeesParameter, qRCodeImagepathParameter, refrence1Parameter, refrence2Parameter, addr1Parameter, phNumberParameter, emailIdParameter, fromParameter, toParameter, mandateIdParameter, descriptionParameter, statusParameter, nachParameter, rupeesParameter, customer1Parameter, customer2Parameter, customer3Parameter, dateOnMandateParameter, tIPPathParameter, pNGPathParameter, utilityCodeParameter, sponsorCodeParameter, strFromDateParameter, strToDateParameter, strTableParameter, paymentDataXParameter, xmlMandateParameter, filePathParameter, activityIdParameter, typeDataParameter, fromDateParameter, toDateParameter, rejectedReasonParameter, fullbankBranchParameter, bankValidationAdminCountParameter, bankValidationUserCountParameter, acValidationAdminCountParameter, acValidationUserCountParameter, mandateModeParameter, amountWordsParameter, sponsorBankCodeParameter, iSPhysicalParameter, isEnachParameter, appIdParameter, topValParameter, tEUHIDParameter, activityTypeParameter, categoryCodeParameter, idParameter, mandateReverseIdParameter, isOnUsParameter, activityNameParameter);
        }
    
        public virtual ObjectResult<sp_MandateAnalysis_Result> sp_MandateAnalysis(string queryType, string xmlXlData, string corporateName, string dBId, Nullable<long> year, Nullable<long> month, Nullable<long> topVal)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var xmlXlDataParameter = xmlXlData != null ?
                new ObjectParameter("XmlXlData", xmlXlData) :
                new ObjectParameter("XmlXlData", typeof(string));
    
            var corporateNameParameter = corporateName != null ?
                new ObjectParameter("CorporateName", corporateName) :
                new ObjectParameter("CorporateName", typeof(string));
    
            var dBIdParameter = dBId != null ?
                new ObjectParameter("DBId", dBId) :
                new ObjectParameter("DBId", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(long));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(long));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MandateAnalysis_Result>("sp_MandateAnalysis", queryTypeParameter, xmlXlDataParameter, corporateNameParameter, dBIdParameter, yearParameter, monthParameter, topValParameter);
        }
    
        public virtual ObjectResult<sp_MandateDetails_Result> sp_MandateDetails(string queryType, Nullable<long> mandateId, string adharNo, string mobileNo, string enachEmail, Nullable<long> id, string eMandatetype, string appId, string link, string encodedMandateID)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var adharNoParameter = adharNo != null ?
                new ObjectParameter("AdharNo", adharNo) :
                new ObjectParameter("AdharNo", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var enachEmailParameter = enachEmail != null ?
                new ObjectParameter("EnachEmail", enachEmail) :
                new ObjectParameter("EnachEmail", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var eMandatetypeParameter = eMandatetype != null ?
                new ObjectParameter("EMandatetype", eMandatetype) :
                new ObjectParameter("EMandatetype", typeof(string));
    
            var appIdParameter = appId != null ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(string));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var encodedMandateIDParameter = encodedMandateID != null ?
                new ObjectParameter("EncodedMandateID", encodedMandateID) :
                new ObjectParameter("EncodedMandateID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MandateDetails_Result>("sp_MandateDetails", queryTypeParameter, mandateIdParameter, adharNoParameter, mobileNoParameter, enachEmailParameter, idParameter, eMandatetypeParameter, appIdParameter, linkParameter, encodedMandateIDParameter);
        }
    
        public virtual ObjectResult<Sp_MandateDirectDebit_Result> Sp_MandateDirectDebit(string queryType, Nullable<long> entityId, string debitType, string frequency, Nullable<long> userId, string toDebit, string acNo, string bankName, string iFSC, Nullable<double> mICR, string amountRupees, string refrence1, string refrence2, string addr1, string phNumber, string emailId, string from, string to, Nullable<long> mandateId, string description, string status, string nach, string rupees, string customer1, string customer2, string customer3, string dateOnMandate, string tIPPath, string pNGPath, string utilityCode, string sponsorCode, string strFromDate, string strToDate, string strTable, string paymentDataX, string xmlMandate, string filePath, Nullable<long> activityId, string typeData, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string rejectedReason, string fullbankBranch, Nullable<long> bankValidationAdminCount, Nullable<long> bankValidationUserCount, Nullable<long> acValidationAdminCount, Nullable<long> acValidationUserCount, string mandateMode, string amountWords, Nullable<long> appId, string sponsorBankCode)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var debitTypeParameter = debitType != null ?
                new ObjectParameter("DebitType", debitType) :
                new ObjectParameter("DebitType", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var toDebitParameter = toDebit != null ?
                new ObjectParameter("ToDebit", toDebit) :
                new ObjectParameter("ToDebit", typeof(string));
    
            var acNoParameter = acNo != null ?
                new ObjectParameter("AcNo", acNo) :
                new ObjectParameter("AcNo", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var mICRParameter = mICR.HasValue ?
                new ObjectParameter("MICR", mICR) :
                new ObjectParameter("MICR", typeof(double));
    
            var amountRupeesParameter = amountRupees != null ?
                new ObjectParameter("AmountRupees", amountRupees) :
                new ObjectParameter("AmountRupees", typeof(string));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var refrence2Parameter = refrence2 != null ?
                new ObjectParameter("Refrence2", refrence2) :
                new ObjectParameter("Refrence2", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var phNumberParameter = phNumber != null ?
                new ObjectParameter("PhNumber", phNumber) :
                new ObjectParameter("PhNumber", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var nachParameter = nach != null ?
                new ObjectParameter("Nach", nach) :
                new ObjectParameter("Nach", typeof(string));
    
            var rupeesParameter = rupees != null ?
                new ObjectParameter("Rupees", rupees) :
                new ObjectParameter("Rupees", typeof(string));
    
            var customer1Parameter = customer1 != null ?
                new ObjectParameter("Customer1", customer1) :
                new ObjectParameter("Customer1", typeof(string));
    
            var customer2Parameter = customer2 != null ?
                new ObjectParameter("Customer2", customer2) :
                new ObjectParameter("Customer2", typeof(string));
    
            var customer3Parameter = customer3 != null ?
                new ObjectParameter("Customer3", customer3) :
                new ObjectParameter("Customer3", typeof(string));
    
            var dateOnMandateParameter = dateOnMandate != null ?
                new ObjectParameter("DateOnMandate", dateOnMandate) :
                new ObjectParameter("DateOnMandate", typeof(string));
    
            var tIPPathParameter = tIPPath != null ?
                new ObjectParameter("TIPPath", tIPPath) :
                new ObjectParameter("TIPPath", typeof(string));
    
            var pNGPathParameter = pNGPath != null ?
                new ObjectParameter("PNGPath", pNGPath) :
                new ObjectParameter("PNGPath", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var sponsorCodeParameter = sponsorCode != null ?
                new ObjectParameter("SponsorCode", sponsorCode) :
                new ObjectParameter("SponsorCode", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var paymentDataXParameter = paymentDataX != null ?
                new ObjectParameter("PaymentDataX", paymentDataX) :
                new ObjectParameter("PaymentDataX", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(long));
    
            var typeDataParameter = typeData != null ?
                new ObjectParameter("TypeData", typeData) :
                new ObjectParameter("TypeData", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var rejectedReasonParameter = rejectedReason != null ?
                new ObjectParameter("RejectedReason", rejectedReason) :
                new ObjectParameter("RejectedReason", typeof(string));
    
            var fullbankBranchParameter = fullbankBranch != null ?
                new ObjectParameter("fullbankBranch", fullbankBranch) :
                new ObjectParameter("fullbankBranch", typeof(string));
    
            var bankValidationAdminCountParameter = bankValidationAdminCount.HasValue ?
                new ObjectParameter("BankValidationAdminCount", bankValidationAdminCount) :
                new ObjectParameter("BankValidationAdminCount", typeof(long));
    
            var bankValidationUserCountParameter = bankValidationUserCount.HasValue ?
                new ObjectParameter("BankValidationUserCount", bankValidationUserCount) :
                new ObjectParameter("BankValidationUserCount", typeof(long));
    
            var acValidationAdminCountParameter = acValidationAdminCount.HasValue ?
                new ObjectParameter("AcValidationAdminCount", acValidationAdminCount) :
                new ObjectParameter("AcValidationAdminCount", typeof(long));
    
            var acValidationUserCountParameter = acValidationUserCount.HasValue ?
                new ObjectParameter("AcValidationUserCount", acValidationUserCount) :
                new ObjectParameter("AcValidationUserCount", typeof(long));
    
            var mandateModeParameter = mandateMode != null ?
                new ObjectParameter("MandateMode", mandateMode) :
                new ObjectParameter("MandateMode", typeof(string));
    
            var amountWordsParameter = amountWords != null ?
                new ObjectParameter("AmountWords", amountWords) :
                new ObjectParameter("AmountWords", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var sponsorBankCodeParameter = sponsorBankCode != null ?
                new ObjectParameter("SponsorBankCode", sponsorBankCode) :
                new ObjectParameter("SponsorBankCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_MandateDirectDebit_Result>("Sp_MandateDirectDebit", queryTypeParameter, entityIdParameter, debitTypeParameter, frequencyParameter, userIdParameter, toDebitParameter, acNoParameter, bankNameParameter, iFSCParameter, mICRParameter, amountRupeesParameter, refrence1Parameter, refrence2Parameter, addr1Parameter, phNumberParameter, emailIdParameter, fromParameter, toParameter, mandateIdParameter, descriptionParameter, statusParameter, nachParameter, rupeesParameter, customer1Parameter, customer2Parameter, customer3Parameter, dateOnMandateParameter, tIPPathParameter, pNGPathParameter, utilityCodeParameter, sponsorCodeParameter, strFromDateParameter, strToDateParameter, strTableParameter, paymentDataXParameter, xmlMandateParameter, filePathParameter, activityIdParameter, typeDataParameter, fromDateParameter, toDateParameter, rejectedReasonParameter, fullbankBranchParameter, bankValidationAdminCountParameter, bankValidationUserCountParameter, acValidationAdminCountParameter, acValidationUserCountParameter, mandateModeParameter, amountWordsParameter, appIdParameter, sponsorBankCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_MandateFile(string queryType, Nullable<long> userId, Nullable<long> legalId, Nullable<long> proDimensionId, Nullable<long> projectId, string code, string name, Nullable<long> proGroupId, string userType, Nullable<long> refId, Nullable<long> branchId, Nullable<System.DateTime> weekDate)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var legalIdParameter = legalId.HasValue ?
                new ObjectParameter("LegalId", legalId) :
                new ObjectParameter("LegalId", typeof(long));
    
            var proDimensionIdParameter = proDimensionId.HasValue ?
                new ObjectParameter("ProDimensionId", proDimensionId) :
                new ObjectParameter("ProDimensionId", typeof(long));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(long));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var proGroupIdParameter = proGroupId.HasValue ?
                new ObjectParameter("ProGroupId", proGroupId) :
                new ObjectParameter("ProGroupId", typeof(long));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var refIdParameter = refId.HasValue ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(long));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            var weekDateParameter = weekDate.HasValue ?
                new ObjectParameter("WeekDate", weekDate) :
                new ObjectParameter("WeekDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_MandateFile", queryTypeParameter, userIdParameter, legalIdParameter, proDimensionIdParameter, projectIdParameter, codeParameter, nameParameter, proGroupIdParameter, userTypeParameter, refIdParameter, branchIdParameter, weekDateParameter);
        }
    
        public virtual ObjectResult<Sp_MandateHistory_Result> Sp_MandateHistory(string queryType, string mandateId, string phoneNumber)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var mandateIdParameter = mandateId != null ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_MandateHistory_Result>("Sp_MandateHistory", queryTypeParameter, mandateIdParameter, phoneNumberParameter);
        }
    
        public virtual ObjectResult<string> Sp_MandateRefrence(string queryType, string mandateId, string refrence1, string phoneNumber)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var mandateIdParameter = mandateId != null ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(string));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_MandateRefrence", queryTypeParameter, mandateIdParameter, refrence1Parameter, phoneNumberParameter);
        }
    
        public virtual ObjectResult<Sp_MandateReport_Result> Sp_MandateReport(string queryType, Nullable<long> userId, Nullable<long> legalId, Nullable<long> proDimensionId, Nullable<long> projectId, string code, string name, Nullable<long> proGroupId, string userType, Nullable<long> refId, Nullable<long> branchId, Nullable<System.DateTime> weekDate, Nullable<long> mandateId, Nullable<long> entityId, Nullable<long> month, Nullable<long> year)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var legalIdParameter = legalId.HasValue ?
                new ObjectParameter("LegalId", legalId) :
                new ObjectParameter("LegalId", typeof(long));
    
            var proDimensionIdParameter = proDimensionId.HasValue ?
                new ObjectParameter("ProDimensionId", proDimensionId) :
                new ObjectParameter("ProDimensionId", typeof(long));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(long));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var proGroupIdParameter = proGroupId.HasValue ?
                new ObjectParameter("ProGroupId", proGroupId) :
                new ObjectParameter("ProGroupId", typeof(long));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var refIdParameter = refId.HasValue ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(long));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            var weekDateParameter = weekDate.HasValue ?
                new ObjectParameter("WeekDate", weekDate) :
                new ObjectParameter("WeekDate", typeof(System.DateTime));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(long));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_MandateReport_Result>("Sp_MandateReport", queryTypeParameter, userIdParameter, legalIdParameter, proDimensionIdParameter, projectIdParameter, codeParameter, nameParameter, proGroupIdParameter, userTypeParameter, refIdParameter, branchIdParameter, weekDateParameter, mandateIdParameter, entityIdParameter, monthParameter, yearParameter);
        }
    
        public virtual ObjectResult<Sp_MobileUploadImageName_Result> Sp_MobileUploadImageName(string queryType, string imagePath, Nullable<long> mandateId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_MobileUploadImageName_Result>("Sp_MobileUploadImageName", queryTypeParameter, imagePathParameter, mandateIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_MobileUserLogin(string queryType, Nullable<long> mobileNo, Nullable<long> mob)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var mobileNoParameter = mobileNo.HasValue ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(long));
    
            var mobParameter = mob.HasValue ?
                new ObjectParameter("Mob", mob) :
                new ObjectParameter("Mob", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_MobileUserLogin", queryTypeParameter, mobileNoParameter, mobParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_ModuleMaster(string queryType, string moduleName, string description, Nullable<long> appId, Nullable<long> entityId, Nullable<long> userId, Nullable<long> moduleId, string searchText, string strFromDate, string strToDate, string tokenId, Nullable<int> pageCount)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var moduleNameParameter = moduleName != null ?
                new ObjectParameter("ModuleName", moduleName) :
                new ObjectParameter("ModuleName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(long));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var tokenIdParameter = tokenId != null ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(string));
    
            var pageCountParameter = pageCount.HasValue ?
                new ObjectParameter("PageCount", pageCount) :
                new ObjectParameter("PageCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_ModuleMaster", queryTypeParameter, moduleNameParameter, descriptionParameter, appIdParameter, entityIdParameter, userIdParameter, moduleIdParameter, searchTextParameter, strFromDateParameter, strToDateParameter, tokenIdParameter, pageCountParameter);
        }
    
        public virtual ObjectResult<Sp_NewUploadPhyscialResponse_Result> Sp_NewUploadPhyscialResponse(string queryType, string xmlValid, string xmlInValidate, Nullable<int> userID, Nullable<int> appID, Nullable<int> noOFRecords, Nullable<int> tUPRHID, string tCHID, string date)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var xmlValidParameter = xmlValid != null ?
                new ObjectParameter("XmlValid", xmlValid) :
                new ObjectParameter("XmlValid", typeof(string));
    
            var xmlInValidateParameter = xmlInValidate != null ?
                new ObjectParameter("XmlInValidate", xmlInValidate) :
                new ObjectParameter("XmlInValidate", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var noOFRecordsParameter = noOFRecords.HasValue ?
                new ObjectParameter("NoOFRecords", noOFRecords) :
                new ObjectParameter("NoOFRecords", typeof(int));
    
            var tUPRHIDParameter = tUPRHID.HasValue ?
                new ObjectParameter("TUPRHID", tUPRHID) :
                new ObjectParameter("TUPRHID", typeof(int));
    
            var tCHIDParameter = tCHID != null ?
                new ObjectParameter("TCHID", tCHID) :
                new ObjectParameter("TCHID", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_NewUploadPhyscialResponse_Result>("Sp_NewUploadPhyscialResponse", queryTypeParameter, xmlValidParameter, xmlInValidateParameter, userIDParameter, appIDParameter, noOFRecordsParameter, tUPRHIDParameter, tCHIDParameter, dateParameter);
        }
    
        public virtual int Sp_NPCIResponseFromService(string xmlXlData, string queryType, string appId)
        {
            var xmlXlDataParameter = xmlXlData != null ?
                new ObjectParameter("XmlXlData", xmlXlData) :
                new ObjectParameter("XmlXlData", typeof(string));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var appIdParameter = appId != null ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_NPCIResponseFromService", xmlXlDataParameter, queryTypeParameter, appIdParameter);
        }
    
        public virtual ObjectResult<sp_OTP_Result> sp_OTP(string queryType, Nullable<long> mandateId, string enachMessageId, string mobileNo, Nullable<long> mainMandateId, string oTP, string adharno, Nullable<long> userId, Nullable<long> entityId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var enachMessageIdParameter = enachMessageId != null ?
                new ObjectParameter("EnachMessageId", enachMessageId) :
                new ObjectParameter("EnachMessageId", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var mainMandateIdParameter = mainMandateId.HasValue ?
                new ObjectParameter("MainMandateId", mainMandateId) :
                new ObjectParameter("MainMandateId", typeof(long));
    
            var oTPParameter = oTP != null ?
                new ObjectParameter("OTP", oTP) :
                new ObjectParameter("OTP", typeof(string));
    
            var adharnoParameter = adharno != null ?
                new ObjectParameter("Adharno", adharno) :
                new ObjectParameter("Adharno", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_OTP_Result>("sp_OTP", queryTypeParameter, mandateIdParameter, enachMessageIdParameter, mobileNoParameter, mainMandateIdParameter, oTPParameter, adharnoParameter, userIdParameter, entityIdParameter);
        }
    
        public virtual ObjectResult<sp_Payment_Result> sp_Payment(string queryType, Nullable<long> userId, string beniACNo, string beniAcType, string beniAmount, string beniIFSC, string chkSum, Nullable<long> entityId, string filler1, string filler2, string type, string filler3, string filler4, string filler5, Nullable<long> mandateId, string merchantId, string messageCode, string remarks, Nullable<long> requestDateTime, string requestType, string traceNo, string bankRefNo, string beniName, string errorReason, string responseCode, string rRN, string msg, string paymentReqXml, string paymentResponseXML, Nullable<long> activityId, string iFSC, string tEUHID, Nullable<int> accountValCountPerDay, string msgId, string cnvId, string appId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var beniACNoParameter = beniACNo != null ?
                new ObjectParameter("BeniACNo", beniACNo) :
                new ObjectParameter("BeniACNo", typeof(string));
    
            var beniAcTypeParameter = beniAcType != null ?
                new ObjectParameter("BeniAcType", beniAcType) :
                new ObjectParameter("BeniAcType", typeof(string));
    
            var beniAmountParameter = beniAmount != null ?
                new ObjectParameter("BeniAmount", beniAmount) :
                new ObjectParameter("BeniAmount", typeof(string));
    
            var beniIFSCParameter = beniIFSC != null ?
                new ObjectParameter("BeniIFSC", beniIFSC) :
                new ObjectParameter("BeniIFSC", typeof(string));
    
            var chkSumParameter = chkSum != null ?
                new ObjectParameter("ChkSum", chkSum) :
                new ObjectParameter("ChkSum", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var filler1Parameter = filler1 != null ?
                new ObjectParameter("Filler1", filler1) :
                new ObjectParameter("Filler1", typeof(string));
    
            var filler2Parameter = filler2 != null ?
                new ObjectParameter("Filler2", filler2) :
                new ObjectParameter("Filler2", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var filler3Parameter = filler3 != null ?
                new ObjectParameter("Filler3", filler3) :
                new ObjectParameter("Filler3", typeof(string));
    
            var filler4Parameter = filler4 != null ?
                new ObjectParameter("Filler4", filler4) :
                new ObjectParameter("Filler4", typeof(string));
    
            var filler5Parameter = filler5 != null ?
                new ObjectParameter("Filler5", filler5) :
                new ObjectParameter("Filler5", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            var messageCodeParameter = messageCode != null ?
                new ObjectParameter("MessageCode", messageCode) :
                new ObjectParameter("MessageCode", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var requestDateTimeParameter = requestDateTime.HasValue ?
                new ObjectParameter("RequestDateTime", requestDateTime) :
                new ObjectParameter("RequestDateTime", typeof(long));
    
            var requestTypeParameter = requestType != null ?
                new ObjectParameter("RequestType", requestType) :
                new ObjectParameter("RequestType", typeof(string));
    
            var traceNoParameter = traceNo != null ?
                new ObjectParameter("TraceNo", traceNo) :
                new ObjectParameter("TraceNo", typeof(string));
    
            var bankRefNoParameter = bankRefNo != null ?
                new ObjectParameter("BankRefNo", bankRefNo) :
                new ObjectParameter("BankRefNo", typeof(string));
    
            var beniNameParameter = beniName != null ?
                new ObjectParameter("BeniName", beniName) :
                new ObjectParameter("BeniName", typeof(string));
    
            var errorReasonParameter = errorReason != null ?
                new ObjectParameter("ErrorReason", errorReason) :
                new ObjectParameter("ErrorReason", typeof(string));
    
            var responseCodeParameter = responseCode != null ?
                new ObjectParameter("ResponseCode", responseCode) :
                new ObjectParameter("ResponseCode", typeof(string));
    
            var rRNParameter = rRN != null ?
                new ObjectParameter("RRN", rRN) :
                new ObjectParameter("RRN", typeof(string));
    
            var msgParameter = msg != null ?
                new ObjectParameter("msg", msg) :
                new ObjectParameter("msg", typeof(string));
    
            var paymentReqXmlParameter = paymentReqXml != null ?
                new ObjectParameter("PaymentReqXml", paymentReqXml) :
                new ObjectParameter("PaymentReqXml", typeof(string));
    
            var paymentResponseXMLParameter = paymentResponseXML != null ?
                new ObjectParameter("PaymentResponseXML", paymentResponseXML) :
                new ObjectParameter("PaymentResponseXML", typeof(string));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(long));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var tEUHIDParameter = tEUHID != null ?
                new ObjectParameter("TEUHID", tEUHID) :
                new ObjectParameter("TEUHID", typeof(string));
    
            var accountValCountPerDayParameter = accountValCountPerDay.HasValue ?
                new ObjectParameter("AccountValCountPerDay", accountValCountPerDay) :
                new ObjectParameter("AccountValCountPerDay", typeof(int));
    
            var msgIdParameter = msgId != null ?
                new ObjectParameter("msgId", msgId) :
                new ObjectParameter("msgId", typeof(string));
    
            var cnvIdParameter = cnvId != null ?
                new ObjectParameter("cnvId", cnvId) :
                new ObjectParameter("cnvId", typeof(string));
    
            var appIdParameter = appId != null ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Payment_Result>("sp_Payment", queryTypeParameter, userIdParameter, beniACNoParameter, beniAcTypeParameter, beniAmountParameter, beniIFSCParameter, chkSumParameter, entityIdParameter, filler1Parameter, filler2Parameter, typeParameter, filler3Parameter, filler4Parameter, filler5Parameter, mandateIdParameter, merchantIdParameter, messageCodeParameter, remarksParameter, requestDateTimeParameter, requestTypeParameter, traceNoParameter, bankRefNoParameter, beniNameParameter, errorReasonParameter, responseCodeParameter, rRNParameter, msgParameter, paymentReqXmlParameter, paymentResponseXMLParameter, activityIdParameter, iFSCParameter, tEUHIDParameter, accountValCountPerDayParameter, msgIdParameter, cnvIdParameter, appIdParameter);
        }
    
        public virtual ObjectResult<Sp_PhysicalCancel_Result> Sp_PhysicalCancel(string queryType, Nullable<long> appId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_PhysicalCancel_Result>("Sp_PhysicalCancel", queryTypeParameter, appIdParameter);
        }
    
        public virtual ObjectResult<SP_PhysicalMandateRequestFile_Result> SP_PhysicalMandateRequestFile(string queryType, Nullable<long> userId, string xmlXlData, Nullable<long> count, string fileNo, string appId, string submitteddate, Nullable<long> database_id, string entityFilename, string corporateNo, string strTable, string linkedServerName, Nullable<long> tCHID)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var xmlXlDataParameter = xmlXlData != null ?
                new ObjectParameter("XmlXlData", xmlXlData) :
                new ObjectParameter("XmlXlData", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            var fileNoParameter = fileNo != null ?
                new ObjectParameter("FileNo", fileNo) :
                new ObjectParameter("FileNo", typeof(string));
    
            var appIdParameter = appId != null ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(string));
    
            var submitteddateParameter = submitteddate != null ?
                new ObjectParameter("Submitteddate", submitteddate) :
                new ObjectParameter("Submitteddate", typeof(string));
    
            var database_idParameter = database_id.HasValue ?
                new ObjectParameter("database_id", database_id) :
                new ObjectParameter("database_id", typeof(long));
    
            var entityFilenameParameter = entityFilename != null ?
                new ObjectParameter("EntityFilename", entityFilename) :
                new ObjectParameter("EntityFilename", typeof(string));
    
            var corporateNoParameter = corporateNo != null ?
                new ObjectParameter("CorporateNo", corporateNo) :
                new ObjectParameter("CorporateNo", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var linkedServerNameParameter = linkedServerName != null ?
                new ObjectParameter("LinkedServerName", linkedServerName) :
                new ObjectParameter("LinkedServerName", typeof(string));
    
            var tCHIDParameter = tCHID.HasValue ?
                new ObjectParameter("TCHID", tCHID) :
                new ObjectParameter("TCHID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PhysicalMandateRequestFile_Result>("SP_PhysicalMandateRequestFile", queryTypeParameter, userIdParameter, xmlXlDataParameter, countParameter, fileNoParameter, appIdParameter, submitteddateParameter, database_idParameter, entityFilenameParameter, corporateNoParameter, strTableParameter, linkedServerNameParameter, tCHIDParameter);
        }
    
        public virtual ObjectResult<SP_PhysicalMandateRequestFileMonthWise_Result> SP_PhysicalMandateRequestFileMonthWise(string queryType, Nullable<long> userId, string xmlXlData, Nullable<long> count, string fileNo, string appId, string submitteddate, string submittedTodate, Nullable<long> database_id, string entityFilename, string corporateNo, string strTable, string linkedServerName, Nullable<long> tCHID)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var xmlXlDataParameter = xmlXlData != null ?
                new ObjectParameter("XmlXlData", xmlXlData) :
                new ObjectParameter("XmlXlData", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            var fileNoParameter = fileNo != null ?
                new ObjectParameter("FileNo", fileNo) :
                new ObjectParameter("FileNo", typeof(string));
    
            var appIdParameter = appId != null ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(string));
    
            var submitteddateParameter = submitteddate != null ?
                new ObjectParameter("Submitteddate", submitteddate) :
                new ObjectParameter("Submitteddate", typeof(string));
    
            var submittedTodateParameter = submittedTodate != null ?
                new ObjectParameter("SubmittedTodate", submittedTodate) :
                new ObjectParameter("SubmittedTodate", typeof(string));
    
            var database_idParameter = database_id.HasValue ?
                new ObjectParameter("database_id", database_id) :
                new ObjectParameter("database_id", typeof(long));
    
            var entityFilenameParameter = entityFilename != null ?
                new ObjectParameter("EntityFilename", entityFilename) :
                new ObjectParameter("EntityFilename", typeof(string));
    
            var corporateNoParameter = corporateNo != null ?
                new ObjectParameter("CorporateNo", corporateNo) :
                new ObjectParameter("CorporateNo", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var linkedServerNameParameter = linkedServerName != null ?
                new ObjectParameter("LinkedServerName", linkedServerName) :
                new ObjectParameter("LinkedServerName", typeof(string));
    
            var tCHIDParameter = tCHID.HasValue ?
                new ObjectParameter("TCHID", tCHID) :
                new ObjectParameter("TCHID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PhysicalMandateRequestFileMonthWise_Result>("SP_PhysicalMandateRequestFileMonthWise", queryTypeParameter, userIdParameter, xmlXlDataParameter, countParameter, fileNoParameter, appIdParameter, submitteddateParameter, submittedTodateParameter, database_idParameter, entityFilenameParameter, corporateNoParameter, strTableParameter, linkedServerNameParameter, tCHIDParameter);
        }
    
        public virtual ObjectResult<Sp_PhysicalRegistered_Result> Sp_PhysicalRegistered(string queryType, Nullable<long> appId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_PhysicalRegistered_Result>("Sp_PhysicalRegistered", queryTypeParameter, appIdParameter);
        }
    
        public virtual int sp_PostmandateStatus(string queryType, string xmlXlData, string corporateName, Nullable<long> dBId, Nullable<long> year, Nullable<long> month)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var xmlXlDataParameter = xmlXlData != null ?
                new ObjectParameter("XmlXlData", xmlXlData) :
                new ObjectParameter("XmlXlData", typeof(string));
    
            var corporateNameParameter = corporateName != null ?
                new ObjectParameter("CorporateName", corporateName) :
                new ObjectParameter("CorporateName", typeof(string));
    
            var dBIdParameter = dBId.HasValue ?
                new ObjectParameter("DBId", dBId) :
                new ObjectParameter("DBId", typeof(long));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(long));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PostmandateStatus", queryTypeParameter, xmlXlDataParameter, corporateNameParameter, dBIdParameter, yearParameter, monthParameter);
        }
    
        public virtual int Sp_Presenment(string queryType, Nullable<long> appId, string bankName, Nullable<int> entityID, Nullable<int> userID, string refrence1, string uMRN, Nullable<System.DateTime> createdOn, string year, string fileno, string username, string presentmentDate, Nullable<System.DateTime> date, string xmlDimension, string customer1, string mandateId, Nullable<long> transheaderId, Nullable<int> bank_ID, string presDate, string sponsorBankId, string xmlUnSuccess)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var uMRNParameter = uMRN != null ?
                new ObjectParameter("UMRN", uMRN) :
                new ObjectParameter("UMRN", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var filenoParameter = fileno != null ?
                new ObjectParameter("Fileno", fileno) :
                new ObjectParameter("Fileno", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var presentmentDateParameter = presentmentDate != null ?
                new ObjectParameter("PresentmentDate", presentmentDate) :
                new ObjectParameter("PresentmentDate", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var customer1Parameter = customer1 != null ?
                new ObjectParameter("customer1", customer1) :
                new ObjectParameter("customer1", typeof(string));
    
            var mandateIdParameter = mandateId != null ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(string));
    
            var transheaderIdParameter = transheaderId.HasValue ?
                new ObjectParameter("TransheaderId", transheaderId) :
                new ObjectParameter("TransheaderId", typeof(long));
    
            var bank_IDParameter = bank_ID.HasValue ?
                new ObjectParameter("Bank_ID", bank_ID) :
                new ObjectParameter("Bank_ID", typeof(int));
    
            var presDateParameter = presDate != null ?
                new ObjectParameter("PresDate", presDate) :
                new ObjectParameter("PresDate", typeof(string));
    
            var sponsorBankIdParameter = sponsorBankId != null ?
                new ObjectParameter("SponsorBankId", sponsorBankId) :
                new ObjectParameter("SponsorBankId", typeof(string));
    
            var xmlUnSuccessParameter = xmlUnSuccess != null ?
                new ObjectParameter("XmlUnSuccess", xmlUnSuccess) :
                new ObjectParameter("XmlUnSuccess", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Presenment", queryTypeParameter, appIdParameter, bankNameParameter, entityIDParameter, userIDParameter, refrence1Parameter, uMRNParameter, createdOnParameter, yearParameter, filenoParameter, usernameParameter, presentmentDateParameter, dateParameter, xmlDimensionParameter, customer1Parameter, mandateIdParameter, transheaderIdParameter, bank_IDParameter, presDateParameter, sponsorBankIdParameter, xmlUnSuccessParameter);
        }
    
        public virtual int Sp_Presenment1(string queryType, Nullable<long> appId, string bankName, Nullable<int> entityID, Nullable<int> userID, string refrence1, string uMRN, Nullable<System.DateTime> createdOn, string year, string fileno, string username, string presentmentDate, Nullable<System.DateTime> date, string xmlDimension, string customer1, string mandateId, Nullable<long> transheaderId, Nullable<int> bank_ID, string presDate, string sponsorBankId, string xmlUnSuccess, Nullable<long> activityID, string activityNo, Nullable<int> type, Nullable<int> pageCount, string allUMRNValidation, Nullable<System.DateTime> preDate, string bankValue, string corAccountNo, string clientCodes, string utilityCode, string accountNumber, Nullable<long> totalProcess, string clientCode)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var uMRNParameter = uMRN != null ?
                new ObjectParameter("UMRN", uMRN) :
                new ObjectParameter("UMRN", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var filenoParameter = fileno != null ?
                new ObjectParameter("Fileno", fileno) :
                new ObjectParameter("Fileno", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var presentmentDateParameter = presentmentDate != null ?
                new ObjectParameter("PresentmentDate", presentmentDate) :
                new ObjectParameter("PresentmentDate", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var customer1Parameter = customer1 != null ?
                new ObjectParameter("customer1", customer1) :
                new ObjectParameter("customer1", typeof(string));
    
            var mandateIdParameter = mandateId != null ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(string));
    
            var transheaderIdParameter = transheaderId.HasValue ?
                new ObjectParameter("TransheaderId", transheaderId) :
                new ObjectParameter("TransheaderId", typeof(long));
    
            var bank_IDParameter = bank_ID.HasValue ?
                new ObjectParameter("Bank_ID", bank_ID) :
                new ObjectParameter("Bank_ID", typeof(int));
    
            var presDateParameter = presDate != null ?
                new ObjectParameter("PresDate", presDate) :
                new ObjectParameter("PresDate", typeof(string));
    
            var sponsorBankIdParameter = sponsorBankId != null ?
                new ObjectParameter("SponsorBankId", sponsorBankId) :
                new ObjectParameter("SponsorBankId", typeof(string));
    
            var xmlUnSuccessParameter = xmlUnSuccess != null ?
                new ObjectParameter("XmlUnSuccess", xmlUnSuccess) :
                new ObjectParameter("XmlUnSuccess", typeof(string));
    
            var activityIDParameter = activityID.HasValue ?
                new ObjectParameter("ActivityID", activityID) :
                new ObjectParameter("ActivityID", typeof(long));
    
            var activityNoParameter = activityNo != null ?
                new ObjectParameter("ActivityNo", activityNo) :
                new ObjectParameter("ActivityNo", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var pageCountParameter = pageCount.HasValue ?
                new ObjectParameter("PageCount", pageCount) :
                new ObjectParameter("PageCount", typeof(int));
    
            var allUMRNValidationParameter = allUMRNValidation != null ?
                new ObjectParameter("AllUMRNValidation", allUMRNValidation) :
                new ObjectParameter("AllUMRNValidation", typeof(string));
    
            var preDateParameter = preDate.HasValue ?
                new ObjectParameter("PreDate", preDate) :
                new ObjectParameter("PreDate", typeof(System.DateTime));
    
            var bankValueParameter = bankValue != null ?
                new ObjectParameter("BankValue", bankValue) :
                new ObjectParameter("BankValue", typeof(string));
    
            var corAccountNoParameter = corAccountNo != null ?
                new ObjectParameter("CorAccountNo", corAccountNo) :
                new ObjectParameter("CorAccountNo", typeof(string));
    
            var clientCodesParameter = clientCodes != null ?
                new ObjectParameter("ClientCodes", clientCodes) :
                new ObjectParameter("ClientCodes", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var totalProcessParameter = totalProcess.HasValue ?
                new ObjectParameter("TotalProcess", totalProcess) :
                new ObjectParameter("TotalProcess", typeof(long));
    
            var clientCodeParameter = clientCode != null ?
                new ObjectParameter("ClientCode", clientCode) :
                new ObjectParameter("ClientCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Presenment1", queryTypeParameter, appIdParameter, bankNameParameter, entityIDParameter, userIDParameter, refrence1Parameter, uMRNParameter, createdOnParameter, yearParameter, filenoParameter, usernameParameter, presentmentDateParameter, dateParameter, xmlDimensionParameter, customer1Parameter, mandateIdParameter, transheaderIdParameter, bank_IDParameter, presDateParameter, sponsorBankIdParameter, xmlUnSuccessParameter, activityIDParameter, activityNoParameter, typeParameter, pageCountParameter, allUMRNValidationParameter, preDateParameter, bankValueParameter, corAccountNoParameter, clientCodesParameter, utilityCodeParameter, accountNumberParameter, totalProcessParameter, clientCodeParameter);
        }
    
        public virtual int Sp_PresentMentWebApi(string queryType, Nullable<long> appId, string activityId, string fileNumber, string bankcode, string presentmentDate, Nullable<bool> activityType, Nullable<long> requestType, string sINGLEUMRN, string uMRNData, string enitityMarchantKey, Nullable<long> transheaderId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var activityIdParameter = activityId != null ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(string));
    
            var fileNumberParameter = fileNumber != null ?
                new ObjectParameter("FileNumber", fileNumber) :
                new ObjectParameter("FileNumber", typeof(string));
    
            var bankcodeParameter = bankcode != null ?
                new ObjectParameter("Bankcode", bankcode) :
                new ObjectParameter("Bankcode", typeof(string));
    
            var presentmentDateParameter = presentmentDate != null ?
                new ObjectParameter("PresentmentDate", presentmentDate) :
                new ObjectParameter("PresentmentDate", typeof(string));
    
            var activityTypeParameter = activityType.HasValue ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(bool));
    
            var requestTypeParameter = requestType.HasValue ?
                new ObjectParameter("RequestType", requestType) :
                new ObjectParameter("RequestType", typeof(long));
    
            var sINGLEUMRNParameter = sINGLEUMRN != null ?
                new ObjectParameter("SINGLEUMRN", sINGLEUMRN) :
                new ObjectParameter("SINGLEUMRN", typeof(string));
    
            var uMRNDataParameter = uMRNData != null ?
                new ObjectParameter("UMRNData", uMRNData) :
                new ObjectParameter("UMRNData", typeof(string));
    
            var enitityMarchantKeyParameter = enitityMarchantKey != null ?
                new ObjectParameter("EnitityMarchantKey", enitityMarchantKey) :
                new ObjectParameter("EnitityMarchantKey", typeof(string));
    
            var transheaderIdParameter = transheaderId.HasValue ?
                new ObjectParameter("TransheaderId", transheaderId) :
                new ObjectParameter("TransheaderId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_PresentMentWebApi", queryTypeParameter, appIdParameter, activityIdParameter, fileNumberParameter, bankcodeParameter, presentmentDateParameter, activityTypeParameter, requestTypeParameter, sINGLEUMRNParameter, uMRNDataParameter, enitityMarchantKeyParameter, transheaderIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_ProductMaster(string queryType, string productCode, string productName, Nullable<long> appId, Nullable<long> entityId, Nullable<long> userId, Nullable<long> productId, string searchText, string strFromDate, string strToDate, string tokenId, Nullable<int> pageCount)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(long));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var tokenIdParameter = tokenId != null ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(string));
    
            var pageCountParameter = pageCount.HasValue ?
                new ObjectParameter("PageCount", pageCount) :
                new ObjectParameter("PageCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_ProductMaster", queryTypeParameter, productCodeParameter, productNameParameter, appIdParameter, entityIdParameter, userIdParameter, productIdParameter, searchTextParameter, strFromDateParameter, strToDateParameter, tokenIdParameter, pageCountParameter);
        }
    
        public virtual ObjectResult<sp_QbackRequest_Result> sp_QbackRequest(string queryType, Nullable<long> userId, string beniACNo, string beniAcType, string beniAmount, string beniIFSC, string chkSum, Nullable<long> entityId, string type, Nullable<long> mandateId, string merchantId, string messageCode, string remarks, Nullable<long> requestDateTime, string requestType, string traceNo, string oldTraceNo, string bankRefNo, string beniName, string errorReason, string responseCode, string rRN, string msg, string paymentReqXml, string paymentResponseXML, Nullable<long> activityId, Nullable<long> oldActivityId, string iFSC, string activityName, Nullable<decimal> amount, string authzStatus, string responseDesc)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var beniACNoParameter = beniACNo != null ?
                new ObjectParameter("BeniACNo", beniACNo) :
                new ObjectParameter("BeniACNo", typeof(string));
    
            var beniAcTypeParameter = beniAcType != null ?
                new ObjectParameter("BeniAcType", beniAcType) :
                new ObjectParameter("BeniAcType", typeof(string));
    
            var beniAmountParameter = beniAmount != null ?
                new ObjectParameter("BeniAmount", beniAmount) :
                new ObjectParameter("BeniAmount", typeof(string));
    
            var beniIFSCParameter = beniIFSC != null ?
                new ObjectParameter("BeniIFSC", beniIFSC) :
                new ObjectParameter("BeniIFSC", typeof(string));
    
            var chkSumParameter = chkSum != null ?
                new ObjectParameter("ChkSum", chkSum) :
                new ObjectParameter("ChkSum", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            var messageCodeParameter = messageCode != null ?
                new ObjectParameter("MessageCode", messageCode) :
                new ObjectParameter("MessageCode", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var requestDateTimeParameter = requestDateTime.HasValue ?
                new ObjectParameter("RequestDateTime", requestDateTime) :
                new ObjectParameter("RequestDateTime", typeof(long));
    
            var requestTypeParameter = requestType != null ?
                new ObjectParameter("RequestType", requestType) :
                new ObjectParameter("RequestType", typeof(string));
    
            var traceNoParameter = traceNo != null ?
                new ObjectParameter("TraceNo", traceNo) :
                new ObjectParameter("TraceNo", typeof(string));
    
            var oldTraceNoParameter = oldTraceNo != null ?
                new ObjectParameter("OldTraceNo", oldTraceNo) :
                new ObjectParameter("OldTraceNo", typeof(string));
    
            var bankRefNoParameter = bankRefNo != null ?
                new ObjectParameter("BankRefNo", bankRefNo) :
                new ObjectParameter("BankRefNo", typeof(string));
    
            var beniNameParameter = beniName != null ?
                new ObjectParameter("BeniName", beniName) :
                new ObjectParameter("BeniName", typeof(string));
    
            var errorReasonParameter = errorReason != null ?
                new ObjectParameter("ErrorReason", errorReason) :
                new ObjectParameter("ErrorReason", typeof(string));
    
            var responseCodeParameter = responseCode != null ?
                new ObjectParameter("ResponseCode", responseCode) :
                new ObjectParameter("ResponseCode", typeof(string));
    
            var rRNParameter = rRN != null ?
                new ObjectParameter("RRN", rRN) :
                new ObjectParameter("RRN", typeof(string));
    
            var msgParameter = msg != null ?
                new ObjectParameter("msg", msg) :
                new ObjectParameter("msg", typeof(string));
    
            var paymentReqXmlParameter = paymentReqXml != null ?
                new ObjectParameter("PaymentReqXml", paymentReqXml) :
                new ObjectParameter("PaymentReqXml", typeof(string));
    
            var paymentResponseXMLParameter = paymentResponseXML != null ?
                new ObjectParameter("PaymentResponseXML", paymentResponseXML) :
                new ObjectParameter("PaymentResponseXML", typeof(string));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(long));
    
            var oldActivityIdParameter = oldActivityId.HasValue ?
                new ObjectParameter("oldActivityId", oldActivityId) :
                new ObjectParameter("oldActivityId", typeof(long));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var activityNameParameter = activityName != null ?
                new ObjectParameter("ActivityName", activityName) :
                new ObjectParameter("ActivityName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var authzStatusParameter = authzStatus != null ?
                new ObjectParameter("AuthzStatus", authzStatus) :
                new ObjectParameter("AuthzStatus", typeof(string));
    
            var responseDescParameter = responseDesc != null ?
                new ObjectParameter("ResponseDesc", responseDesc) :
                new ObjectParameter("ResponseDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_QbackRequest_Result>("sp_QbackRequest", queryTypeParameter, userIdParameter, beniACNoParameter, beniAcTypeParameter, beniAmountParameter, beniIFSCParameter, chkSumParameter, entityIdParameter, typeParameter, mandateIdParameter, merchantIdParameter, messageCodeParameter, remarksParameter, requestDateTimeParameter, requestTypeParameter, traceNoParameter, oldTraceNoParameter, bankRefNoParameter, beniNameParameter, errorReasonParameter, responseCodeParameter, rRNParameter, msgParameter, paymentReqXmlParameter, paymentResponseXMLParameter, activityIdParameter, oldActivityIdParameter, iFSCParameter, activityNameParameter, amountParameter, authzStatusParameter, responseDescParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_RegionalManagerMaster(string queryType, Nullable<long> entityId, Nullable<long> userId, string employeeCode, string name, string email, string phone, string address, string branchAddress, Nullable<long> rMMId, Nullable<long> bank, Nullable<long> subMemberBank, string tokenId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var branchAddressParameter = branchAddress != null ?
                new ObjectParameter("BranchAddress", branchAddress) :
                new ObjectParameter("BranchAddress", typeof(string));
    
            var rMMIdParameter = rMMId.HasValue ?
                new ObjectParameter("RMMId", rMMId) :
                new ObjectParameter("RMMId", typeof(long));
    
            var bankParameter = bank.HasValue ?
                new ObjectParameter("Bank", bank) :
                new ObjectParameter("Bank", typeof(long));
    
            var subMemberBankParameter = subMemberBank.HasValue ?
                new ObjectParameter("SubMemberBank", subMemberBank) :
                new ObjectParameter("SubMemberBank", typeof(long));
    
            var tokenIdParameter = tokenId != null ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_RegionalManagerMaster", queryTypeParameter, entityIdParameter, userIdParameter, employeeCodeParameter, nameParameter, emailParameter, phoneParameter, addressParameter, branchAddressParameter, rMMIdParameter, bankParameter, subMemberBankParameter, tokenIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_RegionMaster(string queryType, string regionCode, string regionName, string stateId, Nullable<long> appId, Nullable<long> entityId, Nullable<long> userId, Nullable<long> regionId, string searchText, Nullable<int> pageCount, string strFromDate, string strToDate, string tokenId, string strTable)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var regionCodeParameter = regionCode != null ?
                new ObjectParameter("RegionCode", regionCode) :
                new ObjectParameter("RegionCode", typeof(string));
    
            var regionNameParameter = regionName != null ?
                new ObjectParameter("RegionName", regionName) :
                new ObjectParameter("RegionName", typeof(string));
    
            var stateIdParameter = stateId != null ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("RegionId", regionId) :
                new ObjectParameter("RegionId", typeof(long));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pageCountParameter = pageCount.HasValue ?
                new ObjectParameter("PageCount", pageCount) :
                new ObjectParameter("PageCount", typeof(int));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var tokenIdParameter = tokenId != null ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_RegionMaster", queryTypeParameter, regionCodeParameter, regionNameParameter, stateIdParameter, appIdParameter, entityIdParameter, userIdParameter, regionIdParameter, searchTextParameter, pageCountParameter, strFromDateParameter, strToDateParameter, tokenIdParameter, strTableParameter);
        }
    
        public virtual int SP_Report(string queryType, Nullable<long> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<long> ddlUserId, Nullable<long> appID, string corporateName, Nullable<int> dBID, Nullable<long> reportMapID, Nullable<int> month, Nullable<int> year, string mandateType, string reportMapDate)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var ddlUserIdParameter = ddlUserId.HasValue ?
                new ObjectParameter("ddlUserId", ddlUserId) :
                new ObjectParameter("ddlUserId", typeof(long));
    
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(long));
    
            var corporateNameParameter = corporateName != null ?
                new ObjectParameter("CorporateName", corporateName) :
                new ObjectParameter("CorporateName", typeof(string));
    
            var dBIDParameter = dBID.HasValue ?
                new ObjectParameter("DBID", dBID) :
                new ObjectParameter("DBID", typeof(int));
    
            var reportMapIDParameter = reportMapID.HasValue ?
                new ObjectParameter("ReportMapID", reportMapID) :
                new ObjectParameter("ReportMapID", typeof(long));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var mandateTypeParameter = mandateType != null ?
                new ObjectParameter("MandateType", mandateType) :
                new ObjectParameter("MandateType", typeof(string));
    
            var reportMapDateParameter = reportMapDate != null ?
                new ObjectParameter("ReportMapDate", reportMapDate) :
                new ObjectParameter("ReportMapDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Report", queryTypeParameter, userIdParameter, fromDateParameter, toDateParameter, ddlUserIdParameter, appIDParameter, corporateNameParameter, dBIDParameter, reportMapIDParameter, monthParameter, yearParameter, mandateTypeParameter, reportMapDateParameter);
        }
    
        public virtual ObjectResult<Sp_RMMaster_Result> Sp_RMMaster(string queryType, Nullable<long> rMId, string employeeCode, string name, string email, string phone, string address, string branchAddress, Nullable<long> bankId, Nullable<long> submemberBankid, Nullable<long> appId, Nullable<long> entityId, Nullable<long> createdBy, string searchText, Nullable<long> userId, Nullable<int> pageCount, string strFromDate, string tokenId, string strToDate)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var rMIdParameter = rMId.HasValue ?
                new ObjectParameter("RMId", rMId) :
                new ObjectParameter("RMId", typeof(long));
    
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var branchAddressParameter = branchAddress != null ?
                new ObjectParameter("BranchAddress", branchAddress) :
                new ObjectParameter("BranchAddress", typeof(string));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(long));
    
            var submemberBankidParameter = submemberBankid.HasValue ?
                new ObjectParameter("SubmemberBankid", submemberBankid) :
                new ObjectParameter("SubmemberBankid", typeof(long));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var pageCountParameter = pageCount.HasValue ?
                new ObjectParameter("PageCount", pageCount) :
                new ObjectParameter("PageCount", typeof(int));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var tokenIdParameter = tokenId != null ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_RMMaster_Result>("Sp_RMMaster", queryTypeParameter, rMIdParameter, employeeCodeParameter, nameParameter, emailParameter, phoneParameter, addressParameter, branchAddressParameter, bankIdParameter, submemberBankidParameter, appIdParameter, entityIdParameter, createdByParameter, searchTextParameter, userIdParameter, pageCountParameter, strFromDateParameter, tokenIdParameter, strToDateParameter);
        }
    
        public virtual ObjectResult<Sp_SelectForChangeRefrence_Result> Sp_SelectForChangeRefrence(string refrence1)
        {
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_SelectForChangeRefrence_Result>("Sp_SelectForChangeRefrence", refrence1Parameter);
        }
    
        public virtual ObjectResult<string> Sp_SelectForMobileRefrence(string phoneNumber)
        {
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_SelectForMobileRefrence", phoneNumberParameter);
        }
    
        public virtual ObjectResult<Sp_SelectForPhysical_Result> Sp_SelectForPhysical(Nullable<int> mandateId)
        {
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_SelectForPhysical_Result>("Sp_SelectForPhysical", mandateIdParameter);
        }
    
        public virtual int Sp_SendEmail(string queryType, string mandateId, string refNo, string fromMail, string toMail, string isSent, string reason, Nullable<long> emailCount, Nullable<long> smsCount, string activity, string webAppUrl, string encodedMandateID, string encodedRefNo, string messageRequestId, Nullable<long> sMSLength, string insert_MandateID_BulkSMS_xml, Nullable<long> userId, Nullable<long> appId, string encodedAppId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var mandateIdParameter = mandateId != null ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(string));
    
            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));
    
            var fromMailParameter = fromMail != null ?
                new ObjectParameter("FromMail", fromMail) :
                new ObjectParameter("FromMail", typeof(string));
    
            var toMailParameter = toMail != null ?
                new ObjectParameter("ToMail", toMail) :
                new ObjectParameter("ToMail", typeof(string));
    
            var isSentParameter = isSent != null ?
                new ObjectParameter("IsSent", isSent) :
                new ObjectParameter("IsSent", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var emailCountParameter = emailCount.HasValue ?
                new ObjectParameter("EmailCount", emailCount) :
                new ObjectParameter("EmailCount", typeof(long));
    
            var smsCountParameter = smsCount.HasValue ?
                new ObjectParameter("SmsCount", smsCount) :
                new ObjectParameter("SmsCount", typeof(long));
    
            var activityParameter = activity != null ?
                new ObjectParameter("Activity", activity) :
                new ObjectParameter("Activity", typeof(string));
    
            var webAppUrlParameter = webAppUrl != null ?
                new ObjectParameter("WebAppUrl", webAppUrl) :
                new ObjectParameter("WebAppUrl", typeof(string));
    
            var encodedMandateIDParameter = encodedMandateID != null ?
                new ObjectParameter("EncodedMandateID", encodedMandateID) :
                new ObjectParameter("EncodedMandateID", typeof(string));
    
            var encodedRefNoParameter = encodedRefNo != null ?
                new ObjectParameter("EncodedRefNo", encodedRefNo) :
                new ObjectParameter("EncodedRefNo", typeof(string));
    
            var messageRequestIdParameter = messageRequestId != null ?
                new ObjectParameter("MessageRequestId", messageRequestId) :
                new ObjectParameter("MessageRequestId", typeof(string));
    
            var sMSLengthParameter = sMSLength.HasValue ?
                new ObjectParameter("SMSLength", sMSLength) :
                new ObjectParameter("SMSLength", typeof(long));
    
            var insert_MandateID_BulkSMS_xmlParameter = insert_MandateID_BulkSMS_xml != null ?
                new ObjectParameter("Insert_MandateID_BulkSMS_xml", insert_MandateID_BulkSMS_xml) :
                new ObjectParameter("Insert_MandateID_BulkSMS_xml", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var encodedAppIdParameter = encodedAppId != null ?
                new ObjectParameter("EncodedAppId", encodedAppId) :
                new ObjectParameter("EncodedAppId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_SendEmail", queryTypeParameter, mandateIdParameter, refNoParameter, fromMailParameter, toMailParameter, isSentParameter, reasonParameter, emailCountParameter, smsCountParameter, activityParameter, webAppUrlParameter, encodedMandateIDParameter, encodedRefNoParameter, messageRequestIdParameter, sMSLengthParameter, insert_MandateID_BulkSMS_xmlParameter, userIdParameter, appIdParameter, encodedAppIdParameter);
        }
    
        public virtual int sp_ServiceLog(string logDescription)
        {
            var logDescriptionParameter = logDescription != null ?
                new ObjectParameter("LogDescription", logDescription) :
                new ObjectParameter("LogDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ServiceLog", logDescriptionParameter);
        }
    
        public virtual ObjectResult<Sp_ServiceMaster_Result> Sp_ServiceMaster(string queryType, Nullable<long> entityId, Nullable<long> userId, string serviceName, string serviceCode, string description, string tokenId, Nullable<long> serMasterId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var serviceNameParameter = serviceName != null ?
                new ObjectParameter("ServiceName", serviceName) :
                new ObjectParameter("ServiceName", typeof(string));
    
            var serviceCodeParameter = serviceCode != null ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var tokenIdParameter = tokenId != null ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(string));
    
            var serMasterIdParameter = serMasterId.HasValue ?
                new ObjectParameter("SerMasterId", serMasterId) :
                new ObjectParameter("SerMasterId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_ServiceMaster_Result>("Sp_ServiceMaster", queryTypeParameter, entityIdParameter, userIdParameter, serviceNameParameter, serviceCodeParameter, descriptionParameter, tokenIdParameter, serMasterIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_SetupMaster(string queryType, string stateCode, string stateName, string holidayDate, string holidayName, string segmentCode, string segmentName, string segmentDescription, string searchText, Nullable<long> userId, Nullable<long> entityId, string appId, Nullable<long> hID, Nullable<long> stateId, Nullable<long> segmentId, Nullable<long> iD, string chkactive, string bank, string ifsc, Nullable<double> micr, string branch, Nullable<int> pageCount, string tokenId, string maxQuery, Nullable<int> records, Nullable<int> tOP, string strFromDate, string strToDate, Nullable<double> bankId, Nullable<long> parentBankId, string emp_Code, string email, string phone, string address, string branchAddress, string emp_Name, Nullable<long> subMemberBankId, string xmlDimension)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var stateCodeParameter = stateCode != null ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(string));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var holidayDateParameter = holidayDate != null ?
                new ObjectParameter("HolidayDate", holidayDate) :
                new ObjectParameter("HolidayDate", typeof(string));
    
            var holidayNameParameter = holidayName != null ?
                new ObjectParameter("HolidayName", holidayName) :
                new ObjectParameter("HolidayName", typeof(string));
    
            var segmentCodeParameter = segmentCode != null ?
                new ObjectParameter("SegmentCode", segmentCode) :
                new ObjectParameter("SegmentCode", typeof(string));
    
            var segmentNameParameter = segmentName != null ?
                new ObjectParameter("SegmentName", segmentName) :
                new ObjectParameter("SegmentName", typeof(string));
    
            var segmentDescriptionParameter = segmentDescription != null ?
                new ObjectParameter("SegmentDescription", segmentDescription) :
                new ObjectParameter("SegmentDescription", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var appIdParameter = appId != null ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(string));
    
            var hIDParameter = hID.HasValue ?
                new ObjectParameter("HID", hID) :
                new ObjectParameter("HID", typeof(long));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(long));
    
            var segmentIdParameter = segmentId.HasValue ?
                new ObjectParameter("SegmentId", segmentId) :
                new ObjectParameter("SegmentId", typeof(long));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var chkactiveParameter = chkactive != null ?
                new ObjectParameter("chkactive", chkactive) :
                new ObjectParameter("chkactive", typeof(string));
    
            var bankParameter = bank != null ?
                new ObjectParameter("Bank", bank) :
                new ObjectParameter("Bank", typeof(string));
    
            var ifscParameter = ifsc != null ?
                new ObjectParameter("Ifsc", ifsc) :
                new ObjectParameter("Ifsc", typeof(string));
    
            var micrParameter = micr.HasValue ?
                new ObjectParameter("Micr", micr) :
                new ObjectParameter("Micr", typeof(double));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var pageCountParameter = pageCount.HasValue ?
                new ObjectParameter("PageCount", pageCount) :
                new ObjectParameter("PageCount", typeof(int));
    
            var tokenIdParameter = tokenId != null ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(string));
    
            var maxQueryParameter = maxQuery != null ?
                new ObjectParameter("maxQuery", maxQuery) :
                new ObjectParameter("maxQuery", typeof(string));
    
            var recordsParameter = records.HasValue ?
                new ObjectParameter("Records", records) :
                new ObjectParameter("Records", typeof(int));
    
            var tOPParameter = tOP.HasValue ?
                new ObjectParameter("TOP", tOP) :
                new ObjectParameter("TOP", typeof(int));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(double));
    
            var parentBankIdParameter = parentBankId.HasValue ?
                new ObjectParameter("ParentBankId", parentBankId) :
                new ObjectParameter("ParentBankId", typeof(long));
    
            var emp_CodeParameter = emp_Code != null ?
                new ObjectParameter("Emp_Code", emp_Code) :
                new ObjectParameter("Emp_Code", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var branchAddressParameter = branchAddress != null ?
                new ObjectParameter("BranchAddress", branchAddress) :
                new ObjectParameter("BranchAddress", typeof(string));
    
            var emp_NameParameter = emp_Name != null ?
                new ObjectParameter("Emp_Name", emp_Name) :
                new ObjectParameter("Emp_Name", typeof(string));
    
            var subMemberBankIdParameter = subMemberBankId.HasValue ?
                new ObjectParameter("SubMemberBankId", subMemberBankId) :
                new ObjectParameter("SubMemberBankId", typeof(long));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_SetupMaster", queryTypeParameter, stateCodeParameter, stateNameParameter, holidayDateParameter, holidayNameParameter, segmentCodeParameter, segmentNameParameter, segmentDescriptionParameter, searchTextParameter, userIdParameter, entityIdParameter, appIdParameter, hIDParameter, stateIdParameter, segmentIdParameter, iDParameter, chkactiveParameter, bankParameter, ifscParameter, micrParameter, branchParameter, pageCountParameter, tokenIdParameter, maxQueryParameter, recordsParameter, tOPParameter, strFromDateParameter, strToDateParameter, bankIdParameter, parentBankIdParameter, emp_CodeParameter, emailParameter, phoneParameter, addressParameter, branchAddressParameter, emp_NameParameter, subMemberBankIdParameter, xmlDimensionParameter);
        }
    
        public virtual ObjectResult<string> Sp_SingleMandateBulkImgageSingleDataEntry(string queryType, Nullable<long> entityId, string debitType, string frequency, Nullable<long> userId, string toDebit, string acNo, string bankName, string iFSC, Nullable<double> mICR, Nullable<long> netBanking, Nullable<long> debitCard, string amountRupees, string qRCodeImagepath, string refrence1, string refrence2, string addr1, string phNumber, string emailId, string from, string to, Nullable<long> mandateId, string description, string status, string nach, string rupees, string customer1, string customer2, string customer3, string dateOnMandate, string tIPPath, string pNGPath, string utilityCode, string sponsorCode, string strFromDate, string strToDate, string strTable, string paymentDataX, string xmlMandate, string filePath, Nullable<long> activityId, string typeData, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string rejectedReason, string fullbankBranch, Nullable<long> bankValidationAdminCount, Nullable<long> bankValidationUserCount, Nullable<long> acValidationAdminCount, Nullable<long> acValidationUserCount, string mandateMode, string amountWords, string sponsorBankCode, Nullable<bool> iSPhysical, Nullable<bool> isEnach, Nullable<long> appId, Nullable<int> topVal, string tEUHID, string activityType, string categoryCode, Nullable<long> id, Nullable<long> mandateReverseId, Nullable<bool> isOnUs, string activityName)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var debitTypeParameter = debitType != null ?
                new ObjectParameter("DebitType", debitType) :
                new ObjectParameter("DebitType", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var toDebitParameter = toDebit != null ?
                new ObjectParameter("ToDebit", toDebit) :
                new ObjectParameter("ToDebit", typeof(string));
    
            var acNoParameter = acNo != null ?
                new ObjectParameter("AcNo", acNo) :
                new ObjectParameter("AcNo", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var mICRParameter = mICR.HasValue ?
                new ObjectParameter("MICR", mICR) :
                new ObjectParameter("MICR", typeof(double));
    
            var netBankingParameter = netBanking.HasValue ?
                new ObjectParameter("NetBanking", netBanking) :
                new ObjectParameter("NetBanking", typeof(long));
    
            var debitCardParameter = debitCard.HasValue ?
                new ObjectParameter("DebitCard", debitCard) :
                new ObjectParameter("DebitCard", typeof(long));
    
            var amountRupeesParameter = amountRupees != null ?
                new ObjectParameter("AmountRupees", amountRupees) :
                new ObjectParameter("AmountRupees", typeof(string));
    
            var qRCodeImagepathParameter = qRCodeImagepath != null ?
                new ObjectParameter("QRCodeImagepath", qRCodeImagepath) :
                new ObjectParameter("QRCodeImagepath", typeof(string));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var refrence2Parameter = refrence2 != null ?
                new ObjectParameter("Refrence2", refrence2) :
                new ObjectParameter("Refrence2", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var phNumberParameter = phNumber != null ?
                new ObjectParameter("PhNumber", phNumber) :
                new ObjectParameter("PhNumber", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var nachParameter = nach != null ?
                new ObjectParameter("Nach", nach) :
                new ObjectParameter("Nach", typeof(string));
    
            var rupeesParameter = rupees != null ?
                new ObjectParameter("Rupees", rupees) :
                new ObjectParameter("Rupees", typeof(string));
    
            var customer1Parameter = customer1 != null ?
                new ObjectParameter("Customer1", customer1) :
                new ObjectParameter("Customer1", typeof(string));
    
            var customer2Parameter = customer2 != null ?
                new ObjectParameter("Customer2", customer2) :
                new ObjectParameter("Customer2", typeof(string));
    
            var customer3Parameter = customer3 != null ?
                new ObjectParameter("Customer3", customer3) :
                new ObjectParameter("Customer3", typeof(string));
    
            var dateOnMandateParameter = dateOnMandate != null ?
                new ObjectParameter("DateOnMandate", dateOnMandate) :
                new ObjectParameter("DateOnMandate", typeof(string));
    
            var tIPPathParameter = tIPPath != null ?
                new ObjectParameter("TIPPath", tIPPath) :
                new ObjectParameter("TIPPath", typeof(string));
    
            var pNGPathParameter = pNGPath != null ?
                new ObjectParameter("PNGPath", pNGPath) :
                new ObjectParameter("PNGPath", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var sponsorCodeParameter = sponsorCode != null ?
                new ObjectParameter("SponsorCode", sponsorCode) :
                new ObjectParameter("SponsorCode", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var paymentDataXParameter = paymentDataX != null ?
                new ObjectParameter("PaymentDataX", paymentDataX) :
                new ObjectParameter("PaymentDataX", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(long));
    
            var typeDataParameter = typeData != null ?
                new ObjectParameter("TypeData", typeData) :
                new ObjectParameter("TypeData", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var rejectedReasonParameter = rejectedReason != null ?
                new ObjectParameter("RejectedReason", rejectedReason) :
                new ObjectParameter("RejectedReason", typeof(string));
    
            var fullbankBranchParameter = fullbankBranch != null ?
                new ObjectParameter("fullbankBranch", fullbankBranch) :
                new ObjectParameter("fullbankBranch", typeof(string));
    
            var bankValidationAdminCountParameter = bankValidationAdminCount.HasValue ?
                new ObjectParameter("BankValidationAdminCount", bankValidationAdminCount) :
                new ObjectParameter("BankValidationAdminCount", typeof(long));
    
            var bankValidationUserCountParameter = bankValidationUserCount.HasValue ?
                new ObjectParameter("BankValidationUserCount", bankValidationUserCount) :
                new ObjectParameter("BankValidationUserCount", typeof(long));
    
            var acValidationAdminCountParameter = acValidationAdminCount.HasValue ?
                new ObjectParameter("AcValidationAdminCount", acValidationAdminCount) :
                new ObjectParameter("AcValidationAdminCount", typeof(long));
    
            var acValidationUserCountParameter = acValidationUserCount.HasValue ?
                new ObjectParameter("AcValidationUserCount", acValidationUserCount) :
                new ObjectParameter("AcValidationUserCount", typeof(long));
    
            var mandateModeParameter = mandateMode != null ?
                new ObjectParameter("MandateMode", mandateMode) :
                new ObjectParameter("MandateMode", typeof(string));
    
            var amountWordsParameter = amountWords != null ?
                new ObjectParameter("AmountWords", amountWords) :
                new ObjectParameter("AmountWords", typeof(string));
    
            var sponsorBankCodeParameter = sponsorBankCode != null ?
                new ObjectParameter("SponsorBankCode", sponsorBankCode) :
                new ObjectParameter("SponsorBankCode", typeof(string));
    
            var iSPhysicalParameter = iSPhysical.HasValue ?
                new ObjectParameter("ISPhysical", iSPhysical) :
                new ObjectParameter("ISPhysical", typeof(bool));
    
            var isEnachParameter = isEnach.HasValue ?
                new ObjectParameter("IsEnach", isEnach) :
                new ObjectParameter("IsEnach", typeof(bool));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var tEUHIDParameter = tEUHID != null ?
                new ObjectParameter("TEUHID", tEUHID) :
                new ObjectParameter("TEUHID", typeof(string));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var categoryCodeParameter = categoryCode != null ?
                new ObjectParameter("CategoryCode", categoryCode) :
                new ObjectParameter("CategoryCode", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var mandateReverseIdParameter = mandateReverseId.HasValue ?
                new ObjectParameter("MandateReverseId", mandateReverseId) :
                new ObjectParameter("MandateReverseId", typeof(long));
    
            var isOnUsParameter = isOnUs.HasValue ?
                new ObjectParameter("IsOnUs", isOnUs) :
                new ObjectParameter("IsOnUs", typeof(bool));
    
            var activityNameParameter = activityName != null ?
                new ObjectParameter("ActivityName", activityName) :
                new ObjectParameter("ActivityName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_SingleMandateBulkImgageSingleDataEntry", queryTypeParameter, entityIdParameter, debitTypeParameter, frequencyParameter, userIdParameter, toDebitParameter, acNoParameter, bankNameParameter, iFSCParameter, mICRParameter, netBankingParameter, debitCardParameter, amountRupeesParameter, qRCodeImagepathParameter, refrence1Parameter, refrence2Parameter, addr1Parameter, phNumberParameter, emailIdParameter, fromParameter, toParameter, mandateIdParameter, descriptionParameter, statusParameter, nachParameter, rupeesParameter, customer1Parameter, customer2Parameter, customer3Parameter, dateOnMandateParameter, tIPPathParameter, pNGPathParameter, utilityCodeParameter, sponsorCodeParameter, strFromDateParameter, strToDateParameter, strTableParameter, paymentDataXParameter, xmlMandateParameter, filePathParameter, activityIdParameter, typeDataParameter, fromDateParameter, toDateParameter, rejectedReasonParameter, fullbankBranchParameter, bankValidationAdminCountParameter, bankValidationUserCountParameter, acValidationAdminCountParameter, acValidationUserCountParameter, mandateModeParameter, amountWordsParameter, sponsorBankCodeParameter, iSPhysicalParameter, isEnachParameter, appIdParameter, topValParameter, tEUHIDParameter, activityTypeParameter, categoryCodeParameter, idParameter, mandateReverseIdParameter, isOnUsParameter, activityNameParameter);
        }
    
        public virtual ObjectResult<string> Sp_SingleMandateNEW(string queryType, Nullable<long> entityId, string debitType, string frequency, Nullable<long> userId, string toDebit, string acNo, string bankName, string iFSC, Nullable<double> mICR, Nullable<long> netBanking, Nullable<long> debitCard, string amountRupees, string qRCodeImagepath, string refrence1, string refrence2, string addr1, string phNumber, string emailId, string from, string to, Nullable<long> mandateId, string description, string status, string nach, string rupees, string customer1, string customer2, string customer3, string dateOnMandate, string tIPPath, string pNGPath, string utilityCode, string sponsorCode, string strFromDate, string strToDate, string strTable, string paymentDataX, string xmlMandate, string filePath, Nullable<long> activityId, string typeData, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string rejectedReason, string fullbankBranch, Nullable<long> bankValidationAdminCount, Nullable<long> bankValidationUserCount, Nullable<long> acValidationAdminCount, Nullable<long> acValidationUserCount, string mandateMode, string amountWords, string sponsorBankCode, Nullable<bool> iSPhysical, Nullable<bool> isEnach, Nullable<long> appId, Nullable<int> topVal, string tEUHID, string activityType, string categoryCode, Nullable<long> id, Nullable<long> mandateReverseId, Nullable<bool> isOnUs, string activityName)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var debitTypeParameter = debitType != null ?
                new ObjectParameter("DebitType", debitType) :
                new ObjectParameter("DebitType", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var toDebitParameter = toDebit != null ?
                new ObjectParameter("ToDebit", toDebit) :
                new ObjectParameter("ToDebit", typeof(string));
    
            var acNoParameter = acNo != null ?
                new ObjectParameter("AcNo", acNo) :
                new ObjectParameter("AcNo", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var mICRParameter = mICR.HasValue ?
                new ObjectParameter("MICR", mICR) :
                new ObjectParameter("MICR", typeof(double));
    
            var netBankingParameter = netBanking.HasValue ?
                new ObjectParameter("NetBanking", netBanking) :
                new ObjectParameter("NetBanking", typeof(long));
    
            var debitCardParameter = debitCard.HasValue ?
                new ObjectParameter("DebitCard", debitCard) :
                new ObjectParameter("DebitCard", typeof(long));
    
            var amountRupeesParameter = amountRupees != null ?
                new ObjectParameter("AmountRupees", amountRupees) :
                new ObjectParameter("AmountRupees", typeof(string));
    
            var qRCodeImagepathParameter = qRCodeImagepath != null ?
                new ObjectParameter("QRCodeImagepath", qRCodeImagepath) :
                new ObjectParameter("QRCodeImagepath", typeof(string));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var refrence2Parameter = refrence2 != null ?
                new ObjectParameter("Refrence2", refrence2) :
                new ObjectParameter("Refrence2", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var phNumberParameter = phNumber != null ?
                new ObjectParameter("PhNumber", phNumber) :
                new ObjectParameter("PhNumber", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var nachParameter = nach != null ?
                new ObjectParameter("Nach", nach) :
                new ObjectParameter("Nach", typeof(string));
    
            var rupeesParameter = rupees != null ?
                new ObjectParameter("Rupees", rupees) :
                new ObjectParameter("Rupees", typeof(string));
    
            var customer1Parameter = customer1 != null ?
                new ObjectParameter("Customer1", customer1) :
                new ObjectParameter("Customer1", typeof(string));
    
            var customer2Parameter = customer2 != null ?
                new ObjectParameter("Customer2", customer2) :
                new ObjectParameter("Customer2", typeof(string));
    
            var customer3Parameter = customer3 != null ?
                new ObjectParameter("Customer3", customer3) :
                new ObjectParameter("Customer3", typeof(string));
    
            var dateOnMandateParameter = dateOnMandate != null ?
                new ObjectParameter("DateOnMandate", dateOnMandate) :
                new ObjectParameter("DateOnMandate", typeof(string));
    
            var tIPPathParameter = tIPPath != null ?
                new ObjectParameter("TIPPath", tIPPath) :
                new ObjectParameter("TIPPath", typeof(string));
    
            var pNGPathParameter = pNGPath != null ?
                new ObjectParameter("PNGPath", pNGPath) :
                new ObjectParameter("PNGPath", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var sponsorCodeParameter = sponsorCode != null ?
                new ObjectParameter("SponsorCode", sponsorCode) :
                new ObjectParameter("SponsorCode", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var paymentDataXParameter = paymentDataX != null ?
                new ObjectParameter("PaymentDataX", paymentDataX) :
                new ObjectParameter("PaymentDataX", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(long));
    
            var typeDataParameter = typeData != null ?
                new ObjectParameter("TypeData", typeData) :
                new ObjectParameter("TypeData", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var rejectedReasonParameter = rejectedReason != null ?
                new ObjectParameter("RejectedReason", rejectedReason) :
                new ObjectParameter("RejectedReason", typeof(string));
    
            var fullbankBranchParameter = fullbankBranch != null ?
                new ObjectParameter("fullbankBranch", fullbankBranch) :
                new ObjectParameter("fullbankBranch", typeof(string));
    
            var bankValidationAdminCountParameter = bankValidationAdminCount.HasValue ?
                new ObjectParameter("BankValidationAdminCount", bankValidationAdminCount) :
                new ObjectParameter("BankValidationAdminCount", typeof(long));
    
            var bankValidationUserCountParameter = bankValidationUserCount.HasValue ?
                new ObjectParameter("BankValidationUserCount", bankValidationUserCount) :
                new ObjectParameter("BankValidationUserCount", typeof(long));
    
            var acValidationAdminCountParameter = acValidationAdminCount.HasValue ?
                new ObjectParameter("AcValidationAdminCount", acValidationAdminCount) :
                new ObjectParameter("AcValidationAdminCount", typeof(long));
    
            var acValidationUserCountParameter = acValidationUserCount.HasValue ?
                new ObjectParameter("AcValidationUserCount", acValidationUserCount) :
                new ObjectParameter("AcValidationUserCount", typeof(long));
    
            var mandateModeParameter = mandateMode != null ?
                new ObjectParameter("MandateMode", mandateMode) :
                new ObjectParameter("MandateMode", typeof(string));
    
            var amountWordsParameter = amountWords != null ?
                new ObjectParameter("AmountWords", amountWords) :
                new ObjectParameter("AmountWords", typeof(string));
    
            var sponsorBankCodeParameter = sponsorBankCode != null ?
                new ObjectParameter("SponsorBankCode", sponsorBankCode) :
                new ObjectParameter("SponsorBankCode", typeof(string));
    
            var iSPhysicalParameter = iSPhysical.HasValue ?
                new ObjectParameter("ISPhysical", iSPhysical) :
                new ObjectParameter("ISPhysical", typeof(bool));
    
            var isEnachParameter = isEnach.HasValue ?
                new ObjectParameter("IsEnach", isEnach) :
                new ObjectParameter("IsEnach", typeof(bool));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var tEUHIDParameter = tEUHID != null ?
                new ObjectParameter("TEUHID", tEUHID) :
                new ObjectParameter("TEUHID", typeof(string));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var categoryCodeParameter = categoryCode != null ?
                new ObjectParameter("CategoryCode", categoryCode) :
                new ObjectParameter("CategoryCode", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var mandateReverseIdParameter = mandateReverseId.HasValue ?
                new ObjectParameter("MandateReverseId", mandateReverseId) :
                new ObjectParameter("MandateReverseId", typeof(long));
    
            var isOnUsParameter = isOnUs.HasValue ?
                new ObjectParameter("IsOnUs", isOnUs) :
                new ObjectParameter("IsOnUs", typeof(bool));
    
            var activityNameParameter = activityName != null ?
                new ObjectParameter("ActivityName", activityName) :
                new ObjectParameter("ActivityName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_SingleMandateNEW", queryTypeParameter, entityIdParameter, debitTypeParameter, frequencyParameter, userIdParameter, toDebitParameter, acNoParameter, bankNameParameter, iFSCParameter, mICRParameter, netBankingParameter, debitCardParameter, amountRupeesParameter, qRCodeImagepathParameter, refrence1Parameter, refrence2Parameter, addr1Parameter, phNumberParameter, emailIdParameter, fromParameter, toParameter, mandateIdParameter, descriptionParameter, statusParameter, nachParameter, rupeesParameter, customer1Parameter, customer2Parameter, customer3Parameter, dateOnMandateParameter, tIPPathParameter, pNGPathParameter, utilityCodeParameter, sponsorCodeParameter, strFromDateParameter, strToDateParameter, strTableParameter, paymentDataXParameter, xmlMandateParameter, filePathParameter, activityIdParameter, typeDataParameter, fromDateParameter, toDateParameter, rejectedReasonParameter, fullbankBranchParameter, bankValidationAdminCountParameter, bankValidationUserCountParameter, acValidationAdminCountParameter, acValidationUserCountParameter, mandateModeParameter, amountWordsParameter, sponsorBankCodeParameter, iSPhysicalParameter, isEnachParameter, appIdParameter, topValParameter, tEUHIDParameter, activityTypeParameter, categoryCodeParameter, idParameter, mandateReverseIdParameter, isOnUsParameter, activityNameParameter);
        }
    
        public virtual ObjectResult<Sp_StateMaster_Result> Sp_StateMaster(string queryType, Nullable<long> entityId, Nullable<long> userId, string stateName, string stateCode, Nullable<long> countryId, Nullable<long> stateId, string tokenId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var stateCodeParameter = stateCode != null ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(long));
    
            var tokenIdParameter = tokenId != null ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_StateMaster_Result>("Sp_StateMaster", queryTypeParameter, entityIdParameter, userIdParameter, stateNameParameter, stateCodeParameter, countryIdParameter, stateIdParameter, tokenIdParameter);
        }
    
        public virtual ObjectResult<Sp_SubModuleMaster_Result> Sp_SubModuleMaster(string queryType, Nullable<long> subModuleId, string subModuleName, string description, Nullable<long> moduleId, Nullable<long> appId, Nullable<long> entityId, Nullable<long> createdBy, string searchText, Nullable<long> userId, Nullable<int> pageCount, string strFromDate, string tokenId, string strToDate)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var subModuleIdParameter = subModuleId.HasValue ?
                new ObjectParameter("SubModuleId", subModuleId) :
                new ObjectParameter("SubModuleId", typeof(long));
    
            var subModuleNameParameter = subModuleName != null ?
                new ObjectParameter("SubModuleName", subModuleName) :
                new ObjectParameter("SubModuleName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(long));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var pageCountParameter = pageCount.HasValue ?
                new ObjectParameter("PageCount", pageCount) :
                new ObjectParameter("PageCount", typeof(int));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var tokenIdParameter = tokenId != null ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_SubModuleMaster_Result>("Sp_SubModuleMaster", queryTypeParameter, subModuleIdParameter, subModuleNameParameter, descriptionParameter, moduleIdParameter, appIdParameter, entityIdParameter, createdByParameter, searchTextParameter, userIdParameter, pageCountParameter, strFromDateParameter, tokenIdParameter, strToDateParameter);
        }
    
        public virtual int Sp_UMRNPresentment(string queryType, Nullable<int> entityID, Nullable<int> userID, string customerName, string refrence, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, string uMRN, string amount, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> date, string xmlDimension, string fileName, Nullable<System.DateTime> prsentmentDate, string filePath, string bankName, string uploadHeaderId, string createdBy, Nullable<long> uploadHeaderId1, string uploadNo, Nullable<long> totalCount, Nullable<long> successCunt, Nullable<int> topVal, string refrence1, string presentmentDate, string legacyId, string fileno, string userName, Nullable<int> bank_ID, string presDate)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var refrenceParameter = refrence != null ?
                new ObjectParameter("Refrence", refrence) :
                new ObjectParameter("Refrence", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var uMRNParameter = uMRN != null ?
                new ObjectParameter("UMRN", uMRN) :
                new ObjectParameter("UMRN", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var prsentmentDateParameter = prsentmentDate.HasValue ?
                new ObjectParameter("PrsentmentDate", prsentmentDate) :
                new ObjectParameter("PrsentmentDate", typeof(System.DateTime));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var uploadHeaderIdParameter = uploadHeaderId != null ?
                new ObjectParameter("UploadHeaderId", uploadHeaderId) :
                new ObjectParameter("UploadHeaderId", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var uploadHeaderId1Parameter = uploadHeaderId1.HasValue ?
                new ObjectParameter("UploadHeaderId1", uploadHeaderId1) :
                new ObjectParameter("UploadHeaderId1", typeof(long));
    
            var uploadNoParameter = uploadNo != null ?
                new ObjectParameter("UploadNo", uploadNo) :
                new ObjectParameter("UploadNo", typeof(string));
    
            var totalCountParameter = totalCount.HasValue ?
                new ObjectParameter("TotalCount", totalCount) :
                new ObjectParameter("TotalCount", typeof(long));
    
            var successCuntParameter = successCunt.HasValue ?
                new ObjectParameter("SuccessCunt", successCunt) :
                new ObjectParameter("SuccessCunt", typeof(long));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var presentmentDateParameter = presentmentDate != null ?
                new ObjectParameter("PresentmentDate", presentmentDate) :
                new ObjectParameter("PresentmentDate", typeof(string));
    
            var legacyIdParameter = legacyId != null ?
                new ObjectParameter("LegacyId", legacyId) :
                new ObjectParameter("LegacyId", typeof(string));
    
            var filenoParameter = fileno != null ?
                new ObjectParameter("Fileno", fileno) :
                new ObjectParameter("Fileno", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var bank_IDParameter = bank_ID.HasValue ?
                new ObjectParameter("Bank_ID", bank_ID) :
                new ObjectParameter("Bank_ID", typeof(int));
    
            var presDateParameter = presDate != null ?
                new ObjectParameter("PresDate", presDate) :
                new ObjectParameter("PresDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_UMRNPresentment", queryTypeParameter, entityIDParameter, userIDParameter, customerNameParameter, refrenceParameter, fromDateParameter, todateParameter, uMRNParameter, amountParameter, createdOnParameter, dateParameter, xmlDimensionParameter, fileNameParameter, prsentmentDateParameter, filePathParameter, bankNameParameter, uploadHeaderIdParameter, createdByParameter, uploadHeaderId1Parameter, uploadNoParameter, totalCountParameter, successCuntParameter, topValParameter, refrence1Parameter, presentmentDateParameter, legacyIdParameter, filenoParameter, userNameParameter, bank_IDParameter, presDateParameter);
        }
    
        public virtual ObjectResult<Sp_UpdateFileStatus_Result> Sp_UpdateFileStatus(string queryType, Nullable<long> entity)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityParameter = entity.HasValue ?
                new ObjectParameter("Entity", entity) :
                new ObjectParameter("Entity", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_UpdateFileStatus_Result>("Sp_UpdateFileStatus", queryTypeParameter, entityParameter);
        }
    
        public virtual int Sp_UpdateNPCILiveBanks(string xmlXlData, string queryType, string appId)
        {
            var xmlXlDataParameter = xmlXlData != null ?
                new ObjectParameter("XmlXlData", xmlXlData) :
                new ObjectParameter("XmlXlData", typeof(string));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var appIdParameter = appId != null ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_UpdateNPCILiveBanks", xmlXlDataParameter, queryTypeParameter, appIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_UpdateStatusFromService(string queryType, Nullable<long> userId, string uMRN, string rEJECTREASON, string rESAcceptedRejected, string rESReasonCode, Nullable<long> mandateId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var uMRNParameter = uMRN != null ?
                new ObjectParameter("UMRN", uMRN) :
                new ObjectParameter("UMRN", typeof(string));
    
            var rEJECTREASONParameter = rEJECTREASON != null ?
                new ObjectParameter("REJECTREASON", rEJECTREASON) :
                new ObjectParameter("REJECTREASON", typeof(string));
    
            var rESAcceptedRejectedParameter = rESAcceptedRejected != null ?
                new ObjectParameter("RESAcceptedRejected", rESAcceptedRejected) :
                new ObjectParameter("RESAcceptedRejected", typeof(string));
    
            var rESReasonCodeParameter = rESReasonCode != null ?
                new ObjectParameter("RESReasonCode", rESReasonCode) :
                new ObjectParameter("RESReasonCode", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_UpdateStatusFromService", queryTypeParameter, userIdParameter, uMRNParameter, rEJECTREASONParameter, rESAcceptedRejectedParameter, rESReasonCodeParameter, mandateIdParameter);
        }
    
        public virtual ObjectResult<Sp_Uploaddata_Result> Sp_Uploaddata(string queryType, Nullable<int> entityID, Nullable<int> userID, string customerName, string refrence, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, string uMRN, string amount, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> date, string xmlDimension, string fileName, Nullable<System.DateTime> prsentmentDate, string filePath, string bankName, string uploadHeaderId, string createdBy, Nullable<long> uploadHeaderId1, string uploadNo, Nullable<long> totalCount, Nullable<long> successCunt, Nullable<int> topVal, Nullable<long> appId, string legacyId, Nullable<int> pageCount, string searchText, string xmlToalUploadedExcelFile, string xmlSuccessExcelFile, string xmlUnSuccessExcelFile, string tokenId, string accountNo, string utilityCode, string amountType, string accountType, string iFSC)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var refrenceParameter = refrence != null ?
                new ObjectParameter("Refrence", refrence) :
                new ObjectParameter("Refrence", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var uMRNParameter = uMRN != null ?
                new ObjectParameter("UMRN", uMRN) :
                new ObjectParameter("UMRN", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var prsentmentDateParameter = prsentmentDate.HasValue ?
                new ObjectParameter("PrsentmentDate", prsentmentDate) :
                new ObjectParameter("PrsentmentDate", typeof(System.DateTime));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var uploadHeaderIdParameter = uploadHeaderId != null ?
                new ObjectParameter("UploadHeaderId", uploadHeaderId) :
                new ObjectParameter("UploadHeaderId", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var uploadHeaderId1Parameter = uploadHeaderId1.HasValue ?
                new ObjectParameter("UploadHeaderId1", uploadHeaderId1) :
                new ObjectParameter("UploadHeaderId1", typeof(long));
    
            var uploadNoParameter = uploadNo != null ?
                new ObjectParameter("UploadNo", uploadNo) :
                new ObjectParameter("UploadNo", typeof(string));
    
            var totalCountParameter = totalCount.HasValue ?
                new ObjectParameter("TotalCount", totalCount) :
                new ObjectParameter("TotalCount", typeof(long));
    
            var successCuntParameter = successCunt.HasValue ?
                new ObjectParameter("SuccessCunt", successCunt) :
                new ObjectParameter("SuccessCunt", typeof(long));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var legacyIdParameter = legacyId != null ?
                new ObjectParameter("LegacyId", legacyId) :
                new ObjectParameter("LegacyId", typeof(string));
    
            var pageCountParameter = pageCount.HasValue ?
                new ObjectParameter("PageCount", pageCount) :
                new ObjectParameter("PageCount", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var xmlToalUploadedExcelFileParameter = xmlToalUploadedExcelFile != null ?
                new ObjectParameter("XmlToalUploadedExcelFile", xmlToalUploadedExcelFile) :
                new ObjectParameter("XmlToalUploadedExcelFile", typeof(string));
    
            var xmlSuccessExcelFileParameter = xmlSuccessExcelFile != null ?
                new ObjectParameter("XmlSuccessExcelFile", xmlSuccessExcelFile) :
                new ObjectParameter("XmlSuccessExcelFile", typeof(string));
    
            var xmlUnSuccessExcelFileParameter = xmlUnSuccessExcelFile != null ?
                new ObjectParameter("XmlUnSuccessExcelFile", xmlUnSuccessExcelFile) :
                new ObjectParameter("XmlUnSuccessExcelFile", typeof(string));
    
            var tokenIdParameter = tokenId != null ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var amountTypeParameter = amountType != null ?
                new ObjectParameter("AmountType", amountType) :
                new ObjectParameter("AmountType", typeof(string));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Uploaddata_Result>("Sp_Uploaddata", queryTypeParameter, entityIDParameter, userIDParameter, customerNameParameter, refrenceParameter, fromDateParameter, todateParameter, uMRNParameter, amountParameter, createdOnParameter, dateParameter, xmlDimensionParameter, fileNameParameter, prsentmentDateParameter, filePathParameter, bankNameParameter, uploadHeaderIdParameter, createdByParameter, uploadHeaderId1Parameter, uploadNoParameter, totalCountParameter, successCuntParameter, topValParameter, appIdParameter, legacyIdParameter, pageCountParameter, searchTextParameter, xmlToalUploadedExcelFileParameter, xmlSuccessExcelFileParameter, xmlUnSuccessExcelFileParameter, tokenIdParameter, accountNoParameter, utilityCodeParameter, amountTypeParameter, accountTypeParameter, iFSCParameter);
        }
    
        public virtual ObjectResult<Sp_Uploaddata1_Result> Sp_Uploaddata1(string queryType, Nullable<int> entityID, Nullable<int> userID, string customerName, string refrence, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, string uMRN, string amount, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> date, string xmlDimension, string fileName, Nullable<System.DateTime> prsentmentDate, string filePath, string bankName, string uploadHeaderId, string createdBy, Nullable<long> uploadHeaderId1, string uploadNo, Nullable<long> totalCount, Nullable<long> successCunt, Nullable<int> topVal, string legacyId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var refrenceParameter = refrence != null ?
                new ObjectParameter("Refrence", refrence) :
                new ObjectParameter("Refrence", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var uMRNParameter = uMRN != null ?
                new ObjectParameter("UMRN", uMRN) :
                new ObjectParameter("UMRN", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var prsentmentDateParameter = prsentmentDate.HasValue ?
                new ObjectParameter("PrsentmentDate", prsentmentDate) :
                new ObjectParameter("PrsentmentDate", typeof(System.DateTime));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var uploadHeaderIdParameter = uploadHeaderId != null ?
                new ObjectParameter("UploadHeaderId", uploadHeaderId) :
                new ObjectParameter("UploadHeaderId", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var uploadHeaderId1Parameter = uploadHeaderId1.HasValue ?
                new ObjectParameter("UploadHeaderId1", uploadHeaderId1) :
                new ObjectParameter("UploadHeaderId1", typeof(long));
    
            var uploadNoParameter = uploadNo != null ?
                new ObjectParameter("UploadNo", uploadNo) :
                new ObjectParameter("UploadNo", typeof(string));
    
            var totalCountParameter = totalCount.HasValue ?
                new ObjectParameter("TotalCount", totalCount) :
                new ObjectParameter("TotalCount", typeof(long));
    
            var successCuntParameter = successCunt.HasValue ?
                new ObjectParameter("SuccessCunt", successCunt) :
                new ObjectParameter("SuccessCunt", typeof(long));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var legacyIdParameter = legacyId != null ?
                new ObjectParameter("LegacyId", legacyId) :
                new ObjectParameter("LegacyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Uploaddata1_Result>("Sp_Uploaddata1", queryTypeParameter, entityIDParameter, userIDParameter, customerNameParameter, refrenceParameter, fromDateParameter, todateParameter, uMRNParameter, amountParameter, createdOnParameter, dateParameter, xmlDimensionParameter, fileNameParameter, prsentmentDateParameter, filePathParameter, bankNameParameter, uploadHeaderIdParameter, createdByParameter, uploadHeaderId1Parameter, uploadNoParameter, totalCountParameter, successCuntParameter, topValParameter, legacyIdParameter);
        }
    
        public virtual ObjectResult<Sp_UploadPhyscialResponse_Result> Sp_UploadPhyscialResponse(string queryType, string xmlValid, string xmlInValidate, Nullable<int> userID, Nullable<int> appID, Nullable<int> noOFRecords, Nullable<int> tUPRHID, string tCHID, string date)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var xmlValidParameter = xmlValid != null ?
                new ObjectParameter("XmlValid", xmlValid) :
                new ObjectParameter("XmlValid", typeof(string));
    
            var xmlInValidateParameter = xmlInValidate != null ?
                new ObjectParameter("XmlInValidate", xmlInValidate) :
                new ObjectParameter("XmlInValidate", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var noOFRecordsParameter = noOFRecords.HasValue ?
                new ObjectParameter("NoOFRecords", noOFRecords) :
                new ObjectParameter("NoOFRecords", typeof(int));
    
            var tUPRHIDParameter = tUPRHID.HasValue ?
                new ObjectParameter("TUPRHID", tUPRHID) :
                new ObjectParameter("TUPRHID", typeof(int));
    
            var tCHIDParameter = tCHID != null ?
                new ObjectParameter("TCHID", tCHID) :
                new ObjectParameter("TCHID", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_UploadPhyscialResponse_Result>("Sp_UploadPhyscialResponse", queryTypeParameter, xmlValidParameter, xmlInValidateParameter, userIDParameter, appIDParameter, noOFRecordsParameter, tUPRHIDParameter, tCHIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<Sp_user_Result> Sp_user(string queryType, string type, Nullable<long> userId, string contactNo, string emailId, string userNameId, string password, string passwordKey, string xmlEntity, Nullable<long> entityId, Nullable<long> user, string xmlUtilityCode, string xmlSponsorBankCode, string xmlPaymentMode, string xmlCategoryCode, Nullable<bool> isBulkMandate, Nullable<bool> isMandate, Nullable<bool> isMandateEdit, Nullable<bool> isRefrenceEdit, Nullable<bool> isRefrenceCheck, string emailSendTo, Nullable<bool> isAllowFundTransfer, Nullable<bool> isZipSure, Nullable<long> aPPId, Nullable<long> presentmentMaker, Nullable<long> presentmentChecker, string xmlPresentmentMaker, string xmlUserRightsA, string xmlUserRightsB, string xmlUserRightsC, string xmlUserRightsD, string nachViewUserID, Nullable<long> entityUserID, string mandateID, Nullable<int> isDashBoard, Nullable<bool> isEnableCancel, Nullable<long> bankValidationUserCount, Nullable<long> acValidationUserCount, Nullable<bool> isViewAll, Nullable<int> pageCount, string search_Text)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var userNameIdParameter = userNameId != null ?
                new ObjectParameter("userNameId", userNameId) :
                new ObjectParameter("userNameId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var passwordKeyParameter = passwordKey != null ?
                new ObjectParameter("passwordKey", passwordKey) :
                new ObjectParameter("passwordKey", typeof(string));
    
            var xmlEntityParameter = xmlEntity != null ?
                new ObjectParameter("XmlEntity", xmlEntity) :
                new ObjectParameter("XmlEntity", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(long));
    
            var xmlUtilityCodeParameter = xmlUtilityCode != null ?
                new ObjectParameter("XmlUtilityCode", xmlUtilityCode) :
                new ObjectParameter("XmlUtilityCode", typeof(string));
    
            var xmlSponsorBankCodeParameter = xmlSponsorBankCode != null ?
                new ObjectParameter("XmlSponsorBankCode", xmlSponsorBankCode) :
                new ObjectParameter("XmlSponsorBankCode", typeof(string));
    
            var xmlPaymentModeParameter = xmlPaymentMode != null ?
                new ObjectParameter("XmlPaymentMode", xmlPaymentMode) :
                new ObjectParameter("XmlPaymentMode", typeof(string));
    
            var xmlCategoryCodeParameter = xmlCategoryCode != null ?
                new ObjectParameter("XmlCategoryCode", xmlCategoryCode) :
                new ObjectParameter("XmlCategoryCode", typeof(string));
    
            var isBulkMandateParameter = isBulkMandate.HasValue ?
                new ObjectParameter("IsBulkMandate", isBulkMandate) :
                new ObjectParameter("IsBulkMandate", typeof(bool));
    
            var isMandateParameter = isMandate.HasValue ?
                new ObjectParameter("IsMandate", isMandate) :
                new ObjectParameter("IsMandate", typeof(bool));
    
            var isMandateEditParameter = isMandateEdit.HasValue ?
                new ObjectParameter("IsMandateEdit", isMandateEdit) :
                new ObjectParameter("IsMandateEdit", typeof(bool));
    
            var isRefrenceEditParameter = isRefrenceEdit.HasValue ?
                new ObjectParameter("IsRefrenceEdit", isRefrenceEdit) :
                new ObjectParameter("IsRefrenceEdit", typeof(bool));
    
            var isRefrenceCheckParameter = isRefrenceCheck.HasValue ?
                new ObjectParameter("IsRefrenceCheck", isRefrenceCheck) :
                new ObjectParameter("IsRefrenceCheck", typeof(bool));
    
            var emailSendToParameter = emailSendTo != null ?
                new ObjectParameter("EmailSendTo", emailSendTo) :
                new ObjectParameter("EmailSendTo", typeof(string));
    
            var isAllowFundTransferParameter = isAllowFundTransfer.HasValue ?
                new ObjectParameter("IsAllowFundTransfer", isAllowFundTransfer) :
                new ObjectParameter("IsAllowFundTransfer", typeof(bool));
    
            var isZipSureParameter = isZipSure.HasValue ?
                new ObjectParameter("IsZipSure", isZipSure) :
                new ObjectParameter("IsZipSure", typeof(bool));
    
            var aPPIdParameter = aPPId.HasValue ?
                new ObjectParameter("APPId", aPPId) :
                new ObjectParameter("APPId", typeof(long));
    
            var presentmentMakerParameter = presentmentMaker.HasValue ?
                new ObjectParameter("PresentmentMaker", presentmentMaker) :
                new ObjectParameter("PresentmentMaker", typeof(long));
    
            var presentmentCheckerParameter = presentmentChecker.HasValue ?
                new ObjectParameter("PresentmentChecker", presentmentChecker) :
                new ObjectParameter("PresentmentChecker", typeof(long));
    
            var xmlPresentmentMakerParameter = xmlPresentmentMaker != null ?
                new ObjectParameter("XmlPresentmentMaker", xmlPresentmentMaker) :
                new ObjectParameter("XmlPresentmentMaker", typeof(string));
    
            var xmlUserRightsAParameter = xmlUserRightsA != null ?
                new ObjectParameter("XmlUserRightsA", xmlUserRightsA) :
                new ObjectParameter("XmlUserRightsA", typeof(string));
    
            var xmlUserRightsBParameter = xmlUserRightsB != null ?
                new ObjectParameter("XmlUserRightsB", xmlUserRightsB) :
                new ObjectParameter("XmlUserRightsB", typeof(string));
    
            var xmlUserRightsCParameter = xmlUserRightsC != null ?
                new ObjectParameter("XmlUserRightsC", xmlUserRightsC) :
                new ObjectParameter("XmlUserRightsC", typeof(string));
    
            var xmlUserRightsDParameter = xmlUserRightsD != null ?
                new ObjectParameter("XmlUserRightsD", xmlUserRightsD) :
                new ObjectParameter("XmlUserRightsD", typeof(string));
    
            var nachViewUserIDParameter = nachViewUserID != null ?
                new ObjectParameter("NachViewUserID", nachViewUserID) :
                new ObjectParameter("NachViewUserID", typeof(string));
    
            var entityUserIDParameter = entityUserID.HasValue ?
                new ObjectParameter("EntityUserID", entityUserID) :
                new ObjectParameter("EntityUserID", typeof(long));
    
            var mandateIDParameter = mandateID != null ?
                new ObjectParameter("MandateID", mandateID) :
                new ObjectParameter("MandateID", typeof(string));
    
            var isDashBoardParameter = isDashBoard.HasValue ?
                new ObjectParameter("IsDashBoard", isDashBoard) :
                new ObjectParameter("IsDashBoard", typeof(int));
    
            var isEnableCancelParameter = isEnableCancel.HasValue ?
                new ObjectParameter("IsEnableCancel", isEnableCancel) :
                new ObjectParameter("IsEnableCancel", typeof(bool));
    
            var bankValidationUserCountParameter = bankValidationUserCount.HasValue ?
                new ObjectParameter("BankValidationUserCount", bankValidationUserCount) :
                new ObjectParameter("BankValidationUserCount", typeof(long));
    
            var acValidationUserCountParameter = acValidationUserCount.HasValue ?
                new ObjectParameter("AcValidationUserCount", acValidationUserCount) :
                new ObjectParameter("AcValidationUserCount", typeof(long));
    
            var isViewAllParameter = isViewAll.HasValue ?
                new ObjectParameter("IsViewAll", isViewAll) :
                new ObjectParameter("IsViewAll", typeof(bool));
    
            var pageCountParameter = pageCount.HasValue ?
                new ObjectParameter("PageCount", pageCount) :
                new ObjectParameter("PageCount", typeof(int));
    
            var search_TextParameter = search_Text != null ?
                new ObjectParameter("Search_Text", search_Text) :
                new ObjectParameter("Search_Text", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_user_Result>("Sp_user", queryTypeParameter, typeParameter, userIdParameter, contactNoParameter, emailIdParameter, userNameIdParameter, passwordParameter, passwordKeyParameter, xmlEntityParameter, entityIdParameter, userParameter, xmlUtilityCodeParameter, xmlSponsorBankCodeParameter, xmlPaymentModeParameter, xmlCategoryCodeParameter, isBulkMandateParameter, isMandateParameter, isMandateEditParameter, isRefrenceEditParameter, isRefrenceCheckParameter, emailSendToParameter, isAllowFundTransferParameter, isZipSureParameter, aPPIdParameter, presentmentMakerParameter, presentmentCheckerParameter, xmlPresentmentMakerParameter, xmlUserRightsAParameter, xmlUserRightsBParameter, xmlUserRightsCParameter, xmlUserRightsDParameter, nachViewUserIDParameter, entityUserIDParameter, mandateIDParameter, isDashBoardParameter, isEnableCancelParameter, bankValidationUserCountParameter, acValidationUserCountParameter, isViewAllParameter, pageCountParameter, search_TextParameter);
        }
    
        public virtual ObjectResult<sp_UserLogin_Result> sp_UserLogin(string queryType, string userName, string phoneNo, string emailId, string changePassword, string changePasswordKey, Nullable<long> userId, string tokenID, string iPAddress, string macAddress, Nullable<int> isLogin, Nullable<int> idleTime, string appid, Nullable<int> isAccountblock, Nullable<int> iswrongattempt, Nullable<int> iscorrectattempt)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var changePasswordParameter = changePassword != null ?
                new ObjectParameter("ChangePassword", changePassword) :
                new ObjectParameter("ChangePassword", typeof(string));
    
            var changePasswordKeyParameter = changePasswordKey != null ?
                new ObjectParameter("ChangePasswordKey", changePasswordKey) :
                new ObjectParameter("ChangePasswordKey", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var tokenIDParameter = tokenID != null ?
                new ObjectParameter("TokenID", tokenID) :
                new ObjectParameter("TokenID", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var macAddressParameter = macAddress != null ?
                new ObjectParameter("MacAddress", macAddress) :
                new ObjectParameter("MacAddress", typeof(string));
    
            var isLoginParameter = isLogin.HasValue ?
                new ObjectParameter("IsLogin", isLogin) :
                new ObjectParameter("IsLogin", typeof(int));
    
            var idleTimeParameter = idleTime.HasValue ?
                new ObjectParameter("idleTime", idleTime) :
                new ObjectParameter("idleTime", typeof(int));
    
            var appidParameter = appid != null ?
                new ObjectParameter("Appid", appid) :
                new ObjectParameter("Appid", typeof(string));
    
            var isAccountblockParameter = isAccountblock.HasValue ?
                new ObjectParameter("IsAccountblock", isAccountblock) :
                new ObjectParameter("IsAccountblock", typeof(int));
    
            var iswrongattemptParameter = iswrongattempt.HasValue ?
                new ObjectParameter("Iswrongattempt", iswrongattempt) :
                new ObjectParameter("Iswrongattempt", typeof(int));
    
            var iscorrectattemptParameter = iscorrectattempt.HasValue ?
                new ObjectParameter("Iscorrectattempt", iscorrectattempt) :
                new ObjectParameter("Iscorrectattempt", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserLogin_Result>("sp_UserLogin", queryTypeParameter, userNameParameter, phoneNoParameter, emailIdParameter, changePasswordParameter, changePasswordKeyParameter, userIdParameter, tokenIDParameter, iPAddressParameter, macAddressParameter, isLoginParameter, idleTimeParameter, appidParameter, isAccountblockParameter, iswrongattemptParameter, iscorrectattemptParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_ValidatemandateData(string queryType, Nullable<long> entityId, string categoryCode, string utilityCode, string sponsorCode)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var categoryCodeParameter = categoryCode != null ?
                new ObjectParameter("CategoryCode", categoryCode) :
                new ObjectParameter("CategoryCode", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var sponsorCodeParameter = sponsorCode != null ?
                new ObjectParameter("SponsorCode", sponsorCode) :
                new ObjectParameter("SponsorCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_ValidatemandateData", queryTypeParameter, entityIdParameter, categoryCodeParameter, utilityCodeParameter, sponsorCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_WebAPI(string queryType, string userName, Nullable<long> userId, string acNo, string iFSC, string mICR, string customer, string description, string status, string bankName, Nullable<long> entityId, Nullable<long> acValidatedId, string password, string passwordKey, string adharCardNo, string refrenceNo, string traceNumber, string enitityMarchantKey, string debitType, string frequency, string toDebit, string amountRupees, string refrence1, string @ref, string refrence2, string addr1, string phNumber, string emailId, string from, string to, Nullable<long> mandateId, string nach, string rupees, string customer1, string customer2, string customer3, string dateOnMandate, string tIPPath, string pNGPath, string utilityCode, string mandateType, string sponsorCode, string strFromDate, string strToDate, string strTable, string paymentDataX, string xmlMandate, string filePath, Nullable<long> activityId, string typeData, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string tIFPath, string jPGPath, string type, string eNachPhoneNumber, string eNachEmailId, Nullable<bool> agree, string eNachAadharNumber, string mandateMode, Nullable<long> id, string enachMessageId, Nullable<long> appId, Nullable<long> printQR, string eMandateType, Nullable<bool> isAggregator, string isAggregatorValue, string categoryCode, string vPAId, string qrMandateValue)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var acNoParameter = acNo != null ?
                new ObjectParameter("AcNo", acNo) :
                new ObjectParameter("AcNo", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var mICRParameter = mICR != null ?
                new ObjectParameter("MICR", mICR) :
                new ObjectParameter("MICR", typeof(string));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var acValidatedIdParameter = acValidatedId.HasValue ?
                new ObjectParameter("AcValidatedId", acValidatedId) :
                new ObjectParameter("AcValidatedId", typeof(long));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordKeyParameter = passwordKey != null ?
                new ObjectParameter("PasswordKey", passwordKey) :
                new ObjectParameter("PasswordKey", typeof(string));
    
            var adharCardNoParameter = adharCardNo != null ?
                new ObjectParameter("AdharCardNo", adharCardNo) :
                new ObjectParameter("AdharCardNo", typeof(string));
    
            var refrenceNoParameter = refrenceNo != null ?
                new ObjectParameter("RefrenceNo", refrenceNo) :
                new ObjectParameter("RefrenceNo", typeof(string));
    
            var traceNumberParameter = traceNumber != null ?
                new ObjectParameter("TraceNumber", traceNumber) :
                new ObjectParameter("TraceNumber", typeof(string));
    
            var enitityMarchantKeyParameter = enitityMarchantKey != null ?
                new ObjectParameter("EnitityMarchantKey", enitityMarchantKey) :
                new ObjectParameter("EnitityMarchantKey", typeof(string));
    
            var debitTypeParameter = debitType != null ?
                new ObjectParameter("DebitType", debitType) :
                new ObjectParameter("DebitType", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var toDebitParameter = toDebit != null ?
                new ObjectParameter("ToDebit", toDebit) :
                new ObjectParameter("ToDebit", typeof(string));
    
            var amountRupeesParameter = amountRupees != null ?
                new ObjectParameter("AmountRupees", amountRupees) :
                new ObjectParameter("AmountRupees", typeof(string));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var refParameter = @ref != null ?
                new ObjectParameter("Ref", @ref) :
                new ObjectParameter("Ref", typeof(string));
    
            var refrence2Parameter = refrence2 != null ?
                new ObjectParameter("Refrence2", refrence2) :
                new ObjectParameter("Refrence2", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var phNumberParameter = phNumber != null ?
                new ObjectParameter("PhNumber", phNumber) :
                new ObjectParameter("PhNumber", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var nachParameter = nach != null ?
                new ObjectParameter("Nach", nach) :
                new ObjectParameter("Nach", typeof(string));
    
            var rupeesParameter = rupees != null ?
                new ObjectParameter("Rupees", rupees) :
                new ObjectParameter("Rupees", typeof(string));
    
            var customer1Parameter = customer1 != null ?
                new ObjectParameter("Customer1", customer1) :
                new ObjectParameter("Customer1", typeof(string));
    
            var customer2Parameter = customer2 != null ?
                new ObjectParameter("Customer2", customer2) :
                new ObjectParameter("Customer2", typeof(string));
    
            var customer3Parameter = customer3 != null ?
                new ObjectParameter("Customer3", customer3) :
                new ObjectParameter("Customer3", typeof(string));
    
            var dateOnMandateParameter = dateOnMandate != null ?
                new ObjectParameter("DateOnMandate", dateOnMandate) :
                new ObjectParameter("DateOnMandate", typeof(string));
    
            var tIPPathParameter = tIPPath != null ?
                new ObjectParameter("TIPPath", tIPPath) :
                new ObjectParameter("TIPPath", typeof(string));
    
            var pNGPathParameter = pNGPath != null ?
                new ObjectParameter("PNGPath", pNGPath) :
                new ObjectParameter("PNGPath", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var mandateTypeParameter = mandateType != null ?
                new ObjectParameter("MandateType", mandateType) :
                new ObjectParameter("MandateType", typeof(string));
    
            var sponsorCodeParameter = sponsorCode != null ?
                new ObjectParameter("SponsorCode", sponsorCode) :
                new ObjectParameter("SponsorCode", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var paymentDataXParameter = paymentDataX != null ?
                new ObjectParameter("PaymentDataX", paymentDataX) :
                new ObjectParameter("PaymentDataX", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(long));
    
            var typeDataParameter = typeData != null ?
                new ObjectParameter("TypeData", typeData) :
                new ObjectParameter("TypeData", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var tIFPathParameter = tIFPath != null ?
                new ObjectParameter("TIFPath", tIFPath) :
                new ObjectParameter("TIFPath", typeof(string));
    
            var jPGPathParameter = jPGPath != null ?
                new ObjectParameter("JPGPath", jPGPath) :
                new ObjectParameter("JPGPath", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var eNachPhoneNumberParameter = eNachPhoneNumber != null ?
                new ObjectParameter("ENachPhoneNumber", eNachPhoneNumber) :
                new ObjectParameter("ENachPhoneNumber", typeof(string));
    
            var eNachEmailIdParameter = eNachEmailId != null ?
                new ObjectParameter("ENachEmailId", eNachEmailId) :
                new ObjectParameter("ENachEmailId", typeof(string));
    
            var agreeParameter = agree.HasValue ?
                new ObjectParameter("Agree", agree) :
                new ObjectParameter("Agree", typeof(bool));
    
            var eNachAadharNumberParameter = eNachAadharNumber != null ?
                new ObjectParameter("ENachAadharNumber", eNachAadharNumber) :
                new ObjectParameter("ENachAadharNumber", typeof(string));
    
            var mandateModeParameter = mandateMode != null ?
                new ObjectParameter("MandateMode", mandateMode) :
                new ObjectParameter("MandateMode", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var enachMessageIdParameter = enachMessageId != null ?
                new ObjectParameter("EnachMessageId", enachMessageId) :
                new ObjectParameter("EnachMessageId", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("appId", appId) :
                new ObjectParameter("appId", typeof(long));
    
            var printQRParameter = printQR.HasValue ?
                new ObjectParameter("PrintQR", printQR) :
                new ObjectParameter("PrintQR", typeof(long));
    
            var eMandateTypeParameter = eMandateType != null ?
                new ObjectParameter("EMandateType", eMandateType) :
                new ObjectParameter("EMandateType", typeof(string));
    
            var isAggregatorParameter = isAggregator.HasValue ?
                new ObjectParameter("IsAggregator", isAggregator) :
                new ObjectParameter("IsAggregator", typeof(bool));
    
            var isAggregatorValueParameter = isAggregatorValue != null ?
                new ObjectParameter("IsAggregatorValue", isAggregatorValue) :
                new ObjectParameter("IsAggregatorValue", typeof(string));
    
            var categoryCodeParameter = categoryCode != null ?
                new ObjectParameter("CategoryCode", categoryCode) :
                new ObjectParameter("CategoryCode", typeof(string));
    
            var vPAIdParameter = vPAId != null ?
                new ObjectParameter("VPAId", vPAId) :
                new ObjectParameter("VPAId", typeof(string));
    
            var qrMandateValueParameter = qrMandateValue != null ?
                new ObjectParameter("QrMandateValue", qrMandateValue) :
                new ObjectParameter("QrMandateValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_WebAPI", queryTypeParameter, userNameParameter, userIdParameter, acNoParameter, iFSCParameter, mICRParameter, customerParameter, descriptionParameter, statusParameter, bankNameParameter, entityIdParameter, acValidatedIdParameter, passwordParameter, passwordKeyParameter, adharCardNoParameter, refrenceNoParameter, traceNumberParameter, enitityMarchantKeyParameter, debitTypeParameter, frequencyParameter, toDebitParameter, amountRupeesParameter, refrence1Parameter, refParameter, refrence2Parameter, addr1Parameter, phNumberParameter, emailIdParameter, fromParameter, toParameter, mandateIdParameter, nachParameter, rupeesParameter, customer1Parameter, customer2Parameter, customer3Parameter, dateOnMandateParameter, tIPPathParameter, pNGPathParameter, utilityCodeParameter, mandateTypeParameter, sponsorCodeParameter, strFromDateParameter, strToDateParameter, strTableParameter, paymentDataXParameter, xmlMandateParameter, filePathParameter, activityIdParameter, typeDataParameter, fromDateParameter, toDateParameter, tIFPathParameter, jPGPathParameter, typeParameter, eNachPhoneNumberParameter, eNachEmailIdParameter, agreeParameter, eNachAadharNumberParameter, mandateModeParameter, idParameter, enachMessageIdParameter, appIdParameter, printQRParameter, eMandateTypeParameter, isAggregatorParameter, isAggregatorValueParameter, categoryCodeParameter, vPAIdParameter, qrMandateValueParameter);
        }
    
        public virtual ObjectResult<Sp_WebSevice_Result> Sp_WebSevice(string queryType, string userName, Nullable<long> userId, string acNo, string iFSC, string mICR, string customer, string description, string status, string bankName, Nullable<long> entityId, Nullable<long> acValidatedId, string password, string passwordKey, string adharCardNo, string refrenceNo, string traceNumber, string debitType, string frequency, string toDebit, string amountRupees, string refrence1, string @ref, string refrence2, string addr1, string phNumber, string emailId, string from, string to, Nullable<long> mandateId, string nach, string rupees, string customer1, string customer2, string customer3, string dateOnMandate, string tIPPath, string pNGPath, string utilityCode, string sponsorCode, string strFromDate, string strToDate, string strTable, string paymentDataX, string xmlMandate, string filePath, Nullable<long> activityId, string typeData, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string tIFPath, string jPGPath, string type, string eNachPhoneNumber, string eNachEmailId, Nullable<bool> agree, string eNachAadharNumber, string mandateMode, Nullable<long> id, string enachMessageId, string emandateType, Nullable<bool> isPhysical, Nullable<bool> isEmandate, Nullable<long> appId, string categoryCode)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var acNoParameter = acNo != null ?
                new ObjectParameter("AcNo", acNo) :
                new ObjectParameter("AcNo", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var mICRParameter = mICR != null ?
                new ObjectParameter("MICR", mICR) :
                new ObjectParameter("MICR", typeof(string));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var acValidatedIdParameter = acValidatedId.HasValue ?
                new ObjectParameter("AcValidatedId", acValidatedId) :
                new ObjectParameter("AcValidatedId", typeof(long));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordKeyParameter = passwordKey != null ?
                new ObjectParameter("PasswordKey", passwordKey) :
                new ObjectParameter("PasswordKey", typeof(string));
    
            var adharCardNoParameter = adharCardNo != null ?
                new ObjectParameter("AdharCardNo", adharCardNo) :
                new ObjectParameter("AdharCardNo", typeof(string));
    
            var refrenceNoParameter = refrenceNo != null ?
                new ObjectParameter("RefrenceNo", refrenceNo) :
                new ObjectParameter("RefrenceNo", typeof(string));
    
            var traceNumberParameter = traceNumber != null ?
                new ObjectParameter("TraceNumber", traceNumber) :
                new ObjectParameter("TraceNumber", typeof(string));
    
            var debitTypeParameter = debitType != null ?
                new ObjectParameter("DebitType", debitType) :
                new ObjectParameter("DebitType", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var toDebitParameter = toDebit != null ?
                new ObjectParameter("ToDebit", toDebit) :
                new ObjectParameter("ToDebit", typeof(string));
    
            var amountRupeesParameter = amountRupees != null ?
                new ObjectParameter("AmountRupees", amountRupees) :
                new ObjectParameter("AmountRupees", typeof(string));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var refParameter = @ref != null ?
                new ObjectParameter("Ref", @ref) :
                new ObjectParameter("Ref", typeof(string));
    
            var refrence2Parameter = refrence2 != null ?
                new ObjectParameter("Refrence2", refrence2) :
                new ObjectParameter("Refrence2", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var phNumberParameter = phNumber != null ?
                new ObjectParameter("PhNumber", phNumber) :
                new ObjectParameter("PhNumber", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var nachParameter = nach != null ?
                new ObjectParameter("Nach", nach) :
                new ObjectParameter("Nach", typeof(string));
    
            var rupeesParameter = rupees != null ?
                new ObjectParameter("Rupees", rupees) :
                new ObjectParameter("Rupees", typeof(string));
    
            var customer1Parameter = customer1 != null ?
                new ObjectParameter("Customer1", customer1) :
                new ObjectParameter("Customer1", typeof(string));
    
            var customer2Parameter = customer2 != null ?
                new ObjectParameter("Customer2", customer2) :
                new ObjectParameter("Customer2", typeof(string));
    
            var customer3Parameter = customer3 != null ?
                new ObjectParameter("Customer3", customer3) :
                new ObjectParameter("Customer3", typeof(string));
    
            var dateOnMandateParameter = dateOnMandate != null ?
                new ObjectParameter("DateOnMandate", dateOnMandate) :
                new ObjectParameter("DateOnMandate", typeof(string));
    
            var tIPPathParameter = tIPPath != null ?
                new ObjectParameter("TIPPath", tIPPath) :
                new ObjectParameter("TIPPath", typeof(string));
    
            var pNGPathParameter = pNGPath != null ?
                new ObjectParameter("PNGPath", pNGPath) :
                new ObjectParameter("PNGPath", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var sponsorCodeParameter = sponsorCode != null ?
                new ObjectParameter("SponsorCode", sponsorCode) :
                new ObjectParameter("SponsorCode", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var paymentDataXParameter = paymentDataX != null ?
                new ObjectParameter("PaymentDataX", paymentDataX) :
                new ObjectParameter("PaymentDataX", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(long));
    
            var typeDataParameter = typeData != null ?
                new ObjectParameter("TypeData", typeData) :
                new ObjectParameter("TypeData", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var tIFPathParameter = tIFPath != null ?
                new ObjectParameter("TIFPath", tIFPath) :
                new ObjectParameter("TIFPath", typeof(string));
    
            var jPGPathParameter = jPGPath != null ?
                new ObjectParameter("JPGPath", jPGPath) :
                new ObjectParameter("JPGPath", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var eNachPhoneNumberParameter = eNachPhoneNumber != null ?
                new ObjectParameter("ENachPhoneNumber", eNachPhoneNumber) :
                new ObjectParameter("ENachPhoneNumber", typeof(string));
    
            var eNachEmailIdParameter = eNachEmailId != null ?
                new ObjectParameter("ENachEmailId", eNachEmailId) :
                new ObjectParameter("ENachEmailId", typeof(string));
    
            var agreeParameter = agree.HasValue ?
                new ObjectParameter("Agree", agree) :
                new ObjectParameter("Agree", typeof(bool));
    
            var eNachAadharNumberParameter = eNachAadharNumber != null ?
                new ObjectParameter("ENachAadharNumber", eNachAadharNumber) :
                new ObjectParameter("ENachAadharNumber", typeof(string));
    
            var mandateModeParameter = mandateMode != null ?
                new ObjectParameter("MandateMode", mandateMode) :
                new ObjectParameter("MandateMode", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var enachMessageIdParameter = enachMessageId != null ?
                new ObjectParameter("EnachMessageId", enachMessageId) :
                new ObjectParameter("EnachMessageId", typeof(string));
    
            var emandateTypeParameter = emandateType != null ?
                new ObjectParameter("EmandateType", emandateType) :
                new ObjectParameter("EmandateType", typeof(string));
    
            var isPhysicalParameter = isPhysical.HasValue ?
                new ObjectParameter("IsPhysical", isPhysical) :
                new ObjectParameter("IsPhysical", typeof(bool));
    
            var isEmandateParameter = isEmandate.HasValue ?
                new ObjectParameter("IsEmandate", isEmandate) :
                new ObjectParameter("IsEmandate", typeof(bool));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("appId", appId) :
                new ObjectParameter("appId", typeof(long));
    
            var categoryCodeParameter = categoryCode != null ?
                new ObjectParameter("CategoryCode", categoryCode) :
                new ObjectParameter("CategoryCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_WebSevice_Result>("Sp_WebSevice", queryTypeParameter, userNameParameter, userIdParameter, acNoParameter, iFSCParameter, mICRParameter, customerParameter, descriptionParameter, statusParameter, bankNameParameter, entityIdParameter, acValidatedIdParameter, passwordParameter, passwordKeyParameter, adharCardNoParameter, refrenceNoParameter, traceNumberParameter, debitTypeParameter, frequencyParameter, toDebitParameter, amountRupeesParameter, refrence1Parameter, refParameter, refrence2Parameter, addr1Parameter, phNumberParameter, emailIdParameter, fromParameter, toParameter, mandateIdParameter, nachParameter, rupeesParameter, customer1Parameter, customer2Parameter, customer3Parameter, dateOnMandateParameter, tIPPathParameter, pNGPathParameter, utilityCodeParameter, sponsorCodeParameter, strFromDateParameter, strToDateParameter, strTableParameter, paymentDataXParameter, xmlMandateParameter, filePathParameter, activityIdParameter, typeDataParameter, fromDateParameter, toDateParameter, tIFPathParameter, jPGPathParameter, typeParameter, eNachPhoneNumberParameter, eNachEmailIdParameter, agreeParameter, eNachAadharNumberParameter, mandateModeParameter, idParameter, enachMessageIdParameter, emandateTypeParameter, isPhysicalParameter, isEmandateParameter, appIdParameter, categoryCodeParameter);
        }
    
        public virtual ObjectResult<Sp_WindowsService_Result> Sp_WindowsService(string queryType)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_WindowsService_Result>("Sp_WindowsService", queryTypeParameter);
        }
    }
}
